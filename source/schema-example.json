{
  "openapi": "3.0.0",
  "paths": {
    "/app-manager-accounting": {
      "post": {
        "operationId": "AppManagerAccountingController_submitInvoicesFromOrder",
        "summary": "Submit invoice from order to Lexoffice.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingInvoiceSubmitInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LexofficeInvoiceDto"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-accounting"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-accounting/{orderId}/get-invoices": {
      "get": {
        "operationId": "AppManagerAccountingController_getInvoicesByOrderId",
        "summary": "Get Accounting invoices for order.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAccountingInvoiceDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-accounting"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-accounting/{orderId}/can-submit-invoices": {
      "get": {
        "operationId": "AppManagerAccountingController_canCreateInvoices",
        "summary": "Check if can submit invoices for order.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-accounting"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/checkout/{id}": {
      "post": {
        "operationId": "AppManagerCartController_checkout",
        "summary": "Checkout cart by manager, on behalf of the customer. Create order.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDto"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/cart-products": {
      "post": {
        "operationId": "AppManagerCartController_setProducts",
        "summary": "Add products in the customer cart.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartInfoDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/cart-product/{id}": {
      "delete": {
        "operationId": "AppManagerCartController_deleteProduct",
        "summary": "Delete product from the customer cart.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/cart-product/count/{id}": {
      "patch": {
        "operationId": "AppManagerCartController_changeProductCount",
        "summary": "Change product count in the customer cart.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCartProductCountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/cart-product/accept/{id}": {
      "patch": {
        "operationId": "AppManagerCartController_accept",
        "summary": "Accept the customer cart.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/send-payment-link-sms/{orderTransactionId}": {
      "get": {
        "operationId": "AppManagerCartController_sendSmsWithPaymentLink",
        "summary": "Send sms with payment link for transaction",
        "parameters": [
          {
            "name": "orderTransactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-cart/send-order-replacement-reminder-voice-call/{orderReplacementId}": {
      "get": {
        "operationId": "AppManagerCartController_sendOrderReplacementReminderVoiceCall",
        "summary": "Send order replacement reminder voice call",
        "parameters": [
          {
            "name": "orderReplacementId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-commission-fee/{orderId}": {
      "get": {
        "operationId": "AppManagerCommissionFeeController_getCommissionFeeForOrder",
        "summary": "Get commission fee for order",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommissionFeeOrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-commission-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-commission-fee/calculate-order": {
      "post": {
        "operationId": "AppManagerCommissionFeeController_createCommissionFeeForOrder",
        "summary": "Create commission fee for order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionFeeorderCalculateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommissionFeeOrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-commission-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-customer/send-reset-password-email": {
      "post": {
        "operationId": "AppManagerCustomerController_sendResetPasswordEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordEmailInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-customer/delete-account/{id}": {
      "delete": {
        "operationId": "AppManagerCustomerController_deleteAccount",
        "summary": "Delete customer.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-inspector/inspect-orders": {
      "get": {
        "operationId": "AppManagerInspectorController_inspectSuspiciousOrders",
        "summary": "Inspect suspicious orders",
        "parameters": [
          {
            "name": "dateTimeStart",
            "required": true,
            "in": "query",
            "example": "2022-01-25T23:00:15.443Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSuspicionDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-inspector"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-replacement/{orderId}": {
      "patch": {
        "operationId": "AppManagerOrderReplacementController_extendTime",
        "summary": "Extend order replacement time",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "order-replacement"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "AppManagerOrderReplacementController_terminate",
        "summary": "Terminate order replacement",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "order-replacement"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-replacement/{orderId}/active": {
      "get": {
        "operationId": "AppManagerOrderReplacementController_getActiveReplacement",
        "summary": "Get active order replacement",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReplacementDto"
                }
              }
            }
          }
        },
        "tags": [
          "order-replacement"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-tags/update": {
      "patch": {
        "operationId": "AppManagerOrderTagsController_changeOrderTags",
        "summary": "Update order tags.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderTagsInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "order-tags"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-order-voucher/by-order/{orderId}": {
      "get": {
        "operationId": "AppManagerOrderVoucherController_getByOrder",
        "summary": "Get active order replacement",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderTransactionVoucherEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-order-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-order-voucher/apply": {
      "patch": {
        "operationId": "AppManagerOrderVoucherController_applyToOrder",
        "summary": "Apply voucher to order.",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyOrderVoucherInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherApplyTryDto"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-order-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-product-request/opened": {
      "get": {
        "operationId": "AppManagerProductRequestController_getOpenedRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductRequestEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-product-request/{requestId}": {
      "get": {
        "operationId": "AppManagerProductRequestController_getRequestById",
        "parameters": [
          {
            "name": "requestId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductRequestEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-product-request/{requestId}/approve": {
      "patch": {
        "operationId": "AppManagerProductRequestController_approveRequest",
        "summary": "Approve product request",
        "parameters": [
          {
            "name": "requestId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequestApproveInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-product-request/{requestId}/reject": {
      "patch": {
        "operationId": "AppManagerProductRequestController_rejectRequest",
        "summary": "Reject product request",
        "parameters": [
          {
            "name": "requestId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequestRejectInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-custom/create-push-notification-custom": {
      "post": {
        "operationId": "AppManagerPushNotificationCustomController_createPushNotificationCustom",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationCustomCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-history": {
      "get": {
        "operationId": "AppManagerPushNotificationHistoryController_getHistories",
        "parameters": [
          {
            "name": "deviceId",
            "required": false,
            "in": "query",
            "example": "jhdi-dssd-fdcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PushNotificationHistoryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-history/notreaded": {
      "get": {
        "operationId": "AppManagerPushNotificationHistoryController_getNotReadedHistories",
        "parameters": [
          {
            "name": "deviceId",
            "required": false,
            "in": "query",
            "example": "jhdi-dssd-fdcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PushNotificationHistoryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-history/mark-read": {
      "patch": {
        "operationId": "AppManagerPushNotificationHistoryController_markHistoriesAsReaded",
        "summary": "Mark certain manager push notifications as readed",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationHistoryMarkInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-history/mark-read-all": {
      "patch": {
        "operationId": "AppManagerPushNotificationHistoryController_markAllHistoriesAsReaded",
        "summary": "Mark all manager push notifications as readed",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-subscription/get-staff-subscriptions": {
      "get": {
        "operationId": "AppManagerPushNotificationSubscriptionController_getStaffSubscriptions",
        "parameters": [
          {
            "name": "userIds",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isActiveOnly",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PushNotificationSubscriptionEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-subscription/get-customer-subscriptions": {
      "get": {
        "operationId": "AppManagerPushNotificationSubscriptionController_getCustomerSubscriptions",
        "parameters": [
          {
            "name": "userIds",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isActiveOnly",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PushNotificationSubscriptionEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-push-notification-subscription/refresh": {
      "post": {
        "operationId": "AppManagerPushNotificationSubscriptionController_refreshSubscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationSubscriptionRefreshInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-reorder/create-cart-from-order": {
      "post": {
        "operationId": "AppManagerReorderController_createCartFromOrder",
        "summary": "Create a cart from the closed order on customer behalf",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartFromOrderForCustomerInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-reorder"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-shopping-list/create-cart-from-list": {
      "post": {
        "operationId": "AppManagerShoppingListController_createCartFromList",
        "summary": "Create a cart from the shopping list on behalf of customer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartFromShoppingListForCustomerInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-shopping-list"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-sms/send-message-customer": {
      "post": {
        "operationId": "AppManagerSmsController_sendMessageFromManagerToCustomer",
        "summary": "Send sms to customer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsMessageInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-sms"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-sms/send-message-staff": {
      "post": {
        "operationId": "AppManagerSmsController_sendMessageFromManagerToStaff",
        "summary": "Send sms to staff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsMessageInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-sms"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-sms/templates": {
      "get": {
        "operationId": "AppManagerSmsController_getSmsTemplates",
        "summary": "Get sms templates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableSmsTemplateDto"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-sms"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-staff/locations/{staffId}": {
      "get": {
        "operationId": "AppManagerStaffController_findStaffLocations",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceLocationDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-staff/locations": {
      "get": {
        "operationId": "AppManagerStaffController_staffsLocations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffLocationLiveMapDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-store/stores/{id}/delivery-slots": {
      "get": {
        "operationId": "AppManagerStoreController_getTimeSlots",
        "summary": "Get timeslots for store",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zipCode",
            "required": true,
            "in": "query",
            "example": "NW1 6XE",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreSchedulerDayDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-store/{id}/slot-reservation": {
      "post": {
        "operationId": "AppManagerStoreController_createReservationForCustomer",
        "summary": "Create customer reservation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReservationInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-task/{id}": {
      "get": {
        "operationId": "AppManagerTaskController_getTask",
        "summary": "Get manager mask",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerTaskEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-task": {
      "get": {
        "operationId": "AppManagerTaskController_getTasks",
        "summary": "Get manager masks",
        "parameters": [
          {
            "name": "isDone",
            "required": false,
            "in": "query",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagerTaskEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "post": {
        "operationId": "AppManagerTaskController_createTask",
        "summary": "Create manager mask",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerTaskCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerTaskEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-task/from-template": {
      "post": {
        "operationId": "AppManagerTaskController_createTaskFromTemplate",
        "summary": "Create manager mask from template",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerTaskFromTemplateCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerTaskEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-task/mark-done": {
      "post": {
        "operationId": "AppManagerTaskController_markTasksAsDone",
        "summary": "Mark manager tasks as done",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerTaskMarkDoneInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-voucher/{id}": {
      "get": {
        "operationId": "AppManagerVoucherController_getVoucherById",
        "summary": "Get voucher",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-manager-voucher/generate/code": {
      "get": {
        "operationId": "AppManagerVoucherController_generateVoucherCode",
        "summary": "Generate voucher code",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherCodeDto"
                }
              }
            }
          }
        },
        "tags": [
          "app-manager-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/admin/info": {
      "get": {
        "operationId": "DashboardController_info",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/dashboard": {
      "get": {
        "operationId": "DashboardController_dashboard",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDto"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/admin/errortest": {
      "get": {
        "operationId": "DashboardController_errorTest",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/order-forecast": {
      "get": {
        "operationId": "DashboardController_orderForecast",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderForecastDto"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/admin/order-by-hours": {
      "get": {
        "operationId": "DashboardController_orderByHours",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersByHoursDto"
                }
              }
            }
          }
        },
        "tags": [
          "admin"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/manager-profile/profile": {
      "get": {
        "operationId": "ManagerProfileController_profileGet",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerProfileDto"
                }
              }
            }
          }
        },
        "tags": [
          "manager-profile"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "ManagerProfileController_profileUpdate",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerProfileUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerProfileDto"
                }
              }
            }
          }
        },
        "tags": [
          "manager-profile"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-cart": {
      "get": {
        "operationId": "CrudCartController_find",
        "summary": "Retrieve multiple items CartEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CartEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CartEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCartController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-cart/{id}": {
      "get": {
        "operationId": "CrudCartController_findOne",
        "summary": "Retrieve one item CartEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CartEntity",
                  "$ref": "#/components/schemas/CartEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCartController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCartController_recover",
        "summary": "Recover item CartEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CartEntity",
                  "$ref": "#/components/schemas/CartEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-cart/cart-details/{id}": {
      "get": {
        "operationId": "CrudCartController_cartDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-cart"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-language": {
      "post": {
        "operationId": "CrudLanguageController_create",
        "summary": "Create one item LanguageEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "LanguageEntity",
                  "$ref": "#/components/schemas/LanguageEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LanguageEntity",
                  "$ref": "#/components/schemas/LanguageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudLanguageController_find",
        "summary": "Retrieve multiple items LanguageEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<LanguageEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LanguageEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudLanguageController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-language/{id}": {
      "get": {
        "operationId": "CrudLanguageController_findOne",
        "summary": "Retrieve one item LanguageEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LanguageEntity",
                  "$ref": "#/components/schemas/LanguageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudLanguageController_update",
        "summary": "Update item LanguageEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LanguageEntity",
                  "$ref": "#/components/schemas/LanguageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudLanguageController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudLanguageController_recover",
        "summary": "Recover item LanguageEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LanguageEntity",
                  "$ref": "#/components/schemas/LanguageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-language/import": {
      "post": {
        "operationId": "CrudLanguageController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-language/export": {
      "get": {
        "operationId": "CrudLanguageController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/primary-language-controller/change-primary-language": {
      "post": {
        "operationId": "PrimaryLanguageController_changePrimaryLanguage",
        "summary": "Replace item",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePrimaryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "primary-language"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-category-sort/{storeId}": {
      "get": {
        "operationId": "ProductCategorySortController_getStoreCategories",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreCategorySortDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "product-category-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-category-sort/change-global-order": {
      "post": {
        "operationId": "ProductCategorySortController_changeOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "product-category-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-category-sort/{storeId}/change-store-order": {
      "post": {
        "operationId": "ProductCategorySortController_changeStoreOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "product-category-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-price-view": {
      "get": {
        "operationId": "ProductPriceViewController_find",
        "summary": "Retrieve multiple items ProductPriceViewEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductPriceViewEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductPriceViewEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "product-price-view"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-subcategory-sort/{storeId}/{categoryCode}": {
      "get": {
        "operationId": "ProductSubcategorySortController_getStoreSubcategories",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreSubcategorySortDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "product-subcategory-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-subcategory-sort/change-global-order": {
      "post": {
        "operationId": "ProductSubcategorySortController_changeOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "product-subcategory-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-subcategory-sort/{storeId}/change-store-order": {
      "post": {
        "operationId": "ProductSubcategorySortController_changeStoreOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "product-subcategory-sort"
        ],
        "security": [
          {
            "access-token": []
          },
          {
            "access-token": []
          }
        ]
      }
    },
    "/store-loyalty-program/find-unused-loyalty-programs/{storeId}": {
      "get": {
        "operationId": "StoreLoyaltyProgramController_findUnusedLoyaltyPrograms",
        "parameters": [
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<LoyaltyProgramEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LoyaltyProgramEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/crud-corporate": {
      "post": {
        "operationId": "CrudCorporateController_create",
        "summary": "Create one item CorporateEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorporateCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CorporateEntity",
                  "$ref": "#/components/schemas/CorporateEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorporateEntity",
                  "$ref": "#/components/schemas/CorporateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCorporateController_find",
        "summary": "Retrieve multiple items CorporateEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CorporateEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CorporateEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCorporateController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-corporate/{id}": {
      "get": {
        "operationId": "CrudCorporateController_findOne",
        "summary": "Retrieve one item CorporateEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorporateEntity",
                  "$ref": "#/components/schemas/CorporateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCorporateController_update",
        "summary": "Update item CorporateEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorporateUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorporateEntity",
                  "$ref": "#/components/schemas/CorporateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCorporateController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCorporateController_recover",
        "summary": "Recover item CorporateEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorporateEntity",
                  "$ref": "#/components/schemas/CorporateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-corporate/import": {
      "post": {
        "operationId": "CrudCorporateController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-corporate/export": {
      "get": {
        "operationId": "CrudCorporateController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-corporate"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-out-of-stock": {
      "post": {
        "operationId": "CrudOutOfStockController_create",
        "summary": "Create one item OutOfStockEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutOfStockCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "OutOfStockEntity",
                  "$ref": "#/components/schemas/OutOfStockEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OutOfStockEntity",
                  "$ref": "#/components/schemas/OutOfStockEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudOutOfStockController_find",
        "summary": "Retrieve multiple items OutOfStockEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<OutOfStockEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OutOfStockEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOutOfStockController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-out-of-stock/{id}": {
      "get": {
        "operationId": "CrudOutOfStockController_findOne",
        "summary": "Retrieve one item OutOfStockEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OutOfStockEntity",
                  "$ref": "#/components/schemas/OutOfStockEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudOutOfStockController_update",
        "summary": "Update item OutOfStockEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutOfStockUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OutOfStockEntity",
                  "$ref": "#/components/schemas/OutOfStockEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOutOfStockController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudOutOfStockController_recover",
        "summary": "Recover item OutOfStockEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OutOfStockEntity",
                  "$ref": "#/components/schemas/OutOfStockEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-out-of-stock/import": {
      "post": {
        "operationId": "CrudOutOfStockController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-out-of-stock/export": {
      "get": {
        "operationId": "CrudOutOfStockController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-out-of-stock"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-brand": {
      "post": {
        "operationId": "CrudProductBrandController_create",
        "summary": "Create one item ProductBrandEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBrandCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductBrandEntity",
                  "$ref": "#/components/schemas/ProductBrandEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductBrandEntity",
                  "$ref": "#/components/schemas/ProductBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductBrandController_find",
        "summary": "Retrieve multiple items ProductBrandEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductBrandEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductBrandEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductBrandController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-brand/{id}": {
      "get": {
        "operationId": "CrudProductBrandController_findOne",
        "summary": "Retrieve one item ProductBrandEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductBrandEntity",
                  "$ref": "#/components/schemas/ProductBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductBrandController_update",
        "summary": "Update item ProductBrandEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductBrandUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductBrandEntity",
                  "$ref": "#/components/schemas/ProductBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductBrandController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductBrandController_recover",
        "summary": "Recover item ProductBrandEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductBrandEntity",
                  "$ref": "#/components/schemas/ProductBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-brand/import": {
      "post": {
        "operationId": "CrudProductBrandController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-brand/export": {
      "get": {
        "operationId": "CrudProductBrandController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-category": {
      "post": {
        "operationId": "CrudProductCategoryController_create",
        "summary": "Create one item ProductCategoryEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductCategoryEntity",
                  "$ref": "#/components/schemas/ProductCategoryEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductCategoryEntity",
                  "$ref": "#/components/schemas/ProductCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductCategoryController_find",
        "summary": "Retrieve multiple items ProductCategoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductCategoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductCategoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductCategoryController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-category/{id}": {
      "get": {
        "operationId": "CrudProductCategoryController_findOne",
        "summary": "Retrieve one item ProductCategoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductCategoryEntity",
                  "$ref": "#/components/schemas/ProductCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductCategoryController_update",
        "summary": "Update item ProductCategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductCategoryEntity",
                  "$ref": "#/components/schemas/ProductCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductCategoryController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductCategoryController_recover",
        "summary": "Recover item ProductCategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductCategoryEntity",
                  "$ref": "#/components/schemas/ProductCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-category/import": {
      "post": {
        "operationId": "CrudProductCategoryController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-category/export": {
      "get": {
        "operationId": "CrudProductCategoryController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-category/change-order": {
      "post": {
        "operationId": "CrudProductCategoryController_changeOrder",
        "summary": "",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-link": {
      "post": {
        "operationId": "CrudProductLinkController_create",
        "summary": "Create one item ProductLinkEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLinkCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductLinkEntity",
                  "$ref": "#/components/schemas/ProductLinkEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLinkEntity",
                  "$ref": "#/components/schemas/ProductLinkEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductLinkController_find",
        "summary": "Retrieve multiple items ProductLinkEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductLinkEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductLinkEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductLinkController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-link/{id}": {
      "get": {
        "operationId": "CrudProductLinkController_findOne",
        "summary": "Retrieve one item ProductLinkEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLinkEntity",
                  "$ref": "#/components/schemas/ProductLinkEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductLinkController_update",
        "summary": "Update item ProductLinkEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLinkUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLinkEntity",
                  "$ref": "#/components/schemas/ProductLinkEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductLinkController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductLinkController_recover",
        "summary": "Recover item ProductLinkEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLinkEntity",
                  "$ref": "#/components/schemas/ProductLinkEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-link/multiple": {
      "post": {
        "operationId": "CrudProductLinkController_createMultiple",
        "summary": "Create multiple links",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLinkMultipleCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductLinkEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-link/import": {
      "post": {
        "operationId": "CrudProductLinkController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-link/export": {
      "get": {
        "operationId": "CrudProductLinkController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-link"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price-request": {
      "get": {
        "operationId": "CrudProductPriceRequestController_find",
        "summary": "Retrieve multiple items ProductPriceRequestEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductPriceRequestEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductPriceRequestEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price-request/{id}": {
      "get": {
        "operationId": "CrudProductPriceRequestController_findOne",
        "summary": "Retrieve one item ProductPriceRequestEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductPriceRequestEntity",
                  "$ref": "#/components/schemas/ProductPriceRequestEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price": {
      "post": {
        "operationId": "CrudProductPriceController_create",
        "summary": "Create one item ProductPriceEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPriceCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductPriceEntity",
                  "$ref": "#/components/schemas/ProductPriceEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductPriceEntity",
                  "$ref": "#/components/schemas/ProductPriceEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductPriceController_find",
        "summary": "Retrieve multiple items ProductPriceEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductPriceEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductPriceEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductPriceController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price/{id}": {
      "get": {
        "operationId": "CrudProductPriceController_findOne",
        "summary": "Retrieve one item ProductPriceEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductPriceEntity",
                  "$ref": "#/components/schemas/ProductPriceEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductPriceController_update",
        "summary": "Update item ProductPriceEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPriceUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductPriceEntity",
                  "$ref": "#/components/schemas/ProductPriceEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductPriceController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductPriceController_recover",
        "summary": "Recover item ProductPriceEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductPriceEntity",
                  "$ref": "#/components/schemas/ProductPriceEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price/import": {
      "post": {
        "operationId": "CrudProductPriceController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-price/export": {
      "get": {
        "operationId": "CrudProductPriceController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-price"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-request": {
      "post": {
        "operationId": "CrudProductRequestController_create",
        "summary": "Create one item ProductRequestEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequestInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductRequestEntity",
                  "$ref": "#/components/schemas/ProductRequestEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRequestEntity",
                  "$ref": "#/components/schemas/ProductRequestEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRequestController_find",
        "summary": "Retrieve multiple items ProductRequestEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRequestEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRequestEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRequestController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-request/{id}": {
      "get": {
        "operationId": "CrudProductRequestController_findOne",
        "summary": "Retrieve one item ProductRequestEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRequestEntity",
                  "$ref": "#/components/schemas/ProductRequestEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRequestController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductRequestController_recover",
        "summary": "Recover item ProductRequestEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRequestEntity",
                  "$ref": "#/components/schemas/ProductRequestEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-request/import": {
      "post": {
        "operationId": "CrudProductRequestController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-request/export": {
      "get": {
        "operationId": "CrudProductRequestController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-request"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-subcategory": {
      "post": {
        "operationId": "CrudProductSubcategoryController_create",
        "summary": "Create one item ProductSubcategoryEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSubcategoryCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductSubcategoryEntity",
                  "$ref": "#/components/schemas/ProductSubcategoryEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductSubcategoryEntity",
                  "$ref": "#/components/schemas/ProductSubcategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductSubcategoryController_find",
        "summary": "Retrieve multiple items ProductSubcategoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductSubcategoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductSubcategoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductSubcategoryController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-subcategory/{id}": {
      "get": {
        "operationId": "CrudProductSubcategoryController_findOne",
        "summary": "Retrieve one item ProductSubcategoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductSubcategoryEntity",
                  "$ref": "#/components/schemas/ProductSubcategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductSubcategoryController_update",
        "summary": "Update item ProductSubcategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSubcategoryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductSubcategoryEntity",
                  "$ref": "#/components/schemas/ProductSubcategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductSubcategoryController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductSubcategoryController_recover",
        "summary": "Recover item ProductSubcategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductSubcategoryEntity",
                  "$ref": "#/components/schemas/ProductSubcategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-subcategory/import": {
      "post": {
        "operationId": "CrudProductSubcategoryController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-subcategory/export": {
      "get": {
        "operationId": "CrudProductSubcategoryController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-subcategory/change-order": {
      "post": {
        "operationId": "CrudProductSubcategoryController_changeOrder",
        "summary": "",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-subcategory"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-unit": {
      "post": {
        "operationId": "CrudProductUnitController_create",
        "summary": "Create one item ProductUnitEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUnitCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductUnitEntity",
                  "$ref": "#/components/schemas/ProductUnitEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductUnitEntity",
                  "$ref": "#/components/schemas/ProductUnitEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductUnitController_find",
        "summary": "Retrieve multiple items ProductUnitEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductUnitEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductUnitEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductUnitController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-unit/{id}": {
      "get": {
        "operationId": "CrudProductUnitController_findOne",
        "summary": "Retrieve one item ProductUnitEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductUnitEntity",
                  "$ref": "#/components/schemas/ProductUnitEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductUnitController_update",
        "summary": "Update item ProductUnitEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUnitUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductUnitEntity",
                  "$ref": "#/components/schemas/ProductUnitEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductUnitController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductUnitController_recover",
        "summary": "Recover item ProductUnitEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductUnitEntity",
                  "$ref": "#/components/schemas/ProductUnitEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-unit/import": {
      "post": {
        "operationId": "CrudProductUnitController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-unit/export": {
      "get": {
        "operationId": "CrudProductUnitController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-unit"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product": {
      "post": {
        "operationId": "CrudProductController_create",
        "summary": "Create one item ProductEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductEntity",
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductEntity",
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductController_find",
        "summary": "Retrieve multiple items ProductEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductController_updateMany",
        "summary": "Update multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for update",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdateManyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product/find-unlinked/{storeId}": {
      "get": {
        "operationId": "CrudProductController_findUnlinkedProducts",
        "parameters": [
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productSubcategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productBrandCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productTags",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product/{id}": {
      "get": {
        "operationId": "CrudProductController_findOne",
        "summary": "Retrieve one item ProductEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductEntity",
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductController_update",
        "summary": "Update item ProductEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductEntity",
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductController_recover",
        "summary": "Recover item ProductEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductEntity",
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product/import": {
      "post": {
        "operationId": "CrudProductController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product/export": {
      "get": {
        "operationId": "CrudProductController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-address": {
      "post": {
        "operationId": "CrudStoreAddressController_create",
        "summary": "Create one item StoreAddressEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAddressCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreAddressEntity",
                  "$ref": "#/components/schemas/StoreAddressEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreAddressEntity",
                  "$ref": "#/components/schemas/StoreAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreAddressController_find",
        "summary": "Retrieve multiple items StoreAddressEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreAddressEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreAddressEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreAddressController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-address/{id}": {
      "get": {
        "operationId": "CrudStoreAddressController_findOne",
        "summary": "Retrieve one item StoreAddressEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreAddressEntity",
                  "$ref": "#/components/schemas/StoreAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreAddressController_update",
        "summary": "Update item StoreAddressEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAddressUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreAddressEntity",
                  "$ref": "#/components/schemas/StoreAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreAddressController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreAddressController_recover",
        "summary": "Recover item StoreAddressEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreAddressEntity",
                  "$ref": "#/components/schemas/StoreAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-address/import": {
      "post": {
        "operationId": "CrudStoreAddressController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-address/export": {
      "get": {
        "operationId": "CrudStoreAddressController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-brand": {
      "post": {
        "operationId": "CrudStoreBrandController_create",
        "summary": "Create one item StoreBrandEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreBrandCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreBrandEntity",
                  "$ref": "#/components/schemas/StoreBrandEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreBrandEntity",
                  "$ref": "#/components/schemas/StoreBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreBrandController_find",
        "summary": "Retrieve multiple items StoreBrandEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreBrandEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreBrandEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreBrandController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-brand/{id}": {
      "get": {
        "operationId": "CrudStoreBrandController_findOne",
        "summary": "Retrieve one item StoreBrandEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreBrandEntity",
                  "$ref": "#/components/schemas/StoreBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreBrandController_update",
        "summary": "Update item StoreBrandEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreBrandUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreBrandEntity",
                  "$ref": "#/components/schemas/StoreBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreBrandController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreBrandController_recover",
        "summary": "Recover item StoreBrandEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreBrandEntity",
                  "$ref": "#/components/schemas/StoreBrandEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-brand/import": {
      "post": {
        "operationId": "CrudStoreBrandController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-brand/export": {
      "get": {
        "operationId": "CrudStoreBrandController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-brand"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-categories-and-groups-template": {
      "post": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_create",
        "summary": "Create one item CategoriesAndGroupsTemplateEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoriesAndGroupsTemplateCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CategoriesAndGroupsTemplateEntity",
                  "$ref": "#/components/schemas/CategoriesAndGroupsTemplateEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CategoriesAndGroupsTemplateEntity",
                  "$ref": "#/components/schemas/CategoriesAndGroupsTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_find",
        "summary": "Retrieve multiple items CategoriesAndGroupsTemplateEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CategoriesAndGroupsTemplateEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CategoriesAndGroupsTemplateEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-categories-and-groups-template/{id}": {
      "get": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_findOne",
        "summary": "Retrieve one item CategoriesAndGroupsTemplateEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CategoriesAndGroupsTemplateEntity",
                  "$ref": "#/components/schemas/CategoriesAndGroupsTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreCategoriesAndGroupsTemplatesController_recover",
        "summary": "Recover item CategoriesAndGroupsTemplateEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CategoriesAndGroupsTemplateEntity",
                  "$ref": "#/components/schemas/CategoriesAndGroupsTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-categories-and-groups-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-consultant": {
      "post": {
        "operationId": "CrudStoreConsultantController_create",
        "summary": "Create one item StoreConsultantEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreConsultantCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreConsultantEntity",
                  "$ref": "#/components/schemas/StoreConsultantEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreConsultantEntity",
                  "$ref": "#/components/schemas/StoreConsultantEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreConsultantController_find",
        "summary": "Retrieve multiple items StoreConsultantEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreConsultantEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreConsultantEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreConsultantController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-consultant/{id}": {
      "get": {
        "operationId": "CrudStoreConsultantController_findOne",
        "summary": "Retrieve one item StoreConsultantEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreConsultantEntity",
                  "$ref": "#/components/schemas/StoreConsultantEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreConsultantController_update",
        "summary": "Update item StoreConsultantEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreConsultantUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreConsultantEntity",
                  "$ref": "#/components/schemas/StoreConsultantEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreConsultantController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreConsultantController_recover",
        "summary": "Recover item StoreConsultantEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreConsultantEntity",
                  "$ref": "#/components/schemas/StoreConsultantEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-consultant/import": {
      "post": {
        "operationId": "CrudStoreConsultantController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-consultant/export": {
      "get": {
        "operationId": "CrudStoreConsultantController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-consultant"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-contact": {
      "post": {
        "operationId": "CrudStoreContactController_create",
        "summary": "Create one item StoreContactEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreContactCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreContactEntity",
                  "$ref": "#/components/schemas/StoreContactEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreContactEntity",
                  "$ref": "#/components/schemas/StoreContactEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreContactController_find",
        "summary": "Retrieve multiple items StoreContactEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreContactEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreContactEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreContactController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-contact/{id}": {
      "get": {
        "operationId": "CrudStoreContactController_findOne",
        "summary": "Retrieve one item StoreContactEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreContactEntity",
                  "$ref": "#/components/schemas/StoreContactEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreContactController_update",
        "summary": "Update item StoreContactEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreContactUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreContactEntity",
                  "$ref": "#/components/schemas/StoreContactEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreContactController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreContactController_recover",
        "summary": "Recover item StoreContactEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreContactEntity",
                  "$ref": "#/components/schemas/StoreContactEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-contact/import": {
      "post": {
        "operationId": "CrudStoreContactController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-contact/export": {
      "get": {
        "operationId": "CrudStoreContactController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-contact"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-loyalty-program": {
      "post": {
        "operationId": "CrudStoreLoyaltyProgramController_create",
        "summary": "Create one item StoreLoyaltyProgramEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreLoyaltyProgramCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreLoyaltyProgramController_find",
        "summary": "Retrieve multiple items StoreLoyaltyProgramEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreLoyaltyProgramEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreLoyaltyProgramController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-loyalty-program/many/for-store": {
      "post": {
        "operationId": "CrudStoreLoyaltyProgramController_createManyForStore",
        "summary": "Create many loyalty programs for store",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreLoyaltyProgramManyCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-loyalty-program/{id}": {
      "get": {
        "operationId": "CrudStoreLoyaltyProgramController_findOne",
        "summary": "Retrieve one item StoreLoyaltyProgramEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreLoyaltyProgramController_update",
        "summary": "Update item StoreLoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreLoyaltyProgramUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreLoyaltyProgramController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreLoyaltyProgramController_recover",
        "summary": "Recover item StoreLoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/StoreLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-loyalty-program/import": {
      "post": {
        "operationId": "CrudStoreLoyaltyProgramController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-loyalty-program/export": {
      "get": {
        "operationId": "CrudStoreLoyaltyProgramController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-region": {
      "post": {
        "operationId": "CrudStoreRegionController_create",
        "summary": "Create one item StoreRegionEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreRegionCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreRegionEntity",
                  "$ref": "#/components/schemas/StoreRegionEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreRegionEntity",
                  "$ref": "#/components/schemas/StoreRegionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreRegionController_find",
        "summary": "Retrieve multiple items StoreRegionEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreRegionEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreRegionEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreRegionController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-region/{id}": {
      "get": {
        "operationId": "CrudStoreRegionController_findOne",
        "summary": "Retrieve one item StoreRegionEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreRegionEntity",
                  "$ref": "#/components/schemas/StoreRegionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreRegionController_update",
        "summary": "Update item StoreRegionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreRegionUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreRegionEntity",
                  "$ref": "#/components/schemas/StoreRegionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreRegionController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreRegionController_recover",
        "summary": "Recover item StoreRegionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreRegionEntity",
                  "$ref": "#/components/schemas/StoreRegionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-region/import": {
      "post": {
        "operationId": "CrudStoreRegionController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-region/export": {
      "get": {
        "operationId": "CrudStoreRegionController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-region"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound": {
      "post": {
        "operationId": "CrudStoreStaffBoundController_create",
        "summary": "Create one item StoreStaffBoundEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreStaffBoundCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreStaffBoundEntity",
                  "$ref": "#/components/schemas/StoreStaffBoundEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreStaffBoundEntity",
                  "$ref": "#/components/schemas/StoreStaffBoundEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreStaffBoundController_find",
        "summary": "Retrieve multiple items StoreStaffBoundEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreStaffBoundEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreStaffBoundEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreStaffBoundController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound/{id}": {
      "get": {
        "operationId": "CrudStoreStaffBoundController_findOne",
        "summary": "Retrieve one item StoreStaffBoundEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreStaffBoundEntity",
                  "$ref": "#/components/schemas/StoreStaffBoundEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreStaffBoundController_update",
        "summary": "Update item StoreStaffBoundEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreStaffBoundUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreStaffBoundEntity",
                  "$ref": "#/components/schemas/StoreStaffBoundEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreStaffBoundController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreStaffBoundController_recover",
        "summary": "Recover item StoreStaffBoundEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreStaffBoundEntity",
                  "$ref": "#/components/schemas/StoreStaffBoundEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound/many/for-staff": {
      "post": {
        "operationId": "CrudStoreStaffBoundController_createManyForStaff",
        "summary": "Create many bounds for staff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffStoreManyCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreStaffBoundEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound/many/for-store": {
      "post": {
        "operationId": "CrudStoreStaffBoundController_createManyForStore",
        "summary": "Create many bounds for store",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreStaffManyCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreStaffBoundEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound/import": {
      "post": {
        "operationId": "CrudStoreStaffBoundController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-staff-bound/export": {
      "get": {
        "operationId": "CrudStoreStaffBoundController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-staff-bound"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-weight-option": {
      "post": {
        "operationId": "CrudStoreWeightOptionController_create",
        "summary": "Create one item StoreWeightOptionEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreWeightOptionCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreWeightOptionEntity",
                  "$ref": "#/components/schemas/StoreWeightOptionEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreWeightOptionEntity",
                  "$ref": "#/components/schemas/StoreWeightOptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreWeightOptionController_find",
        "summary": "Retrieve multiple items StoreWeightOptionEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreWeightOptionEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreWeightOptionEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreWeightOptionController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-weight-option/{id}": {
      "get": {
        "operationId": "CrudStoreWeightOptionController_findOne",
        "summary": "Retrieve one item StoreWeightOptionEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreWeightOptionEntity",
                  "$ref": "#/components/schemas/StoreWeightOptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreWeightOptionController_update",
        "summary": "Update item StoreWeightOptionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreWeightOptionUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreWeightOptionEntity",
                  "$ref": "#/components/schemas/StoreWeightOptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreWeightOptionController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreWeightOptionController_recover",
        "summary": "Recover item StoreWeightOptionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreWeightOptionEntity",
                  "$ref": "#/components/schemas/StoreWeightOptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-weight-option/import": {
      "post": {
        "operationId": "CrudStoreWeightOptionController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-weight-option/export": {
      "get": {
        "operationId": "CrudStoreWeightOptionController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-weight-option"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store": {
      "post": {
        "operationId": "CrudStoreController_create",
        "summary": "Create one item StoreEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreEntity",
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreEntity",
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreController_find",
        "summary": "Retrieve multiple items StoreEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/{id}": {
      "get": {
        "operationId": "CrudStoreController_findOne",
        "summary": "Retrieve one item StoreEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreEntity",
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreController_update",
        "summary": "Update item StoreEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreEntity",
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreController_recover",
        "summary": "Recover item StoreEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreEntity",
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/{id}/categories": {
      "patch": {
        "operationId": "CrudStoreController_categories",
        "summary": "Set store categories and subcategories",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCategoriesInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/{id}/zip-codes": {
      "get": {
        "operationId": "CrudStoreController_getZoneZipCodes",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/import": {
      "post": {
        "operationId": "CrudStoreController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/export": {
      "get": {
        "operationId": "CrudStoreController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/export-subcategories": {
      "get": {
        "operationId": "CrudStoreController_exportSubcategories",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/import-subcategories": {
      "post": {
        "operationId": "CrudStoreController_importSubcategories",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store/find-unbound-stores/{staffId}": {
      "get": {
        "operationId": "CrudStoreController_findUnboundStores",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-category": {
      "post": {
        "operationId": "CrudVendorCategoryController_create",
        "summary": "Create one item VendorCategoryEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorCategoryCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "VendorCategoryEntity",
                  "$ref": "#/components/schemas/VendorCategoryEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorCategoryEntity",
                  "$ref": "#/components/schemas/VendorCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudVendorCategoryController_find",
        "summary": "Retrieve multiple items VendorCategoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<VendorCategoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VendorCategoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVendorCategoryController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-category/{id}": {
      "get": {
        "operationId": "CrudVendorCategoryController_findOne",
        "summary": "Retrieve one item VendorCategoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorCategoryEntity",
                  "$ref": "#/components/schemas/VendorCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudVendorCategoryController_update",
        "summary": "Update item VendorCategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorCategoryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorCategoryEntity",
                  "$ref": "#/components/schemas/VendorCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVendorCategoryController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudVendorCategoryController_recover",
        "summary": "Recover item VendorCategoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorCategoryEntity",
                  "$ref": "#/components/schemas/VendorCategoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-category/import": {
      "post": {
        "operationId": "CrudVendorCategoryController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-category/export": {
      "get": {
        "operationId": "CrudVendorCategoryController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-vendor-category"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-type": {
      "post": {
        "operationId": "CrudVendorTypeController_create",
        "summary": "Create one item VendorTypeEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorTypeCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "VendorTypeEntity",
                  "$ref": "#/components/schemas/VendorTypeEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorTypeEntity",
                  "$ref": "#/components/schemas/VendorTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudVendorTypeController_find",
        "summary": "Retrieve multiple items VendorTypeEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<VendorTypeEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VendorTypeEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVendorTypeController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-type/{id}": {
      "get": {
        "operationId": "CrudVendorTypeController_findOne",
        "summary": "Retrieve one item VendorTypeEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorTypeEntity",
                  "$ref": "#/components/schemas/VendorTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudVendorTypeController_update",
        "summary": "Update item VendorTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorTypeUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorTypeEntity",
                  "$ref": "#/components/schemas/VendorTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVendorTypeController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudVendorTypeController_recover",
        "summary": "Recover item VendorTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VendorTypeEntity",
                  "$ref": "#/components/schemas/VendorTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-type/import": {
      "post": {
        "operationId": "CrudVendorTypeController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vendor-type/export": {
      "get": {
        "operationId": "CrudVendorTypeController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-vendor-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-currency": {
      "post": {
        "operationId": "CrudCurrencyController_create",
        "summary": "Create one item CurrencyEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CurrencyEntity",
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CurrencyEntity",
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCurrencyController_find",
        "summary": "Retrieve multiple items CurrencyEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CurrencyEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CurrencyEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCurrencyController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-currency/{id}": {
      "get": {
        "operationId": "CrudCurrencyController_findOne",
        "summary": "Retrieve one item CurrencyEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CurrencyEntity",
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCurrencyController_update",
        "summary": "Update item CurrencyEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CurrencyEntity",
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCurrencyController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCurrencyController_recover",
        "summary": "Recover item CurrencyEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CurrencyEntity",
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-currency/import": {
      "post": {
        "operationId": "CrudCurrencyController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-currency/export": {
      "get": {
        "operationId": "CrudCurrencyController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-currency"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-deposit-type": {
      "post": {
        "operationId": "CrudDepositTypeController_create",
        "summary": "Create one item DepositTypeEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositTypeCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "DepositTypeEntity",
                  "$ref": "#/components/schemas/DepositTypeEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DepositTypeEntity",
                  "$ref": "#/components/schemas/DepositTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudDepositTypeController_find",
        "summary": "Retrieve multiple items DepositTypeEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<DepositTypeEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DepositTypeEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudDepositTypeController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-deposit-type/{id}": {
      "get": {
        "operationId": "CrudDepositTypeController_findOne",
        "summary": "Retrieve one item DepositTypeEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DepositTypeEntity",
                  "$ref": "#/components/schemas/DepositTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudDepositTypeController_update",
        "summary": "Update item DepositTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositTypeUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DepositTypeEntity",
                  "$ref": "#/components/schemas/DepositTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudDepositTypeController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudDepositTypeController_recover",
        "summary": "Recover item DepositTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DepositTypeEntity",
                  "$ref": "#/components/schemas/DepositTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-deposit-type/import": {
      "post": {
        "operationId": "CrudDepositTypeController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-deposit-type/export": {
      "get": {
        "operationId": "CrudDepositTypeController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-deposit-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-job-cancel-reason": {
      "post": {
        "operationId": "CrudJobCancelReasonController_create",
        "summary": "Create one item JobCancelReasonEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCancelReasonCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "JobCancelReasonEntity",
                  "$ref": "#/components/schemas/JobCancelReasonEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobCancelReasonEntity",
                  "$ref": "#/components/schemas/JobCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudJobCancelReasonController_find",
        "summary": "Retrieve multiple items JobCancelReasonEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<JobCancelReasonEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/JobCancelReasonEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudJobCancelReasonController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-job-cancel-reason/{id}": {
      "get": {
        "operationId": "CrudJobCancelReasonController_findOne",
        "summary": "Retrieve one item JobCancelReasonEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobCancelReasonEntity",
                  "$ref": "#/components/schemas/JobCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudJobCancelReasonController_update",
        "summary": "Update item JobCancelReasonEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCancelReasonUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobCancelReasonEntity",
                  "$ref": "#/components/schemas/JobCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudJobCancelReasonController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudJobCancelReasonController_recover",
        "summary": "Recover item JobCancelReasonEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobCancelReasonEntity",
                  "$ref": "#/components/schemas/JobCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-job-cancel-reason/import": {
      "post": {
        "operationId": "CrudJobCancelReasonController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-job-cancel-reason/export": {
      "get": {
        "operationId": "CrudJobCancelReasonController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-job-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-manager-message": {
      "post": {
        "operationId": "CrudManagerMessageController_create",
        "summary": "Create one item OrderManagerMessageEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderManagerMessageCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "OrderManagerMessageEntity",
                  "$ref": "#/components/schemas/OrderManagerMessageEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderManagerMessageEntity",
                  "$ref": "#/components/schemas/OrderManagerMessageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudManagerMessageController_find",
        "summary": "Retrieve multiple items OrderManagerMessageEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<OrderManagerMessageEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrderManagerMessageEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudManagerMessageController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-manager-message/{id}": {
      "get": {
        "operationId": "CrudManagerMessageController_findOne",
        "summary": "Retrieve one item OrderManagerMessageEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderManagerMessageEntity",
                  "$ref": "#/components/schemas/OrderManagerMessageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudManagerMessageController_update",
        "summary": "Update item OrderManagerMessageEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderManagerMessageUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderManagerMessageEntity",
                  "$ref": "#/components/schemas/OrderManagerMessageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudManagerMessageController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudManagerMessageController_recover",
        "summary": "Recover item OrderManagerMessageEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderManagerMessageEntity",
                  "$ref": "#/components/schemas/OrderManagerMessageEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-manager-message"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-cancel-reason": {
      "post": {
        "operationId": "CrudOrderCancelReasonController_create",
        "summary": "Create one item OrderCancelReasonEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCancelReasonCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "OrderCancelReasonEntity",
                  "$ref": "#/components/schemas/OrderCancelReasonEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderCancelReasonEntity",
                  "$ref": "#/components/schemas/OrderCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudOrderCancelReasonController_find",
        "summary": "Retrieve multiple items OrderCancelReasonEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<OrderCancelReasonEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrderCancelReasonEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOrderCancelReasonController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-cancel-reason/{id}": {
      "get": {
        "operationId": "CrudOrderCancelReasonController_findOne",
        "summary": "Retrieve one item OrderCancelReasonEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderCancelReasonEntity",
                  "$ref": "#/components/schemas/OrderCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudOrderCancelReasonController_update",
        "summary": "Update item OrderCancelReasonEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCancelReasonUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderCancelReasonEntity",
                  "$ref": "#/components/schemas/OrderCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOrderCancelReasonController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudOrderCancelReasonController_recover",
        "summary": "Recover item OrderCancelReasonEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderCancelReasonEntity",
                  "$ref": "#/components/schemas/OrderCancelReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-cancel-reason/import": {
      "post": {
        "operationId": "CrudOrderCancelReasonController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-cancel-reason/export": {
      "get": {
        "operationId": "CrudOrderCancelReasonController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-order-cancel-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-transaction-voucher": {
      "get": {
        "operationId": "CrudOrderTransactionVoucherController_find",
        "summary": "Retrieve multiple items OrderTransactionVoucherEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<OrderTransactionVoucherEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrderTransactionVoucherEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-transaction-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order-transaction-voucher/{id}": {
      "get": {
        "operationId": "CrudOrderTransactionVoucherController_findOne",
        "summary": "Retrieve one item OrderTransactionVoucherEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderTransactionVoucherEntity",
                  "$ref": "#/components/schemas/OrderTransactionVoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order-transaction-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order": {
      "get": {
        "operationId": "CrudOrderController_find",
        "summary": "Retrieve multiple items OrderEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<OrderEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrderEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "post": {
        "operationId": "CrudOrderController_create",
        "summary": "Create one item OrderEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "OrderEntity",
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderEntity",
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOrderController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/total-income-by-staff/{staffId}": {
      "get": {
        "operationId": "CrudOrderController_findTotalIncomeByStaff",
        "parameters": [
          {
            "name": "staffId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/total-income-by-customer/{customerId}": {
      "get": {
        "operationId": "CrudOrderController_findTotalIncomeByCustomer",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/{id}": {
      "get": {
        "operationId": "CrudOrderController_findOne",
        "summary": "Retrieve one item OrderEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderEntity",
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudOrderController_update",
        "summary": "Update item OrderEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderEntity",
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudOrderController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudOrderController_recover",
        "summary": "Recover item OrderEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OrderEntity",
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/{id}/details": {
      "get": {
        "operationId": "CrudOrderController_details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/orders/{id}/cancel": {
      "patch": {
        "operationId": "CrudOrderController_deleteOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelByManagerInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/set-staff": {
      "patch": {
        "operationId": "CrudOrderController_setStaff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetStaffInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-order/remove-staff-from-ignore-list": {
      "patch": {
        "operationId": "CrudOrderController_removeStaffFromIgnoreList",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveStaffFromIgnoreListInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-order"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-replace-type": {
      "post": {
        "operationId": "CrudReplaceTypeController_create",
        "summary": "Create one item ReplaceTypeEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTypeCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ReplaceTypeEntity",
                  "$ref": "#/components/schemas/ReplaceTypeEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReplaceTypeEntity",
                  "$ref": "#/components/schemas/ReplaceTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudReplaceTypeController_find",
        "summary": "Retrieve multiple items ReplaceTypeEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ReplaceTypeEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReplaceTypeEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudReplaceTypeController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-replace-type/{id}": {
      "get": {
        "operationId": "CrudReplaceTypeController_findOne",
        "summary": "Retrieve one item ReplaceTypeEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReplaceTypeEntity",
                  "$ref": "#/components/schemas/ReplaceTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudReplaceTypeController_update",
        "summary": "Update item ReplaceTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTypeUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReplaceTypeEntity",
                  "$ref": "#/components/schemas/ReplaceTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudReplaceTypeController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudReplaceTypeController_recover",
        "summary": "Recover item ReplaceTypeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReplaceTypeEntity",
                  "$ref": "#/components/schemas/ReplaceTypeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-replace-type/import": {
      "post": {
        "operationId": "CrudReplaceTypeController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-replace-type/export": {
      "get": {
        "operationId": "CrudReplaceTypeController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-replace-type"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vat": {
      "post": {
        "operationId": "CrudVatController_create",
        "summary": "Create one item VatEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VatCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "VatEntity",
                  "$ref": "#/components/schemas/VatEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VatEntity",
                  "$ref": "#/components/schemas/VatEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudVatController_find",
        "summary": "Retrieve multiple items VatEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<VatEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VatEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVatController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vat/{id}": {
      "get": {
        "operationId": "CrudVatController_findOne",
        "summary": "Retrieve one item VatEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VatEntity",
                  "$ref": "#/components/schemas/VatEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudVatController_update",
        "summary": "Update item VatEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VatUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VatEntity",
                  "$ref": "#/components/schemas/VatEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVatController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudVatController_recover",
        "summary": "Recover item VatEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VatEntity",
                  "$ref": "#/components/schemas/VatEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vat/import": {
      "post": {
        "operationId": "CrudVatController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-vat/export": {
      "get": {
        "operationId": "CrudVatController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-vat"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-fix/orders": {
      "patch": {
        "operationId": "OrderFixController_orders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "order-fix"
        ]
      }
    },
    "/order-update/{id}/deliveryComment": {
      "patch": {
        "operationId": "OrderUpdateController_deliveryCommentUpdate",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryCommentUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/messageForShopper": {
      "patch": {
        "operationId": "OrderUpdateController_messageForShopperUpdate",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryCommentUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/deliveryAddress": {
      "patch": {
        "operationId": "OrderUpdateController_deliveryAddressChange",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddressChangeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/billingAddress": {
      "patch": {
        "operationId": "OrderUpdateController_billingAddressChange",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddressChangeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/refund": {
      "post": {
        "operationId": "OrderUpdateController_refundItems",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRefundItemsInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/update-receipts": {
      "post": {
        "operationId": "OrderUpdateController_updateReceipts",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderReceiptImageInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-update/{id}/update-vat-receipts": {
      "post": {
        "operationId": "OrderUpdateController_updateVATReceipts",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderReceiptImageInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "order-update"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-address": {
      "post": {
        "operationId": "CrudCustomerAddressController_create",
        "summary": "Create one item CustomerAddressEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddressCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CustomerAddressEntity",
                  "$ref": "#/components/schemas/CustomerAddressEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerAddressEntity",
                  "$ref": "#/components/schemas/CustomerAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCustomerAddressController_find",
        "summary": "Retrieve multiple items CustomerAddressEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CustomerAddressEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerAddressEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerAddressController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-address/{id}": {
      "get": {
        "operationId": "CrudCustomerAddressController_findOne",
        "summary": "Retrieve one item CustomerAddressEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerAddressEntity",
                  "$ref": "#/components/schemas/CustomerAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCustomerAddressController_update",
        "summary": "Update item CustomerAddressEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddressUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerAddressEntity",
                  "$ref": "#/components/schemas/CustomerAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerAddressController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCustomerAddressController_recover",
        "summary": "Recover item CustomerAddressEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerAddressEntity",
                  "$ref": "#/components/schemas/CustomerAddressEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-address"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-session-history": {
      "get": {
        "operationId": "CrudCustomerSessionHistoryController_find",
        "summary": "Retrieve multiple items CustomerSessionHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CustomerSessionHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerSessionHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-session-history/{id}": {
      "get": {
        "operationId": "CrudCustomerSessionHistoryController_findOne",
        "summary": "Retrieve one item CustomerSessionHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerSessionHistoryEntity",
                  "$ref": "#/components/schemas/CustomerSessionHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer": {
      "post": {
        "operationId": "CrudCustomerController_create",
        "summary": "Create one item CustomerEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CustomerEntity",
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerEntity",
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCustomerController_find",
        "summary": "Retrieve multiple items CustomerEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CustomerEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer/{id}": {
      "get": {
        "operationId": "CrudCustomerController_findOne",
        "summary": "Retrieve one item CustomerEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerEntity",
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCustomerController_update",
        "summary": "Update item CustomerEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerEntity",
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCustomerController_recover",
        "summary": "Recover item CustomerEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerEntity",
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer/import": {
      "post": {
        "operationId": "CrudCustomerController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer/export": {
      "get": {
        "operationId": "CrudCustomerController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer/tags": {
      "get": {
        "operationId": "CrudCustomerController_tags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerTagDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-ban": {
      "get": {
        "operationId": "CustomerBanController_find",
        "summary": "Retrieve multiple items CustomerBanEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CustomerBanEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerBanEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "post": {
        "operationId": "CustomerBanController_create",
        "summary": "Create one item CustomerBanEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBanCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CustomerBanEntity",
                  "$ref": "#/components/schemas/CustomerBanEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerBanEntity",
                  "$ref": "#/components/schemas/CustomerBanEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CustomerBanController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-ban/{id}": {
      "get": {
        "operationId": "CustomerBanController_findOne",
        "summary": "Retrieve one item CustomerBanEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerBanEntity",
                  "$ref": "#/components/schemas/CustomerBanEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CustomerBanController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-ban/for-customer/{customerId}": {
      "get": {
        "operationId": "CustomerBanController_getCustomerBanRecords",
        "summary": "Get Ban/Unban Records for customer",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerBanEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-ban/is-banned/{customerId}": {
      "get": {
        "operationId": "CustomerBanController_isCustomerBanned",
        "summary": "Is customer banned",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerBannedDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-ban"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-history": {
      "get": {
        "operationId": "CrudPushNotificationHistoryController_find",
        "summary": "Retrieve multiple items PushNotificationHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PushNotificationHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PushNotificationHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-history/{id}": {
      "get": {
        "operationId": "CrudPushNotificationHistoryController_findOne",
        "summary": "Retrieve one item PushNotificationHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationHistoryEntity",
                  "$ref": "#/components/schemas/PushNotificationHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-subscription": {
      "get": {
        "operationId": "CrudPushNotificationSubscriptionController_find",
        "summary": "Retrieve multiple items PushNotificationSubscriptionEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PushNotificationSubscriptionEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PushNotificationSubscriptionEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationSubscriptionController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-subscription/{id}": {
      "get": {
        "operationId": "CrudPushNotificationSubscriptionController_findOne",
        "summary": "Retrieve one item PushNotificationSubscriptionEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationSubscriptionEntity",
                  "$ref": "#/components/schemas/PushNotificationSubscriptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationSubscriptionController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudPushNotificationSubscriptionController_recover",
        "summary": "Recover item PushNotificationSubscriptionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationSubscriptionEntity",
                  "$ref": "#/components/schemas/PushNotificationSubscriptionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-subscription"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-template": {
      "post": {
        "operationId": "CrudPushNotificationTemplateController_create",
        "summary": "Create one item PushNotificationTemplateEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationTemplateCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "PushNotificationTemplateEntity",
                  "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationTemplateEntity",
                  "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudPushNotificationTemplateController_find",
        "summary": "Retrieve multiple items PushNotificationTemplateEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PushNotificationTemplateEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationTemplateController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-template/{id}": {
      "get": {
        "operationId": "CrudPushNotificationTemplateController_findOne",
        "summary": "Retrieve one item PushNotificationTemplateEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationTemplateEntity",
                  "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudPushNotificationTemplateController_update",
        "summary": "Update item PushNotificationTemplateEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationTemplateUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationTemplateEntity",
                  "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationTemplateController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudPushNotificationTemplateController_recover",
        "summary": "Recover item PushNotificationTemplateEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationTemplateEntity",
                  "$ref": "#/components/schemas/PushNotificationTemplateEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-template/import": {
      "post": {
        "operationId": "CrudPushNotificationTemplateController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-template/export": {
      "get": {
        "operationId": "CrudPushNotificationTemplateController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-push-notification-template"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification": {
      "get": {
        "operationId": "CrudPushNotificationController_find",
        "summary": "Retrieve multiple items PushNotificationEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PushNotificationEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PushNotificationEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification/{id}": {
      "get": {
        "operationId": "CrudPushNotificationController_findOne",
        "summary": "Retrieve one item PushNotificationEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationEntity",
                  "$ref": "#/components/schemas/PushNotificationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudPushNotificationController_recover",
        "summary": "Recover item PushNotificationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationEntity",
                  "$ref": "#/components/schemas/PushNotificationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification/import": {
      "post": {
        "operationId": "CrudPushNotificationController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification/export": {
      "get": {
        "operationId": "CrudPushNotificationController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-push-notification"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-legal": {
      "post": {
        "operationId": "CrudProductLegalController_create",
        "summary": "Create one item ProductLegalEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLegalCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductLegalEntity",
                  "$ref": "#/components/schemas/ProductLegalEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLegalEntity",
                  "$ref": "#/components/schemas/ProductLegalEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductLegalController_find",
        "summary": "Retrieve multiple items ProductLegalEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductLegalEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductLegalEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductLegalController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-legal/{id}": {
      "get": {
        "operationId": "CrudProductLegalController_findOne",
        "summary": "Retrieve one item ProductLegalEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLegalEntity",
                  "$ref": "#/components/schemas/ProductLegalEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductLegalController_update",
        "summary": "Update item ProductLegalEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLegalUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLegalEntity",
                  "$ref": "#/components/schemas/ProductLegalEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductLegalController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductLegalController_recover",
        "summary": "Recover item ProductLegalEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductLegalEntity",
                  "$ref": "#/components/schemas/ProductLegalEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-legal/import": {
      "post": {
        "operationId": "CrudProductLegalController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-legal/export": {
      "get": {
        "operationId": "CrudProductLegalController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-product-legal"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-country-allowed": {
      "post": {
        "operationId": "CrudSettingsCountryAllowedController_create",
        "summary": "Create one item SettingsCountryAllowedEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsCountryAllowedCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "SettingsCountryAllowedEntity",
                  "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsCountryAllowedEntity",
                  "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudSettingsCountryAllowedController_find",
        "summary": "Retrieve multiple items SettingsCountryAllowedEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<SettingsCountryAllowedEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudSettingsCountryAllowedController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-country-allowed/{id}": {
      "get": {
        "operationId": "CrudSettingsCountryAllowedController_findOne",
        "summary": "Retrieve one item SettingsCountryAllowedEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsCountryAllowedEntity",
                  "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudSettingsCountryAllowedController_update",
        "summary": "Update item SettingsCountryAllowedEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsCountryAllowedUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsCountryAllowedEntity",
                  "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudSettingsCountryAllowedController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudSettingsCountryAllowedController_recover",
        "summary": "Recover item SettingsCountryAllowedEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsCountryAllowedEntity",
                  "$ref": "#/components/schemas/SettingsCountryAllowedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-country-allowed/import": {
      "post": {
        "operationId": "CrudSettingsCountryAllowedController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-country-allowed/export": {
      "get": {
        "operationId": "CrudSettingsCountryAllowedController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-settings-country-allowed"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-email-blocked": {
      "post": {
        "operationId": "CrudSettingsEmailBlockedController_create",
        "summary": "Create one item SettingsEmailBlockedEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsEmailBlockedCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "SettingsEmailBlockedEntity",
                  "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsEmailBlockedEntity",
                  "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudSettingsEmailBlockedController_find",
        "summary": "Retrieve multiple items SettingsEmailBlockedEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<SettingsEmailBlockedEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudSettingsEmailBlockedController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-email-blocked/{id}": {
      "get": {
        "operationId": "CrudSettingsEmailBlockedController_findOne",
        "summary": "Retrieve one item SettingsEmailBlockedEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsEmailBlockedEntity",
                  "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudSettingsEmailBlockedController_update",
        "summary": "Update item SettingsEmailBlockedEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsEmailBlockedUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsEmailBlockedEntity",
                  "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudSettingsEmailBlockedController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudSettingsEmailBlockedController_recover",
        "summary": "Recover item SettingsEmailBlockedEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SettingsEmailBlockedEntity",
                  "$ref": "#/components/schemas/SettingsEmailBlockedEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-email-blocked/import": {
      "post": {
        "operationId": "CrudSettingsEmailBlockedController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-settings-email-blocked/export": {
      "get": {
        "operationId": "CrudSettingsEmailBlockedController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-settings-email-blocked"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-sms-history": {
      "get": {
        "operationId": "CrudSmsHistoryController_find",
        "summary": "Retrieve multiple items SmsHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<SmsHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SmsHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-sms-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-sms-history/{id}": {
      "get": {
        "operationId": "CrudSmsHistoryController_findOne",
        "summary": "Retrieve one item SmsHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SmsHistoryEntity",
                  "$ref": "#/components/schemas/SmsHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-sms-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-session-history": {
      "get": {
        "operationId": "CrudManagerSessionHistoryController_find",
        "summary": "Retrieve multiple items ManagerSessionHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ManagerSessionHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ManagerSessionHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-session-history/{id}": {
      "get": {
        "operationId": "CrudManagerSessionHistoryController_findOne",
        "summary": "Retrieve one item ManagerSessionHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerSessionHistoryEntity",
                  "$ref": "#/components/schemas/ManagerSessionHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager": {
      "post": {
        "operationId": "CrudManagerController_create",
        "summary": "Create one item ManagerEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ManagerEntity",
                  "$ref": "#/components/schemas/ManagerEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerEntity",
                  "$ref": "#/components/schemas/ManagerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudManagerController_find",
        "summary": "Retrieve multiple items ManagerEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ManagerEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ManagerEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudManagerController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager/{id}": {
      "get": {
        "operationId": "CrudManagerController_findOne",
        "summary": "Retrieve one item ManagerEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerEntity",
                  "$ref": "#/components/schemas/ManagerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudManagerController_update",
        "summary": "Update item ManagerEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerEntity",
                  "$ref": "#/components/schemas/ManagerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudManagerController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudManagerController_recover",
        "summary": "Recover item ManagerEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerEntity",
                  "$ref": "#/components/schemas/ManagerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager/import": {
      "post": {
        "operationId": "CrudManagerController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager/export": {
      "get": {
        "operationId": "CrudManagerController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff-session-history": {
      "get": {
        "operationId": "CrudStaffSessionHistoryController_find",
        "summary": "Retrieve multiple items StaffSessionHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StaffSessionHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StaffSessionHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff-session-history/{id}": {
      "get": {
        "operationId": "CrudStaffSessionHistoryController_findOne",
        "summary": "Retrieve one item StaffSessionHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StaffSessionHistoryEntity",
                  "$ref": "#/components/schemas/StaffSessionHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff-session-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff": {
      "post": {
        "operationId": "CrudStaffController_create",
        "summary": "Create one item StaffEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StaffEntity",
                  "$ref": "#/components/schemas/StaffEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StaffEntity",
                  "$ref": "#/components/schemas/StaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStaffController_find",
        "summary": "Retrieve multiple items StaffEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StaffEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StaffEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStaffController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff/{id}": {
      "get": {
        "operationId": "CrudStaffController_findOne",
        "summary": "Retrieve one item StaffEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StaffEntity",
                  "$ref": "#/components/schemas/StaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStaffController_update",
        "summary": "Update item StaffEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StaffEntity",
                  "$ref": "#/components/schemas/StaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStaffController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStaffController_recover",
        "summary": "Recover item StaffEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StaffEntity",
                  "$ref": "#/components/schemas/StaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff/import": {
      "post": {
        "operationId": "CrudStaffController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-staff/export": {
      "get": {
        "operationId": "CrudStaffController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/staff-bound/find-unbound-staff/{storeId}": {
      "get": {
        "operationId": "StaffBoundController_findUnboundStaff",
        "parameters": [
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StaffEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StaffEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/store-scheduler": {
      "get": {
        "operationId": "StoreSchedulerController_getTimeSlots",
        "summary": "Get timeslots for one week",
        "parameters": [
          {
            "name": "storeId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreSchedulerDto"
                }
              }
            }
          }
        },
        "tags": [
          "store-scheduler"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/store-scheduler/{storeId}/{timeStart}": {
      "get": {
        "operationId": "StoreSchedulerController_getTimeSlotDetails",
        "summary": "Get timeslot details",
        "parameters": [
          {
            "name": "storeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeStart",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSlotDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "store-scheduler"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/store-scheduler/reservation/{id}": {
      "delete": {
        "operationId": "StoreSchedulerController_deleteReservation",
        "summary": "Delete reservation by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "store-scheduler"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-slot": {
      "post": {
        "operationId": "CrudDeliverySlotController_create",
        "summary": "Create one item StoreDeliverySlotEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDeliverySlotCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreDeliverySlotEntity",
                  "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliverySlotEntity",
                  "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudDeliverySlotController_find",
        "summary": "Retrieve multiple items StoreDeliverySlotEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreDeliverySlotEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudDeliverySlotController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-slot/custom": {
      "post": {
        "operationId": "CrudDeliverySlotController_updateCustomSlot",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCustomDeliverySlotInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-slot/{id}": {
      "get": {
        "operationId": "CrudDeliverySlotController_findOne",
        "summary": "Retrieve one item StoreDeliverySlotEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliverySlotEntity",
                  "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudDeliverySlotController_update",
        "summary": "Update item StoreDeliverySlotEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDeliverySlotUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliverySlotEntity",
                  "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudDeliverySlotController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudDeliverySlotController_recover",
        "summary": "Recover item StoreDeliverySlotEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliverySlotEntity",
                  "$ref": "#/components/schemas/StoreDeliverySlotEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-slot/import": {
      "post": {
        "operationId": "CrudDeliverySlotController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-slot/export": {
      "get": {
        "operationId": "CrudDeliverySlotController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-delivery-slot"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-closing-day": {
      "post": {
        "operationId": "CrudStoreClosingDayController_create",
        "summary": "Create one item StoreClosingDayEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreClosingDayCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreClosingDayEntity",
                  "$ref": "#/components/schemas/StoreClosingDayEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreClosingDayEntity",
                  "$ref": "#/components/schemas/StoreClosingDayEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreClosingDayController_find",
        "summary": "Retrieve multiple items StoreClosingDayEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreClosingDayEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreClosingDayEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreClosingDayController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-closing-day/{id}": {
      "get": {
        "operationId": "CrudStoreClosingDayController_findOne",
        "summary": "Retrieve one item StoreClosingDayEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreClosingDayEntity",
                  "$ref": "#/components/schemas/StoreClosingDayEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreClosingDayController_update",
        "summary": "Update item StoreClosingDayEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreClosingDayUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreClosingDayEntity",
                  "$ref": "#/components/schemas/StoreClosingDayEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreClosingDayController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreClosingDayController_recover",
        "summary": "Recover item StoreClosingDayEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreClosingDayEntity",
                  "$ref": "#/components/schemas/StoreClosingDayEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-closing-day/import": {
      "post": {
        "operationId": "CrudStoreClosingDayController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-closing-day/export": {
      "get": {
        "operationId": "CrudStoreClosingDayController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-closing-day"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-zone": {
      "post": {
        "operationId": "CrudStoreDeliveryZoneController_create",
        "summary": "Create one item StoreDeliveryZoneEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDeliveryZoneCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreDeliveryZoneEntity",
                  "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliveryZoneEntity",
                  "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreDeliveryZoneController_find",
        "summary": "Retrieve multiple items StoreDeliveryZoneEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreDeliveryZoneEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreDeliveryZoneController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-zone/{id}": {
      "get": {
        "operationId": "CrudStoreDeliveryZoneController_findOne",
        "summary": "Retrieve one item StoreDeliveryZoneEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliveryZoneEntity",
                  "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreDeliveryZoneController_update",
        "summary": "Update item StoreDeliveryZoneEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDeliveryZoneUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliveryZoneEntity",
                  "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreDeliveryZoneController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreDeliveryZoneController_recover",
        "summary": "Recover item StoreDeliveryZoneEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreDeliveryZoneEntity",
                  "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-zone/import": {
      "post": {
        "operationId": "CrudStoreDeliveryZoneController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-delivery-zone/export": {
      "get": {
        "operationId": "CrudStoreDeliveryZoneController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-delivery-zone"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-instant-delivery-fee": {
      "post": {
        "operationId": "CrudStoreInstantDeliveryFeeController_create",
        "summary": "Create one item StoreInstantDeliveryFeeEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInstantDeliveryFeeCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreInstantDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreInstantDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreInstantDeliveryFeeController_find",
        "summary": "Retrieve multiple items StoreInstantDeliveryFeeEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreInstantDeliveryFeeEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreInstantDeliveryFeeController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-instant-delivery-fee/{id}": {
      "get": {
        "operationId": "CrudStoreInstantDeliveryFeeController_findOne",
        "summary": "Retrieve one item StoreInstantDeliveryFeeEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreInstantDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreInstantDeliveryFeeController_update",
        "summary": "Update item StoreInstantDeliveryFeeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInstantDeliveryFeeUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreInstantDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreInstantDeliveryFeeController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreInstantDeliveryFeeController_recover",
        "summary": "Recover item StoreInstantDeliveryFeeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreInstantDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreInstantDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-instant-delivery-fee/import": {
      "post": {
        "operationId": "CrudStoreInstantDeliveryFeeController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-instant-delivery-fee/export": {
      "get": {
        "operationId": "CrudStoreInstantDeliveryFeeController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-instant-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-opening-hour": {
      "post": {
        "operationId": "CrudStoreOpeningHourController_create",
        "summary": "Create one item StoreOpeningHourEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreOpeningHourCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreOpeningHourEntity",
                  "$ref": "#/components/schemas/StoreOpeningHourEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreOpeningHourEntity",
                  "$ref": "#/components/schemas/StoreOpeningHourEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreOpeningHourController_find",
        "summary": "Retrieve multiple items StoreOpeningHourEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreOpeningHourEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreOpeningHourEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreOpeningHourController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-opening-hour/{id}": {
      "get": {
        "operationId": "CrudStoreOpeningHourController_findOne",
        "summary": "Retrieve one item StoreOpeningHourEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreOpeningHourEntity",
                  "$ref": "#/components/schemas/StoreOpeningHourEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreOpeningHourController_update",
        "summary": "Update item StoreOpeningHourEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreOpeningHourUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreOpeningHourEntity",
                  "$ref": "#/components/schemas/StoreOpeningHourEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreOpeningHourController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreOpeningHourController_recover",
        "summary": "Recover item StoreOpeningHourEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreOpeningHourEntity",
                  "$ref": "#/components/schemas/StoreOpeningHourEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-opening-hour/import": {
      "post": {
        "operationId": "CrudStoreOpeningHourController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-opening-hour/export": {
      "get": {
        "operationId": "CrudStoreOpeningHourController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-opening-hour"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-scheduled-delivery-fee": {
      "post": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_create",
        "summary": "Create one item StoreScheduledDeliveryFeeEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreScheduledDeliveryFeeCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "StoreScheduledDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreScheduledDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_find",
        "summary": "Retrieve multiple items StoreScheduledDeliveryFeeEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<StoreScheduledDeliveryFeeEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-scheduled-delivery-fee/{id}": {
      "get": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_findOne",
        "summary": "Retrieve one item StoreScheduledDeliveryFeeEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreScheduledDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_update",
        "summary": "Update item StoreScheduledDeliveryFeeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreScheduledDeliveryFeeUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreScheduledDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_recover",
        "summary": "Recover item StoreScheduledDeliveryFeeEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "StoreScheduledDeliveryFeeEntity",
                  "$ref": "#/components/schemas/StoreScheduledDeliveryFeeEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-scheduled-delivery-fee/import": {
      "post": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-store-scheduled-delivery-fee/export": {
      "get": {
        "operationId": "CrudStoreScheduledDeliveryFeeController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-store-scheduled-delivery-fee"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-country": {
      "post": {
        "operationId": "CrudCountryController_create",
        "summary": "Create one item CountryEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CountryEntity",
                  "$ref": "#/components/schemas/CountryEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CountryEntity",
                  "$ref": "#/components/schemas/CountryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCountryController_find",
        "summary": "Retrieve multiple items CountryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CountryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CountryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCountryController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-country/{id}": {
      "get": {
        "operationId": "CrudCountryController_findOne",
        "summary": "Retrieve one item CountryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CountryEntity",
                  "$ref": "#/components/schemas/CountryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCountryController_update",
        "summary": "Update item CountryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CountryEntity",
                  "$ref": "#/components/schemas/CountryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCountryController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCountryController_recover",
        "summary": "Recover item CountryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CountryEntity",
                  "$ref": "#/components/schemas/CountryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-country/import": {
      "post": {
        "operationId": "CrudCountryController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-country/export": {
      "get": {
        "operationId": "CrudCountryController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-country"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-nationality": {
      "post": {
        "operationId": "CrudNationalityController_create",
        "summary": "Create one item NationalityEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NationalityCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "NationalityEntity",
                  "$ref": "#/components/schemas/NationalityEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "NationalityEntity",
                  "$ref": "#/components/schemas/NationalityEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudNationalityController_find",
        "summary": "Retrieve multiple items NationalityEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<NationalityEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/NationalityEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudNationalityController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-nationality/{id}": {
      "get": {
        "operationId": "CrudNationalityController_findOne",
        "summary": "Retrieve one item NationalityEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "NationalityEntity",
                  "$ref": "#/components/schemas/NationalityEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudNationalityController_update",
        "summary": "Update item NationalityEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NationalityUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "NationalityEntity",
                  "$ref": "#/components/schemas/NationalityEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudNationalityController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudNationalityController_recover",
        "summary": "Recover item NationalityEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "NationalityEntity",
                  "$ref": "#/components/schemas/NationalityEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-nationality/import": {
      "post": {
        "operationId": "CrudNationalityController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-nationality/export": {
      "get": {
        "operationId": "CrudNationalityController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-nationality"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/zip-info/search-by-location": {
      "get": {
        "operationId": "ZipInfoController_searchByLocation",
        "parameters": [
          {
            "name": "lat",
            "required": true,
            "in": "query",
            "example": 53.54971200706458,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lng",
            "required": true,
            "in": "query",
            "example": 9.968216616141591,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZipInfoEntity"
                }
              }
            }
          }
        },
        "tags": [
          "zip-info"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/zip-info/search-by-zip-codes": {
      "get": {
        "operationId": "ZipInfoController_searchByZipCodes",
        "parameters": [
          {
            "name": "zip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZipInfoEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "zip-info"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-loyalty-program": {
      "post": {
        "operationId": "CrudLoyaltyProgramController_create",
        "summary": "Create one item LoyaltyProgramEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyProgramCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "LoyaltyProgramEntity",
                  "$ref": "#/components/schemas/LoyaltyProgramEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LoyaltyProgramEntity",
                  "$ref": "#/components/schemas/LoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudLoyaltyProgramController_find",
        "summary": "Retrieve multiple items LoyaltyProgramEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<LoyaltyProgramEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LoyaltyProgramEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudLoyaltyProgramController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-loyalty-program/{id}": {
      "get": {
        "operationId": "CrudLoyaltyProgramController_findOne",
        "summary": "Retrieve one item LoyaltyProgramEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LoyaltyProgramEntity",
                  "$ref": "#/components/schemas/LoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudLoyaltyProgramController_update",
        "summary": "Update item LoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyProgramUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LoyaltyProgramEntity",
                  "$ref": "#/components/schemas/LoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudLoyaltyProgramController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudLoyaltyProgramController_recover",
        "summary": "Recover item LoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "LoyaltyProgramEntity",
                  "$ref": "#/components/schemas/LoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-loyalty-program/import": {
      "post": {
        "operationId": "CrudLoyaltyProgramController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-loyalty-program/export": {
      "get": {
        "operationId": "CrudLoyaltyProgramController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-shopping-list-product": {
      "get": {
        "operationId": "CrudShoppingListProductController_find",
        "summary": "Retrieve multiple items ShoppingListProductEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ShoppingListProductEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ShoppingListProductEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudShoppingListProductController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-shopping-list-product/{id}": {
      "get": {
        "operationId": "CrudShoppingListProductController_findOne",
        "summary": "Retrieve one item ShoppingListProductEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ShoppingListProductEntity",
                  "$ref": "#/components/schemas/ShoppingListProductEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list-product"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-shopping-list": {
      "get": {
        "operationId": "CrudShoppingListController_find",
        "summary": "Retrieve multiple items ShoppingListEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ShoppingListEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ShoppingListEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudShoppingListController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-shopping-list/{id}": {
      "get": {
        "operationId": "CrudShoppingListController_findOne",
        "summary": "Retrieve one item ShoppingListEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ShoppingListEntity",
                  "$ref": "#/components/schemas/ShoppingListEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudShoppingListController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-shopping-list"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-voucher": {
      "post": {
        "operationId": "CrudVoucherController_create",
        "summary": "Create one item VoucherEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "VoucherEntity",
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VoucherEntity",
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudVoucherController_find",
        "summary": "Retrieve multiple items VoucherEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<VoucherEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VoucherEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVoucherController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-voucher/{id}": {
      "patch": {
        "operationId": "CrudVoucherController_update",
        "summary": "Update item VoucherEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VoucherEntity",
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudVoucherController_findOne",
        "summary": "Retrieve one item VoucherEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VoucherEntity",
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudVoucherController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudVoucherController_recover",
        "summary": "Recover item VoucherEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VoucherEntity",
                  "$ref": "#/components/schemas/VoucherEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-voucher"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-commission-fee-store": {
      "post": {
        "operationId": "CrudCommissionFeeStoreController_create",
        "summary": "Create one item CommissionFeeStoreEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionFeeStoreCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CommissionFeeStoreEntity",
                  "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CommissionFeeStoreEntity",
                  "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCommissionFeeStoreController_find",
        "summary": "Retrieve multiple items CommissionFeeStoreEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CommissionFeeStoreEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCommissionFeeStoreController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-commission-fee-store/multiple": {
      "post": {
        "operationId": "CrudCommissionFeeStoreController_createMultiple",
        "summary": "Create multiple fees",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionFeeStoreProductMultipleCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-commission-fee-store/{id}": {
      "get": {
        "operationId": "CrudCommissionFeeStoreController_findOne",
        "summary": "Retrieve one item CommissionFeeStoreEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CommissionFeeStoreEntity",
                  "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCommissionFeeStoreController_update",
        "summary": "Update item CommissionFeeStoreEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommissionFeeStoreUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CommissionFeeStoreEntity",
                  "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCommissionFeeStoreController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCommissionFeeStoreController_recover",
        "summary": "Recover item CommissionFeeStoreEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CommissionFeeStoreEntity",
                  "$ref": "#/components/schemas/CommissionFeeStoreEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-commission-fee-store/import": {
      "post": {
        "operationId": "CrudCommissionFeeStoreController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-commission-fee-store/export": {
      "get": {
        "operationId": "CrudCommissionFeeStoreController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-commission-fee-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-task": {
      "get": {
        "operationId": "CrudManagerTaskController_find",
        "summary": "Retrieve multiple items ManagerTaskEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ManagerTaskEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ManagerTaskEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-task/{id}": {
      "get": {
        "operationId": "CrudManagerTaskController_findOne",
        "summary": "Retrieve one item ManagerTaskEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerTaskEntity",
                  "$ref": "#/components/schemas/ManagerTaskEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-task"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/send-verification-email": {
      "post": {
        "operationId": "AuthManagerController_sendVerificationEmail",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/sign-in": {
      "post": {
        "operationId": "AuthManagerController_signIn",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerSignInInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ]
      }
    },
    "/auth-manager/sign-out": {
      "post": {
        "operationId": "AuthManagerController_signOut",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/sign-out-all": {
      "post": {
        "operationId": "AuthManagerController_signOutAll",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/verify-email": {
      "post": {
        "operationId": "AuthManagerController_verifyEmail",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerifyInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/refresh": {
      "post": {
        "operationId": "AuthManagerController_refresh",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDto"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ]
      }
    },
    "/auth-manager/reset-password": {
      "post": {
        "operationId": "AuthManagerController_resetPassword",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/set-password": {
      "post": {
        "operationId": "AuthManagerController_setPassword",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/change-password": {
      "post": {
        "operationId": "AuthManagerController_changePassword",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/auth-manager/session-log-out": {
      "post": {
        "operationId": "AuthManagerController_sessionLogOut",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionOutInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "auth-manager"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-role": {
      "post": {
        "operationId": "CrudManagerRolesController_create",
        "summary": "Create one item ManagerRoleEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerRoleCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ManagerRoleEntity",
                  "$ref": "#/components/schemas/ManagerRoleEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerRoleEntity",
                  "$ref": "#/components/schemas/ManagerRoleEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-role"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudManagerRolesController_find",
        "summary": "Retrieve multiple items ManagerRoleEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ManagerRoleEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ManagerRoleEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-role"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-role/{id}": {
      "get": {
        "operationId": "CrudManagerRolesController_findOne",
        "summary": "Retrieve one item ManagerRoleEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerRoleEntity",
                  "$ref": "#/components/schemas/ManagerRoleEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-role"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudManagerRolesController_update",
        "summary": "Update item ManagerRoleEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagerRoleUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerRoleEntity",
                  "$ref": "#/components/schemas/ManagerRoleEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-role"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudManagerRolesController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-role"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/manager-acl/{role}": {
      "get": {
        "operationId": "ManagerAclController_getAclTree",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AclDto"
                }
              }
            }
          }
        },
        "tags": [
          "manager-acl"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "post": {
        "operationId": "ManagerAclController_saveAclTree",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AclInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "manager-acl"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-session": {
      "get": {
        "operationId": "ManagerSessionController_find",
        "summary": "Retrieve multiple items ManagerSessionEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ManagerSessionEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ManagerSessionEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-session"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-manager-session/{id}": {
      "get": {
        "operationId": "ManagerSessionController_findOne",
        "summary": "Retrieve one item ManagerSessionEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ManagerSessionEntity",
                  "$ref": "#/components/schemas/ManagerSessionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-manager-session"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-custom": {
      "post": {
        "operationId": "CrudPushNotificationCustomController_create",
        "summary": "Create one item PushNotificationCustomEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrudPushNotificationCustomCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "PushNotificationCustomEntity",
                  "$ref": "#/components/schemas/PushNotificationCustomEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationCustomEntity",
                  "$ref": "#/components/schemas/PushNotificationCustomEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudPushNotificationCustomController_find",
        "summary": "Retrieve multiple items PushNotificationCustomEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PushNotificationCustomEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PushNotificationCustomEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationCustomController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-custom/{id}": {
      "get": {
        "operationId": "CrudPushNotificationCustomController_findOne",
        "summary": "Retrieve one item PushNotificationCustomEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationCustomEntity",
                  "$ref": "#/components/schemas/PushNotificationCustomEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudPushNotificationCustomController_update",
        "summary": "Update item PushNotificationCustomEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrudPushNotificationCustomUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationCustomEntity",
                  "$ref": "#/components/schemas/PushNotificationCustomEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPushNotificationCustomController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudPushNotificationCustomController_recover",
        "summary": "Recover item PushNotificationCustomEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PushNotificationCustomEntity",
                  "$ref": "#/components/schemas/PushNotificationCustomEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-custom/import": {
      "post": {
        "operationId": "CrudPushNotificationCustomController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-push-notification-custom/export": {
      "get": {
        "operationId": "CrudPushNotificationCustomController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-push-notification-custom"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-rating-app-history": {
      "post": {
        "operationId": "CrudRatingAppHistoryController_create",
        "summary": "Create one item RatingAppHistoryEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingAppHistoryCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "RatingAppHistoryEntity",
                  "$ref": "#/components/schemas/RatingAppHistoryEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RatingAppHistoryEntity",
                  "$ref": "#/components/schemas/RatingAppHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudRatingAppHistoryController_find",
        "summary": "Retrieve multiple items RatingAppHistoryEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<RatingAppHistoryEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RatingAppHistoryEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudRatingAppHistoryController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-rating-app-history/{id}": {
      "get": {
        "operationId": "CrudRatingAppHistoryController_findOne",
        "summary": "Retrieve one item RatingAppHistoryEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RatingAppHistoryEntity",
                  "$ref": "#/components/schemas/RatingAppHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudRatingAppHistoryController_update",
        "summary": "Update item RatingAppHistoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingAppHistoryUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RatingAppHistoryEntity",
                  "$ref": "#/components/schemas/RatingAppHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudRatingAppHistoryController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudRatingAppHistoryController_recover",
        "summary": "Recover item RatingAppHistoryEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RatingAppHistoryEntity",
                  "$ref": "#/components/schemas/RatingAppHistoryEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-rating-app-history/import": {
      "post": {
        "operationId": "CrudRatingAppHistoryController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-rating-app-history/export": {
      "get": {
        "operationId": "CrudRatingAppHistoryController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-rating-app-history"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/order-history/{id}/history": {
      "get": {
        "operationId": "OrderHistoryController_history",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryDto"
                }
              }
            }
          }
        },
        "tags": [
          "order-history"
        ]
      }
    },
    "/analytics-customers/customers-over-time": {
      "get": {
        "operationId": "AnalyticsCustomersController_customersOverTime",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CustomerRoleEnum"
            }
          },
          {
            "name": "groupBy",
            "required": true,
            "in": "query",
            "example": "DAY",
            "schema": {
              "$ref": "#/components/schemas/GroupByDateEnum"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Customer tags",
            "example": [
              "Hamburg"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarChartValueDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/loyal-customers": {
      "get": {
        "operationId": "AnalyticsCustomersController_loyalCustomers",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "orderedField",
            "required": true,
            "in": "query",
            "example": "customerNumber",
            "schema": {
              "$ref": "#/components/schemas/LoyalCustomerOrderedFieldsEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableLoyalCustomerDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/one-time-customers": {
      "get": {
        "operationId": "AnalyticsCustomersController_oneTimeCustomers",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "example": "Matthew",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalRevenue",
            "required": false,
            "in": "query",
            "example": ">= 0.15",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemsPurchased",
            "required": false,
            "in": "query",
            "example": "!= 0.15",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "orderedField",
            "required": true,
            "in": "query",
            "example": "customerName",
            "schema": {
              "$ref": "#/components/schemas/OneTimeCustomerOrderedFieldsEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableOneTimeCustomersDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/customer-revenue-breakdown/{id}": {
      "get": {
        "operationId": "AnalyticsCustomersController_customerRevenueBreakdown",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revenueType",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CustomerRevenueTypesEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarChartValueDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/customer-category-breakdown/{id}": {
      "get": {
        "operationId": "AnalyticsCustomersController_customerCategoryBreakdown",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StackedBarChartValueDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/customer-orders-heatmap/{id}": {
      "get": {
        "operationId": "AnalyticsCustomersController_customerOrdersHeatMap",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrdersHeatMapDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-customers/customers-orders-count": {
      "get": {
        "operationId": "AnalyticsCustomersController_customersOrderCount",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CustomerRoleEnum"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Customer tags",
            "example": [
              "Hamburg"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomersOrderCountDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-customers"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-email-report/store-out-of-stock": {
      "post": {
        "operationId": "AnalyticsEmailReportController_storeOutOfStock",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutOfStockReportInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-email-report"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-order-per-store": {
      "get": {
        "operationId": "AnalyticsOrderPerStoreController_anonymousOrderPerStore",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableOrderPerStoreAnonymousDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-order-per-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-order-per-store/export": {
      "get": {
        "operationId": "AnalyticsOrderPerStoreController_anonymousOrderPerStoreExport",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fileExt",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransferFileTypeEnum"
            }
          },
          {
            "name": "identifiers",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "analytics-order-per-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-product-search/term": {
      "get": {
        "operationId": "AnalyticsProductSearchController_getProductSearchTerm",
        "summary": "Get product search term",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "required": false,
            "in": "query",
            "example": "DE",
            "schema": {
              "$ref": "#/components/schemas/Iso2Enum"
            }
          },
          {
            "name": "term",
            "required": false,
            "in": "query",
            "description": "Term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchTermsDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-product-search"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-product-search/product": {
      "get": {
        "operationId": "AnalyticsProductSearchController_getProductSearchTermProduct",
        "summary": "Get product search term",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "description": "Term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productName",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isAlcohol",
            "required": false,
            "in": "query",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isBio",
            "required": false,
            "in": "query",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isFrozen",
            "required": false,
            "in": "query",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTobacco",
            "required": false,
            "in": "query",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchTermProductsDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-product-search"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-product-search/popular-terms": {
      "get": {
        "operationId": "AnalyticsProductSearchController_getPopularTerms",
        "summary": "Get product search popular terms",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPopularTermsDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-product-search"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-sales/by-products": {
      "get": {
        "operationId": "AnalyticsSalesController_getSalesByProducts",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "name_i18n",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderedField",
            "required": true,
            "in": "query",
            "example": "name_i18n",
            "schema": {
              "$ref": "#/components/schemas/SalesProductsOrderedFieldsEnum"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "vendorCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableAnalyticsSalesProducts"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-sales"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-sales/sales-over-time": {
      "get": {
        "operationId": "AnalyticsSalesController_getSalesOverTime",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeRegionCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorTypeCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeCorporateCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeBrandCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": true,
            "in": "query",
            "example": "DAY",
            "schema": {
              "$ref": "#/components/schemas/GroupByDateEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesOverTimeDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-sales"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-sales/products-refund": {
      "get": {
        "operationId": "AnalyticsSalesController_getProductRefunds",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "name_i18n",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "orderedField",
            "required": true,
            "in": "query",
            "example": "name_i18n",
            "schema": {
              "$ref": "#/components/schemas/SalesProductRefundOrderedFieldsEnum"
            }
          },
          {
            "name": "vendorCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableProductRefund"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-sales"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-sales/products-out-of-stock": {
      "get": {
        "operationId": "AnalyticsSalesController_productsOutOfStock",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "example": "Bottle",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageableProductsOutOfStockDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-sales"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-store/store-performance/{id}/totals": {
      "get": {
        "operationId": "AnalyticsStoreController_performanceTotals",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePerformanceTotalsDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-store/store-performance/{id}/order-history": {
      "get": {
        "operationId": "AnalyticsStoreController_performanceOrderHistory",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrdersHeatMapDto"
                }
              }
            }
          }
        },
        "tags": [
          "analytics-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-store/store-performance/{id}/orders-by-hours": {
      "get": {
        "operationId": "AnalyticsStoreController_ordersByHours",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarChartValueDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/analytics-store/store-performance/{id}/product-category-purchase": {
      "get": {
        "operationId": "AnalyticsStoreController_productCategoryPurchase",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarChartValueDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "analytics-store"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-item": {
      "post": {
        "operationId": "CrudFaqItemController_create",
        "summary": "Create one item FaqItemEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqItemCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "FaqItemEntity",
                  "$ref": "#/components/schemas/FaqItemEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqItemEntity",
                  "$ref": "#/components/schemas/FaqItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudFaqItemController_find",
        "summary": "Retrieve multiple items FaqItemEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<FaqItemEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FaqItemEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudFaqItemController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-item/{id}": {
      "get": {
        "operationId": "CrudFaqItemController_findOne",
        "summary": "Retrieve one item FaqItemEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqItemEntity",
                  "$ref": "#/components/schemas/FaqItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudFaqItemController_update",
        "summary": "Update item FaqItemEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqItemUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqItemEntity",
                  "$ref": "#/components/schemas/FaqItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudFaqItemController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudFaqItemController_recover",
        "summary": "Recover item FaqItemEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqItemEntity",
                  "$ref": "#/components/schemas/FaqItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-item/import": {
      "post": {
        "operationId": "CrudFaqItemController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-item/export": {
      "get": {
        "operationId": "CrudFaqItemController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-item/change-order": {
      "post": {
        "operationId": "CrudFaqItemController_changeOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-topic": {
      "post": {
        "operationId": "CrudFaqTopicController_create",
        "summary": "Create one item FaqTopicEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqTopicCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "FaqTopicEntity",
                  "$ref": "#/components/schemas/FaqTopicEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqTopicEntity",
                  "$ref": "#/components/schemas/FaqTopicEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudFaqTopicController_find",
        "summary": "Retrieve multiple items FaqTopicEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<FaqTopicEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FaqTopicEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudFaqTopicController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-topic/{id}": {
      "get": {
        "operationId": "CrudFaqTopicController_findOne",
        "summary": "Retrieve one item FaqTopicEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqTopicEntity",
                  "$ref": "#/components/schemas/FaqTopicEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudFaqTopicController_update",
        "summary": "Update item FaqTopicEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaqTopicUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqTopicEntity",
                  "$ref": "#/components/schemas/FaqTopicEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudFaqTopicController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudFaqTopicController_recover",
        "summary": "Recover item FaqTopicEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FaqTopicEntity",
                  "$ref": "#/components/schemas/FaqTopicEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-topic/import": {
      "post": {
        "operationId": "CrudFaqTopicController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-topic/export": {
      "get": {
        "operationId": "CrudFaqTopicController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-faq-topic/change-order": {
      "post": {
        "operationId": "CrudFaqTopicController_changeOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "crud-faq-topic"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recall-reason": {
      "post": {
        "operationId": "CrudProductRecallReasonController_create",
        "summary": "Create one item ProductRecallReasonEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRecallReasonCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductRecallReasonEntity",
                  "$ref": "#/components/schemas/ProductRecallReasonEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallReasonEntity",
                  "$ref": "#/components/schemas/ProductRecallReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecallReasonController_find",
        "summary": "Retrieve multiple items ProductRecallReasonEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRecallReasonEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRecallReasonEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecallReasonController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recall-reason/{id}": {
      "patch": {
        "operationId": "CrudProductRecallReasonController_update",
        "summary": "Update item ProductRecallReasonEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRecallReasonUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallReasonEntity",
                  "$ref": "#/components/schemas/ProductRecallReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecallReasonController_findOne",
        "summary": "Retrieve one item ProductRecallReasonEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallReasonEntity",
                  "$ref": "#/components/schemas/ProductRecallReasonEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecallReasonController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall-reason"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recall": {
      "post": {
        "operationId": "CrudProductRecallController_create",
        "summary": "Create one item ProductRecallEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRecallCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductRecallEntity",
                  "$ref": "#/components/schemas/ProductRecallEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallEntity",
                  "$ref": "#/components/schemas/ProductRecallEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecallController_find",
        "summary": "Retrieve multiple items ProductRecallEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRecallEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRecallEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecallController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recall/{id}": {
      "patch": {
        "operationId": "CrudProductRecallController_update",
        "summary": "Update item ProductRecallEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRecallUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallEntity",
                  "$ref": "#/components/schemas/ProductRecallEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecallController_findOne",
        "summary": "Retrieve one item ProductRecallEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallEntity",
                  "$ref": "#/components/schemas/ProductRecallEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecallController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductRecallController_recover",
        "summary": "Recover item ProductRecallEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecallEntity",
                  "$ref": "#/components/schemas/ProductRecallEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-recall/reports/{productCode}": {
      "get": {
        "operationId": "ProductRecallReportController_reports",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderField",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "storeIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderStatus",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderStatusEnum"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRecallReasonDto>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRecallReasonDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/product-recall/reports/{productCode}/export": {
      "get": {
        "operationId": "ProductRecallReportController_export",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderField",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "example": "ASC",
            "schema": {
              "$ref": "#/components/schemas/OrderedEnum"
            }
          },
          {
            "name": "storeIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderStatus",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderStatusEnum"
            }
          },
          {
            "name": "dateStart",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateEnd",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "product-recall"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recommendation-item": {
      "get": {
        "operationId": "CrudProductRecommendationItemController_find",
        "summary": "Retrieve multiple items ProductRecommendationItemEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRecommendationItemEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRecommendationItemEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudProductRecommendationItemController_updateMany",
        "summary": "Update multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for update",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProductRecommendationItemUpdateManyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecommendationItemController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recommendation-item/{id}": {
      "get": {
        "operationId": "CrudProductRecommendationItemController_findOne",
        "summary": "Retrieve one item ProductRecommendationItemEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationItemEntity",
                  "$ref": "#/components/schemas/ProductRecommendationItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecommendationItemController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductRecommendationItemController_recover",
        "summary": "Recover item ProductRecommendationItemEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationItemEntity",
                  "$ref": "#/components/schemas/ProductRecommendationItemEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recommendation-item/find-not-used": {
      "get": {
        "operationId": "CrudProductRecommendationItemController_findNotUsedRecommendationProducts",
        "parameters": [
          {
            "name": "storeProductRecommendationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productSubcategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCategoryCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productBrandCode",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productTags",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recommendation": {
      "post": {
        "operationId": "CrudProductRecommendationController_create",
        "summary": "Create one item ProductRecommendationEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProductRecommendationCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "ProductRecommendationEntity",
                  "$ref": "#/components/schemas/ProductRecommendationEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationEntity",
                  "$ref": "#/components/schemas/ProductRecommendationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecommendationController_find",
        "summary": "Retrieve multiple items ProductRecommendationEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<ProductRecommendationEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProductRecommendationEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecommendationController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-product-recommendation/{id}": {
      "patch": {
        "operationId": "CrudProductRecommendationController_update",
        "summary": "Update item ProductRecommendationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreProductRecommendationUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationEntity",
                  "$ref": "#/components/schemas/ProductRecommendationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudProductRecommendationController_findOne",
        "summary": "Retrieve one item ProductRecommendationEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationEntity",
                  "$ref": "#/components/schemas/ProductRecommendationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudProductRecommendationController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudProductRecommendationController_recover",
        "summary": "Recover item ProductRecommendationEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ProductRecommendationEntity",
                  "$ref": "#/components/schemas/ProductRecommendationEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-product-recommendation"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/app-process-images/process-external-images": {
      "get": {
        "operationId": "AppProcessImagesController_processExternalImages",
        "summary": "Process external images by reuploding them to our storage",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-images"
        ]
      }
    },
    "/app-process-order/process-prescheduled-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processPrescheduledOrders",
        "summary": "Process pre-scheduled orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-still-not-accept-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processStillNotAcceptOrders",
        "summary": "Process delayed to accept orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-delayed-to-start-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processDelayedToStartOrders",
        "summary": "Process delayed to start orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-delayed-to-end-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processDelayedToEndOrders",
        "summary": "Process delayed to end orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-delayed-payment-pending-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processDelayedPaymentPendingOrders",
        "summary": "Process delayed payment pending orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-payment-expired-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processPaymentExpiredOrders",
        "summary": "Process payment expired orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-inspect-suspicious-orders": {
      "get": {
        "operationId": "AppProcessOrderController_processinspectSuspiciousOrders",
        "summary": "Process inspecting suspicious orders",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-not-responded-order-replacements": {
      "get": {
        "operationId": "AppProcessOrderController_processNotRespondedOrderReplacements",
        "summary": "Process not responded order replacements",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-expired-order-replacements": {
      "get": {
        "operationId": "AppProcessOrderController_processExpiredOrderReplacements",
        "summary": "Process expired order replacements",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-expired-reservations": {
      "get": {
        "operationId": "AppProcessOrderController_processExpiredReservations",
        "summary": "Process expired reservations",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-order/process-orders-without-accounting-invoices": {
      "get": {
        "operationId": "AppProcessOrderController_processOrdersWithoutAccountingInvoices",
        "summary": "Process orders without accounting invoices",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-order"
        ]
      }
    },
    "/app-process-push-notification/add-custom-to-queue": {
      "get": {
        "operationId": "AppProcessPushNotificationController_addPushNotificationsCustomToQueue",
        "summary": "Process custom push notifications to the queue",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-push-notification"
        ]
      }
    },
    "/app-process-push-notification/execute-from-queue": {
      "get": {
        "operationId": "AppProcessPushNotificationController_sendNotificationsFromQueue",
        "summary": "Process push notifications from the queue",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-push-notification"
        ]
      }
    },
    "/app-process-push-notification/remove-expired-subscriptions": {
      "get": {
        "operationId": "AppProcessPushNotificationController_removeUsersExpiredSubscriptions",
        "summary": "Remove expired subscriptions",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-push-notification"
        ]
      }
    },
    "/app-process-staff-location/delete-expired-staff-locations": {
      "get": {
        "operationId": "AppProcessStaffLocationController_deleteExpiredStaffLocations",
        "summary": "Delete expired staff locations",
        "parameters": [
          {
            "name": "apikey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "app-process-staff-location"
        ]
      }
    },
    "/app-settings-customer": {
      "get": {
        "operationId": "AppSettingsCustomerController_get",
        "summary": "Get App Customer Settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsCustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "tags": [
          "app-settings-customer"
        ]
      },
      "patch": {
        "operationId": "AppSettingsCustomerController_update",
        "summary": "Update App Customer Settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsCustomerUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsCustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "tags": [
          "app-settings-customer"
        ]
      }
    },
    "/app-settings-partner": {
      "get": {
        "operationId": "AppSettingsPartnerController_get",
        "summary": "Get App Partner Settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPartnerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "tags": [
          "app-settings-partner"
        ]
      },
      "patch": {
        "operationId": "AppSettingsPartnerController_update",
        "summary": "Update App Partner Settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsPartnerUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPartnerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "tags": [
          "app-settings-partner"
        ]
      }
    },
    "/app-settings-staff": {
      "get": {
        "operationId": "AppSettingsStaffController_get",
        "summary": "Get App Staff Settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsStaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-settings-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "AppSettingsStaffController_update",
        "summary": "Update App Staff Settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsStaffUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsStaffEntity"
                }
              }
            }
          }
        },
        "tags": [
          "app-settings-staff"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-mollie-partner": {
      "get": {
        "operationId": "CrudMolliePartnerController_find",
        "summary": "Retrieve multiple items MolliePartnerEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<MolliePartnerEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MolliePartnerEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-mollie-partner"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudMolliePartnerController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-mollie-partner"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-mollie-partner/{id}": {
      "get": {
        "operationId": "CrudMolliePartnerController_findOne",
        "summary": "Retrieve one item MolliePartnerEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MolliePartnerEntity",
                  "$ref": "#/components/schemas/MolliePartnerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-mollie-partner"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudMolliePartnerController_update",
        "summary": "Update item MolliePartnerEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MolliePartnerStoresUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MolliePartnerEntity",
                  "$ref": "#/components/schemas/MolliePartnerEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-mollie-partner"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudMolliePartnerController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-mollie-partner"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/send": {
      "post": {
        "operationId": "InvoiceController_sendInvoice",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInvoiceInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendInvoiceDto"
                }
              }
            }
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/download": {
      "post": {
        "operationId": "InvoiceController_downloadInvoice",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInvoiceInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendInvoiceDto"
                }
              }
            }
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/send-all": {
      "post": {
        "operationId": "InvoiceController_sendAllInvoices",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendAllInvoicesDto"
                }
              }
            }
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/regenerate-all": {
      "post": {
        "operationId": "InvoiceController_regenerateAllInvoices",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendAllInvoicesDto"
                }
              }
            }
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/export": {
      "get": {
        "operationId": "InvoiceController_invoiceExportFiltered",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/invoice/invoice/export/ids": {
      "get": {
        "operationId": "InvoiceController_invoiceExportByIds",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "invoice"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-privacy-policy": {
      "post": {
        "operationId": "CrudPrivacyPolicyController_create",
        "summary": "Create one item PrivacyPolicyEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacyPolicyCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "PrivacyPolicyEntity",
                  "$ref": "#/components/schemas/PrivacyPolicyEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PrivacyPolicyEntity",
                  "$ref": "#/components/schemas/PrivacyPolicyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudPrivacyPolicyController_find",
        "summary": "Retrieve multiple items PrivacyPolicyEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<PrivacyPolicyEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PrivacyPolicyEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPrivacyPolicyController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-privacy-policy/{id}": {
      "get": {
        "operationId": "CrudPrivacyPolicyController_findOne",
        "summary": "Retrieve one item PrivacyPolicyEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PrivacyPolicyEntity",
                  "$ref": "#/components/schemas/PrivacyPolicyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudPrivacyPolicyController_update",
        "summary": "Update item PrivacyPolicyEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacyPolicyUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PrivacyPolicyEntity",
                  "$ref": "#/components/schemas/PrivacyPolicyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudPrivacyPolicyController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudPrivacyPolicyController_recover",
        "summary": "Recover item PrivacyPolicyEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PrivacyPolicyEntity",
                  "$ref": "#/components/schemas/PrivacyPolicyEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-privacy-policy"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-terms-condition": {
      "post": {
        "operationId": "CrudTermsConditionController_create",
        "summary": "Create one item TermsConditionEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermsConditionCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "TermsConditionEntity",
                  "$ref": "#/components/schemas/TermsConditionEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TermsConditionEntity",
                  "$ref": "#/components/schemas/TermsConditionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudTermsConditionController_find",
        "summary": "Retrieve multiple items TermsConditionEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<TermsConditionEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TermsConditionEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudTermsConditionController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-terms-condition/{id}": {
      "get": {
        "operationId": "CrudTermsConditionController_findOne",
        "summary": "Retrieve one item TermsConditionEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TermsConditionEntity",
                  "$ref": "#/components/schemas/TermsConditionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudTermsConditionController_update",
        "summary": "Update item TermsConditionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermsConditionUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TermsConditionEntity",
                  "$ref": "#/components/schemas/TermsConditionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudTermsConditionController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudTermsConditionController_recover",
        "summary": "Recover item TermsConditionEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TermsConditionEntity",
                  "$ref": "#/components/schemas/TermsConditionEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-terms-condition/change-order": {
      "post": {
        "operationId": "CrudTermsConditionController_changeOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "crud-terms-condition"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-loyalty-program": {
      "post": {
        "operationId": "CrudCustomerLoyaltyProgramController_create",
        "summary": "Create one item CustomerLoyaltyProgramEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoyaltyProgramCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "CustomerLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudCustomerLoyaltyProgramController_find",
        "summary": "Retrieve multiple items CustomerLoyaltyProgramEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<CustomerLoyaltyProgramEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerLoyaltyProgramController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-loyalty-program/{id}": {
      "get": {
        "operationId": "CrudCustomerLoyaltyProgramController_findOne",
        "summary": "Retrieve one item CustomerLoyaltyProgramEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudCustomerLoyaltyProgramController_update",
        "summary": "Update item CustomerLoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoyaltyProgramUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudCustomerLoyaltyProgramController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudCustomerLoyaltyProgramController_recover",
        "summary": "Recover item CustomerLoyaltyProgramEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomerLoyaltyProgramEntity",
                  "$ref": "#/components/schemas/CustomerLoyaltyProgramEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-loyalty-program/import": {
      "post": {
        "operationId": "CrudCustomerLoyaltyProgramController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-customer-loyalty-program/export": {
      "get": {
        "operationId": "CrudCustomerLoyaltyProgramController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-customer-loyalty-program"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-key-point": {
      "post": {
        "operationId": "CrudKeyPointController_create",
        "summary": "Create one item KeyPointEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyPointCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "KeyPointEntity",
                  "$ref": "#/components/schemas/KeyPointEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "KeyPointEntity",
                  "$ref": "#/components/schemas/KeyPointEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudKeyPointController_find",
        "summary": "Retrieve multiple items KeyPointEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<KeyPointEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/KeyPointEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudKeyPointController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-key-point/{id}": {
      "get": {
        "operationId": "CrudKeyPointController_findOne",
        "summary": "Retrieve one item KeyPointEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "KeyPointEntity",
                  "$ref": "#/components/schemas/KeyPointEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudKeyPointController_update",
        "summary": "Update item KeyPointEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyPointUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "KeyPointEntity",
                  "$ref": "#/components/schemas/KeyPointEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudKeyPointController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudKeyPointController_recover",
        "summary": "Recover item KeyPointEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "KeyPointEntity",
                  "$ref": "#/components/schemas/KeyPointEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-key-point"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-route": {
      "post": {
        "operationId": "CrudRouteController_create",
        "summary": "Create one item RouteEntity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteCreateInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "...",
                "schema": {
                  "title": "RouteEntity",
                  "$ref": "#/components/schemas/RouteEntity"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RouteEntity",
                  "$ref": "#/components/schemas/RouteEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "get": {
        "operationId": "CrudRouteController_find",
        "summary": "Retrieve multiple items RouteEntity[]",
        "description": "find",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "required": false,
            "in": "query",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "or",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "example": "EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Pageable<RouteEntity>",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pageable"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RouteEntity"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudRouteController_deleteMany",
        "summary": "Delete multiple items",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "ID`s of items selected for delete",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-route/{id}": {
      "get": {
        "operationId": "CrudRouteController_findOne",
        "summary": "Retrieve one item RouteEntity",
        "description": "find on item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "join",
            "required": false,
            "in": "query",
            "explode": true,
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "softDelete",
            "required": false,
            "in": "query",
            "description": "Load deleted items",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language. Default EN",
            "schema": {
              "$ref": "#/components/schemas/LangCodeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RouteEntity",
                  "$ref": "#/components/schemas/RouteEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "patch": {
        "operationId": "CrudRouteController_update",
        "summary": "Update item RouteEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RouteEntity",
                  "$ref": "#/components/schemas/RouteEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "delete": {
        "operationId": "CrudRouteController_delete",
        "summary": "Delete one item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      },
      "put": {
        "operationId": "CrudRouteController_recover",
        "summary": "Recover item RouteEntity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RouteEntity",
                  "$ref": "#/components/schemas/RouteEntity"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-route/import": {
      "post": {
        "operationId": "CrudRouteController_import",
        "summary": "Import multiple items by file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportDto"
                }
              }
            }
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/crud-route/export": {
      "get": {
        "operationId": "CrudRouteController_export",
        "summary": "Export items to file",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "ID`s of items selected for export",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileExt",
            "required": true,
            "in": "query",
            "description": "Export File Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "crud-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route-item/change-route-item-queue": {
      "post": {
        "operationId": "KeyPointController_changeOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route-item/move-points-to-another-route": {
      "post": {
        "operationId": "KeyPointController_movePointsToAnotherRoute",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRouteForKeyPointsInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route-item"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route/change-route-queue": {
      "post": {
        "operationId": "RouteController_changeOrder",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteChangeOrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route/points/{id}": {
      "get": {
        "operationId": "RouteController_points",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyPointDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route/details/{id}": {
      "get": {
        "operationId": "RouteController_details",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/logistic-route/routes": {
      "get": {
        "operationId": "RouteController_routes",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "EN",
                "DE",
                "FR",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverAssignedId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "logistic-route"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    },
    "/date-test/date": {
      "post": {
        "operationId": "DateTestController_date",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            }
          }
        },
        "tags": [
          "date-test"
        ]
      }
    },
    "/validation-pipe-test": {
      "post": {
        "operationId": "TestValidationPipeController_postValidationPipe",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostValidationPipeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostValidationPipeDto"
                }
              }
            }
          }
        },
        "tags": [
          "test-validation-pipe"
        ],
        "security": [
          {
            "access-token": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Admin Endpoints API",
    "description": "",
    "version": "1.0.1",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://auth.dev.bringooapi.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "access-token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "AccountingInvoiceSubmitInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "isFinalized": {
            "type": "boolean",
            "example": false,
            "default": false
          }
        },
        "required": [
          "orderId",
          "isFinalized"
        ]
      },
      "LexofficeInvoiceLineItemUnitPriceDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "netAmount": {
            "type": "number"
          },
          "grossAmount": {
            "type": "number"
          },
          "taxRatePercentage": {
            "type": "number"
          }
        },
        "required": [
          "currency",
          "netAmount",
          "grossAmount",
          "taxRatePercentage"
        ]
      },
      "LexofficeInvoiceLineItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "unitName": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "lineItemAmount": {
            "type": "number"
          },
          "discountPercentage": {
            "type": "number"
          },
          "unitPrice": {
            "$ref": "#/components/schemas/LexofficeInvoiceLineItemUnitPriceDto"
          }
        },
        "required": [
          "type",
          "name",
          "quantity",
          "lineItemAmount",
          "discountPercentage",
          "unitPrice"
        ]
      },
      "LexofficeInvoiceTaxAmountDto": {
        "type": "object",
        "properties": {
          "taxRatePercentage": {
            "type": "number"
          },
          "taxAmount": {
            "type": "number"
          },
          "netAmount": {
            "type": "number"
          },
          "grossAmount": {
            "type": "number"
          }
        },
        "required": [
          "taxRatePercentage",
          "taxAmount",
          "netAmount",
          "grossAmount"
        ]
      },
      "LexofficeInvoiceAddressDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "grossAmount": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "street",
          "city",
          "grossAmount",
          "zip",
          "countryCode"
        ]
      },
      "LexofficeInvoiceTotalPriceDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "totalNetAmount": {
            "type": "number"
          },
          "totalGrossAmount": {
            "type": "number"
          },
          "totalTaxAmount": {
            "type": "number"
          }
        },
        "required": [
          "currency",
          "totalNetAmount",
          "totalGrossAmount",
          "totalTaxAmount"
        ]
      },
      "LexofficeInvoiceTaxConditionsDto": {
        "type": "object",
        "properties": {
          "taxType": {
            "type": "string"
          }
        },
        "required": [
          "taxType"
        ]
      },
      "LexofficeInvoiceShippingConditionsDto": {
        "type": "object",
        "properties": {
          "shippingDate": {
            "type": "string"
          },
          "shippingType": {
            "type": "string"
          }
        },
        "required": [
          "shippingDate",
          "shippingType"
        ]
      },
      "LexofficeInvoicePaymentConditionsDto": {
        "type": "object",
        "properties": {
          "paymentTermLabel": {
            "type": "string"
          },
          "paymentTermLabelTemplate": {
            "type": "string"
          },
          "paymentTermDuration": {
            "type": "number"
          },
          "paymentDiscountConditions": {
            "$ref": "#/components/schemas/LexofficeInvoiceShippingConditionsDto"
          }
        },
        "required": [
          "paymentTermDuration",
          "paymentDiscountConditions"
        ]
      },
      "LexofficeInvoiceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organisationId": {
            "type": "string"
          },
          "createDate": {
            "type": "string"
          },
          "updateDate": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "language": {
            "type": "string"
          },
          "archived": {
            "type": "string"
          },
          "voucherStatus": {
            "type": "string"
          },
          "voucherNumber": {
            "type": "string"
          },
          "voucherDate": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "introduction": {
            "type": "string"
          },
          "remark": {
            "type": "string"
          },
          "closingInvoice": {
            "type": "string"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LexofficeInvoiceLineItemDto"
            }
          },
          "taxAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LexofficeInvoiceTaxAmountDto"
            }
          },
          "address": {
            "$ref": "#/components/schemas/LexofficeInvoiceAddressDto"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/LexofficeInvoiceTotalPriceDto"
          },
          "taxConditions": {
            "$ref": "#/components/schemas/LexofficeInvoiceTaxConditionsDto"
          },
          "shippingConditions": {
            "$ref": "#/components/schemas/LexofficeInvoiceShippingConditionsDto"
          },
          "paymentConditions": {
            "$ref": "#/components/schemas/LexofficeInvoicePaymentConditionsDto"
          }
        },
        "required": [
          "id",
          "version",
          "lineItems",
          "taxAmounts",
          "address",
          "totalPrice",
          "taxConditions",
          "shippingConditions",
          "paymentConditions"
        ]
      },
      "TransferFileTypeEnum": {
        "type": "string",
        "enum": [
          "LEXOFFICE"
        ]
      },
      "OrderAccountingInvoiceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountingInvoiceId": {
            "type": "string"
          },
          "accountingInvoiceUri": {
            "type": "string"
          },
          "accountingInvoiceDate": {
            "type": "string"
          },
          "accountingInvoiceNumber": {
            "type": "string"
          },
          "accountingSystem": {
            "$ref": "#/components/schemas/TransferFileTypeEnum"
          },
          "isFinalized": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "accountingInvoiceId",
          "accountingInvoiceUri",
          "accountingInvoiceDate",
          "accountingInvoiceNumber",
          "accountingSystem",
          "isFinalized"
        ]
      },
      "LocationInput": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "example": 53.54971200706458
          },
          "lng": {
            "type": "number",
            "example": 9.968216616141591
          }
        },
        "required": [
          "lat",
          "lng"
        ]
      },
      "CheckoutAddressInput": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "streets": {
            "deprecated": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string",
            "example": "Drosselstrasse"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "floorNumber": {
            "type": "string",
            "example": "1b"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "countryCode",
          "city",
          "zipCode",
          "location"
        ]
      },
      "DeliveryDestinationEnum": {
        "type": "string",
        "enum": [
          "HOME",
          "NEIGHBOUR"
        ]
      },
      "CheckoutInput": {
        "type": "object",
        "properties": {
          "deliveryAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "phoneCountryCode": {
            "type": "string",
            "example": "+49"
          },
          "phoneNumber": {
            "type": "string",
            "example": "905456654"
          },
          "deliveryComment": {
            "type": "string",
            "maxLength": 300
          },
          "deliveryDestination": {
            "default": "HOME",
            "$ref": "#/components/schemas/DeliveryDestinationEnum"
          },
          "messageForShopper": {
            "type": "string",
            "maxLength": 300
          },
          "deliveryDontRing": {
            "type": "boolean"
          },
          "deliveryCallMe": {
            "type": "boolean"
          },
          "deliveryLeaveAtTheDoor": {
            "type": "boolean"
          }
        },
        "required": [
          "deliveryAddress",
          "billingAddress",
          "phoneCountryCode",
          "phoneNumber",
          "deliveryDestination"
        ]
      },
      "CheckoutDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "checkoutUrl": {
            "type": "string"
          },
          "orderTransactionId": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "checkoutUrl",
          "orderTransactionId"
        ]
      },
      "CartAddressCreateInput": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "streets": {
            "deprecated": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string",
            "example": "Drosselstrasse"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "floorNumber": {
            "type": "string",
            "example": "1"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "countryCode",
          "city",
          "zipCode",
          "location"
        ]
      },
      "ProductInput": {
        "type": "object",
        "properties": {
          "linkId": {
            "type": "string",
            "description": "linkId from productDto"
          },
          "count": {
            "type": "number",
            "example": 1,
            "description": "count = 0 removes product from cart"
          },
          "address": {
            "$ref": "#/components/schemas/CartAddressCreateInput"
          },
          "customerNote": {
            "type": "string",
            "description": "Customer note to the chosen product"
          }
        },
        "required": [
          "linkId",
          "count"
        ]
      },
      "ProductsInput": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "productInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInput"
            }
          }
        },
        "required": [
          "customerId",
          "productInputs"
        ]
      },
      "CartInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "itemsCount": {
            "type": "number"
          },
          "weight": {
            "type": "string"
          },
          "maxWeight": {
            "type": "string"
          },
          "isOverload": {
            "type": "boolean"
          },
          "productsCount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "price",
          "itemsCount",
          "weight",
          "maxWeight",
          "isOverload",
          "productsCount"
        ]
      },
      "ChangeCartProductCountInput": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "count"
        ]
      },
      "CustomerRoleEnum": {
        "type": "string",
        "enum": [
          "GUEST",
          "CUSTOMER"
        ]
      },
      "Iso2Enum": {
        "type": "string",
        "enum": [
          "AD",
          "AE",
          "AF",
          "AG",
          "AI",
          "AL",
          "AM",
          "AO",
          "AQ",
          "AR",
          "AS",
          "AT",
          "AU",
          "AW",
          "AX",
          "AZ",
          "BA",
          "BB",
          "BD",
          "BE",
          "BF",
          "BG",
          "BH",
          "BI",
          "BJ",
          "BL",
          "BM",
          "BN",
          "BO",
          "BQ",
          "BR",
          "BS",
          "BT",
          "BV",
          "BW",
          "BY",
          "BZ",
          "CA",
          "CC",
          "CD",
          "CF",
          "CG",
          "CH",
          "CI",
          "CK",
          "CL",
          "CM",
          "CN",
          "CO",
          "CR",
          "CU",
          "CV",
          "CW",
          "CX",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DK",
          "DM",
          "DO",
          "DZ",
          "EC",
          "EE",
          "EG",
          "EH",
          "ER",
          "ES",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FM",
          "FO",
          "FR",
          "GA",
          "GB",
          "GD",
          "GE",
          "GF",
          "GG",
          "GH",
          "GI",
          "GL",
          "GM",
          "GN",
          "GP",
          "GQ",
          "GR",
          "GS",
          "GT",
          "GU",
          "GW",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IE",
          "IL",
          "IM",
          "IN",
          "IO",
          "IQ",
          "IR",
          "IS",
          "IT",
          "JE",
          "JM",
          "JO",
          "JP",
          "KE",
          "KG",
          "KH",
          "KI",
          "KM",
          "KN",
          "KP",
          "KR",
          "KW",
          "KY",
          "KZ",
          "LA",
          "LB",
          "LC",
          "LI",
          "LK",
          "LR",
          "LS",
          "LT",
          "LU",
          "LV",
          "LY",
          "MA",
          "MC",
          "MD",
          "ME",
          "MF",
          "MG",
          "MH",
          "MK",
          "ML",
          "MM",
          "MN",
          "MO",
          "MP",
          "MQ",
          "MR",
          "MS",
          "MT",
          "MU",
          "MV",
          "MW",
          "MX",
          "MY",
          "MZ",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NL",
          "NO",
          "NP",
          "NR",
          "NU",
          "NZ",
          "OM",
          "PA",
          "PE",
          "PF",
          "PG",
          "PH",
          "PK",
          "PL",
          "PM",
          "PN",
          "PR",
          "PS",
          "PT",
          "PW",
          "PY",
          "QA",
          "RE",
          "RO",
          "RS",
          "RU",
          "RW",
          "SA",
          "SB",
          "SC",
          "SD",
          "SE",
          "SG",
          "SH",
          "SI",
          "SJ",
          "SK",
          "SL",
          "SM",
          "SN",
          "SO",
          "SR",
          "SS",
          "ST",
          "SV",
          "SX",
          "SY",
          "SZ",
          "TC",
          "TD",
          "TF",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TL",
          "TM",
          "TN",
          "TO",
          "TR",
          "TT",
          "TV",
          "TW",
          "TZ",
          "UA",
          "UG",
          "UM",
          "US",
          "UY",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "YT",
          "ZA",
          "ZM",
          "ZW"
        ]
      },
      "Iso3Enum": {
        "type": "string",
        "enum": [
          "AFG",
          "ALA",
          "ALB",
          "DZA",
          "ASM",
          "AND",
          "AGO",
          "AIA",
          "ATA",
          "ATG",
          "ARG",
          "ARM",
          "ABW",
          "AUS",
          "AUT",
          "AZE",
          "BHS",
          "BHR",
          "BGD",
          "BRB",
          "BLR",
          "BEL",
          "BLZ",
          "BEN",
          "BMU",
          "BTN",
          "BOL",
          "BES",
          "BIH",
          "BWA",
          "BVT",
          "BRA",
          "IOT",
          "BRN",
          "BGR",
          "BFA",
          "BDI",
          "CPV",
          "KHM",
          "CMR",
          "CAN",
          "CYM",
          "CAF",
          "TCD",
          "CHL",
          "CHN",
          "CXR",
          "CCK",
          "COL",
          "COM",
          "COG",
          "COD",
          "COK",
          "CRI",
          "CIV",
          "HRV",
          "CUB",
          "CUW",
          "CYP",
          "CZE",
          "DNK",
          "DJI",
          "DMA",
          "DOM",
          "ECU",
          "EGY",
          "SLV",
          "GNQ",
          "ERI",
          "EST",
          "SWZ",
          "ETH",
          "FLK",
          "FRO",
          "FJI",
          "FIN",
          "FRA",
          "GUF",
          "PYF",
          "ATF",
          "GAB",
          "GMB",
          "GEO",
          "DEU",
          "GHA",
          "GIB",
          "GRC",
          "GRL",
          "GRD",
          "GLP",
          "GUM",
          "GTM",
          "GGY",
          "GIN",
          "GNB",
          "GUY",
          "HTI",
          "HMD",
          "VAT",
          "HND",
          "HKG",
          "HUN",
          "ISL",
          "IND",
          "IDN",
          "IRN",
          "IRQ",
          "IRL",
          "IMN",
          "ISR",
          "ITA",
          "JAM",
          "JPN",
          "JEY",
          "JOR",
          "KAZ",
          "KEN",
          "KIR",
          "PRK",
          "KOR",
          "KWT",
          "KGZ",
          "LAO",
          "LVA",
          "LBN",
          "LSO",
          "LBR",
          "LBY",
          "LIE",
          "LTU",
          "LUX",
          "MAC",
          "MDG",
          "MWI",
          "MYS",
          "MDV",
          "MLI",
          "MLT",
          "MHL",
          "MTQ",
          "MRT",
          "MUS",
          "MYT",
          "MEX",
          "FSM",
          "MDA",
          "MCO",
          "MNG",
          "MNE",
          "MSR",
          "MAR",
          "MOZ",
          "MMR",
          "NAM",
          "NRU",
          "NPL",
          "NLD",
          "NCL",
          "NZL",
          "NIC",
          "NER",
          "NGA",
          "NIU",
          "NFK",
          "MKD",
          "MNP",
          "NOR",
          "OMN",
          "PAK",
          "PLW",
          "PSE",
          "PAN",
          "PNG",
          "PRY",
          "PER",
          "PHL",
          "PCN",
          "POL",
          "PRT",
          "PRI",
          "QAT",
          "REU",
          "ROU",
          "RUS",
          "RWA",
          "BLM",
          "SHN",
          "KNA",
          "LCA",
          "MAF",
          "SPM",
          "VCT",
          "WSM",
          "SMR",
          "STP",
          "SAU",
          "SEN",
          "SRB",
          "SYC",
          "SLE",
          "SGP",
          "SXM",
          "SVK",
          "SVN",
          "SLB",
          "SOM",
          "ZAF",
          "SGS",
          "SSD",
          "ESP",
          "LKA",
          "SDN",
          "SUR",
          "SJM",
          "SWE",
          "CHE",
          "SYR",
          "TWN",
          "TJK",
          "TZA",
          "THA",
          "TLS",
          "TGO",
          "TKL",
          "TON",
          "TTO",
          "TUN",
          "TUR",
          "TKM",
          "TCA",
          "TUV",
          "UGA",
          "UKR",
          "ARE",
          "GBR",
          "USA",
          "UMI",
          "URY",
          "UZB",
          "VUT",
          "VEN",
          "VNM",
          "VGB",
          "VIR",
          "WLF",
          "ESH",
          "YEM",
          "ZMB",
          "ZWE"
        ]
      },
      "CountryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "iso2": {
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "iso3": {
            "$ref": "#/components/schemas/Iso3Enum"
          }
        },
        "required": [
          "id",
          "isActive",
          "code",
          "iso2",
          "iso3"
        ]
      },
      "LocationDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          }
        },
        "required": [
          "lat",
          "lng"
        ]
      },
      "AddressTypeEnum": {
        "type": "string",
        "enum": [
          "DELIVERY",
          "BILLING"
        ]
      },
      "CustomerAddressEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "addressName": {
            "type": "string",
            "example": "Home"
          },
          "addressType": {
            "$ref": "#/components/schemas/AddressTypeEnum"
          },
          "customerId": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "deliveryComment": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "addressName",
          "addressType"
        ]
      },
      "CorporateEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreBrandEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "corporate": {
            "$ref": "#/components/schemas/CorporateEntity"
          },
          "corporateCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreRegionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Iso2Enum"
          }
        },
        "required": [
          "id",
          "isActive",
          "countryCode"
        ]
      },
      "StoreAddressEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "gln": {
            "type": "string",
            "description": "Global location number"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "MAIN",
              "SECONDARY",
              "WAREHOUSE",
              "OTHER"
            ]
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "addressType"
        ]
      },
      "SalutationEnum": {
        "type": "string",
        "enum": [
          "MR",
          "MRS",
          "MS",
          "MISS",
          "DR",
          "SR",
          "PROF"
        ]
      },
      "StoreContactTypeEnum": {
        "type": "string",
        "enum": [
          "MANAGER",
          "SUPERVISOR",
          "OTHER"
        ]
      },
      "StoreContactEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "maxLength": 100
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "contactType": {
            "$ref": "#/components/schemas/StoreContactTypeEnum"
          },
          "email": {
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "salutation"
        ]
      },
      "StoreClosingDayEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "DayOfWeekEnum": {
        "type": "string",
        "enum": [
          "MON",
          "TUE",
          "WED",
          "THU",
          "FRI",
          "SAT",
          "SUN"
        ]
      },
      "StoreOpeningHourEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreWeightOptionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "weightValue": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "weightValue",
          "storeId"
        ]
      },
      "StoreDeliveryZoneEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "deliveryTime": {
            "type": "number"
          },
          "defaultFee": {
            "type": "number",
            "description": "Default fee for this zone",
            "example": 4.25
          },
          "isInstantDelivery": {
            "type": "boolean"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreSocialMediaEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "accountType": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "accountType",
          "account",
          "storeId"
        ]
      },
      "StoreDeliveryTimeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "storeId"
        ]
      },
      "VatEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "example": 0
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "CurrencyCodeEnum": {
        "type": "string",
        "enum": [
          "USD",
          "EUR",
          "NOK",
          "DKK"
        ]
      },
      "CurrencyEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "VendorTypeEntity": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "VendorCategoryEntity": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductSubcategoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ProductCategoryEntity"
          },
          "categoryCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "slug": {
            "type": "string",
            "description": "Unique identifying part of a web address"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductCategoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "subcategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSubcategoryEntity"
            }
          },
          "vendorCategory": {
            "$ref": "#/components/schemas/VendorCategoryEntity"
          },
          "vendorCategoryCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "slug": {
            "type": "string",
            "description": "Unique identifying part of a web address"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StaffRoleEnum": {
        "type": "string",
        "enum": [
          "UNASSIGNED",
          "DRIVER",
          "PICKER",
          "PICKER_DRIVER"
        ]
      },
      "LangCodeEnum": {
        "type": "string",
        "enum": [
          "EN",
          "DE",
          "FR",
          "ALL"
        ]
      },
      "Iso15897Enum": {
        "type": "string",
        "enum": [
          "en_US",
          "nl_NL",
          "nl_BE",
          "fr_FR",
          "fr_BE",
          "de_DE",
          "de_AT",
          "de_CH",
          "es_ES",
          "ca_ES",
          "pt_PT",
          "it_IT",
          "nb_NO",
          "sv_SE",
          "fi_FI",
          "da_DK",
          "is_IS",
          "hu_HU",
          "pl_PL",
          "lv_LV",
          "lt_LT"
        ]
      },
      "LanguageEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "locale": {
            "$ref": "#/components/schemas/Iso15897Enum"
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "NationalityEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "adjectiveNationality_i18n": {
            "type": "string"
          },
          "nounNationality_i18n": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "adjectiveNationality_i18n",
          "nounNationality_i18n"
        ]
      },
      "StaffSettingsEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "staffLanguage": {
            "$ref": "#/components/schemas/LanguageEntity"
          },
          "staffLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "staffNumber": {
            "type": "string",
            "maxLength": 200
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityEntity"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "placeOfBirth": {
            "type": "string"
          },
          "allowAssociateJobs": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "isActive",
          "staffLanguageCode",
          "allowAssociateJobs"
        ]
      },
      "StaffEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "tempPassword": {
            "type": "string"
          },
          "forgotDateTime": {
            "type": "string"
          },
          "rightToBeForgotten": {
            "type": "boolean"
          },
          "forgotUrl": {
            "type": "string"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isTermsAndConditionsAgreed": {
            "type": "boolean"
          },
          "lastLoginDate": {
            "type": "string"
          },
          "isOnline": {
            "type": "boolean"
          },
          "note": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "settingsId": {
            "type": "string"
          },
          "isPhoneNumberVerified": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/StaffRoleEnum"
          },
          "settings": {
            "$ref": "#/components/schemas/StaffSettingsEntity"
          },
          "storesBound": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "isActive",
          "email",
          "password",
          "tempPassword",
          "forgotDateTime",
          "rightToBeForgotten",
          "forgotUrl",
          "isEmailVerified",
          "isTermsAndConditionsAgreed",
          "lastLoginDate",
          "isOnline",
          "note",
          "appVersion",
          "isPhoneNumberVerified",
          "role"
        ]
      },
      "StoreStaffBoundEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          },
          "staff": {
            "$ref": "#/components/schemas/StaffEntity"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "storeId",
          "staffId"
        ]
      },
      "StoreStaffRestrictionEnum": {
        "type": "string",
        "enum": [
          "FREELANCE_ONLY",
          "BOUND_ONLY",
          "BOUND_AND_FREELANCE"
        ]
      },
      "StoreEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name_public_short_i18n": {
            "type": "string"
          },
          "name_public_long_i18n": {
            "type": "string"
          },
          "storeBrand": {
            "$ref": "#/components/schemas/StoreBrandEntity"
          },
          "storeBrandCode": {
            "type": "string"
          },
          "corporate": {
            "$ref": "#/components/schemas/CorporateEntity"
          },
          "corporateCode": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/StoreRegionEntity"
          },
          "storeRegionCode": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreAddressEntity"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreContactEntity"
            }
          },
          "closingDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreClosingDayEntity"
            }
          },
          "openingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreOpeningHourEntity"
            }
          },
          "storeWeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreWeightOptionEntity"
            }
          },
          "deliveryZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreDeliveryZoneEntity"
            }
          },
          "socialMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreSocialMediaEntity"
            }
          },
          "deliveryTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreDeliveryTimeEntity"
            }
          },
          "logoUrl": {
            "type": "string"
          },
          "rectLogoUrl": {
            "type": "string"
          },
          "heroImgUrl": {
            "type": "string"
          },
          "promoImgUrl": {
            "type": "string"
          },
          "landingImgUrl": {
            "type": "string"
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "navbarColor": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isDelivery": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deliveryFeeVat": {
            "$ref": "#/components/schemas/VatEntity"
          },
          "deliveryFeeVatCode": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "vendorType": {
            "$ref": "#/components/schemas/VendorTypeEntity"
          },
          "vendorTypeCode": {
            "type": "string"
          },
          "vendorCategory": {
            "$ref": "#/components/schemas/VendorCategoryEntity"
          },
          "vendorCategoryCode": {
            "type": "string"
          },
          "productOutOfStockTime": {
            "type": "number",
            "description": "Product out out stock time, hours",
            "example": 24
          },
          "productLink": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryEntity"
            }
          },
          "subcategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSubcategoryEntity"
            }
          },
          "staffBound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreStaffBoundEntity"
            }
          },
          "slug": {
            "type": "string",
            "description": "Unique identifying part of a web address"
          },
          "isStartPickJobWithoutDriverAllowed": {
            "type": "boolean",
            "description": "Piker can start work without driver",
            "default": false
          },
          "pickerRestriction": {
            "example": "FREELANCE_ONLY",
            "$ref": "#/components/schemas/StoreStaffRestrictionEnum"
          },
          "driverRestriction": {
            "example": "FREELANCE_ONLY",
            "$ref": "#/components/schemas/StoreStaffRestrictionEnum"
          },
          "replacementMaxTime": {
            "type": "number",
            "description": "Maximum waiting time for a customer`s response (in seconds) on product replacement",
            "example": 600
          },
          "replacementMaxAttempts": {
            "type": "number",
            "description": "Maximum attempts on product replacement",
            "example": 5
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Berlin"
          },
          "externalCode": {
            "type": "string",
            "description": "This code is meant to be used to share data between bringoo and partner.",
            "example": "ExternalCode"
          },
          "replacementAllowed": {
            "type": "boolean",
            "description": "The store have product replacement or not.",
            "example": true
          }
        },
        "required": [
          "id",
          "isActive",
          "name_public_short_i18n",
          "name_public_long_i18n",
          "pickerRestriction",
          "driverRestriction",
          "timeZone"
        ]
      },
      "CartAddressEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "cartId": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductBrandEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductTypeEnum": {
        "type": "string",
        "enum": [
          "BOOKSTORE",
          "ELECTRONIC",
          "FLOWER",
          "GROCERY",
          "HARDWARE_STORE",
          "PHARMA",
          "RESTAURANT"
        ]
      },
      "ProductUnitCodeEnum": {
        "type": "string",
        "enum": [
          "GRAM",
          "KILOGRAM",
          "METER",
          "CENTIMETER",
          "LITER",
          "MILLILITER",
          "ITEM"
        ]
      },
      "ProductUnitEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductDepositEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "itemDepositValueGross": {
            "type": "number",
            "example": 3.55
          },
          "itemDepositValueNet": {
            "type": "number",
            "example": 3.55
          },
          "itemDepositVatValue": {
            "type": "number",
            "example": 3.55
          },
          "boxDepositValueGross": {
            "type": "number",
            "example": 3.55
          },
          "boxDepositValueNet": {
            "type": "number",
            "example": 3.55
          },
          "boxDepositVatValue": {
            "type": "number",
            "example": 3.55
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "NutriScoreEnum": {
        "type": "string",
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "UNKNOWN"
        ]
      },
      "NutritionalDataDto": {
        "type": "object",
        "properties": {
          "energyTotal": {
            "type": "number",
            "description": "total energy in kj"
          },
          "calories": {
            "type": "number",
            "description": "Calories per 100 g"
          },
          "fatTotal": {
            "type": "number",
            "description": "Total fat in g"
          },
          "fatSaturates": {
            "type": "number",
            "description": "Fat saturates in g"
          },
          "carbohydrateTotal": {
            "type": "number",
            "description": "Carbohydrate Total in g"
          },
          "carbohydrateSugars": {
            "type": "number",
            "description": "Carbohydrate sugars in g"
          },
          "fibres": {
            "type": "number",
            "description": "Fibres in g"
          },
          "protein": {
            "type": "number",
            "description": "Protein in g"
          },
          "salt": {
            "type": "number",
            "description": "Salt in g"
          }
        },
        "required": [
          "energyTotal",
          "calories",
          "fatTotal",
          "fatSaturates",
          "carbohydrateTotal",
          "carbohydrateSugars",
          "fibres",
          "protein",
          "salt"
        ]
      },
      "ProductAttributesEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isAlcohol": {
            "type": "boolean",
            "description": "Is alcoholic drink"
          },
          "alcoholValue": {
            "type": "number",
            "description": "Alcohol value",
            "example": 4.25
          },
          "isBio": {
            "type": "boolean"
          },
          "isFrozen": {
            "type": "boolean"
          },
          "isTobacco": {
            "type": "boolean"
          },
          "isVegan": {
            "type": "boolean"
          },
          "isVegetarian": {
            "type": "boolean"
          },
          "isLactoseFree": {
            "type": "boolean"
          },
          "isGlutenFree": {
            "type": "boolean"
          },
          "nutriScore": {
            "default": "UNKNOWN",
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "nutritional_data": {
            "$ref": "#/components/schemas/NutritionalDataDto"
          },
          "ingredients_i18n": {
            "type": "string"
          },
          "allergenic_information_i18n": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "length": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "ProductEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "metaData": {
            "type": "string"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "slug": {
            "type": "string",
            "description": "Unique identifying part of a web address"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "isPickup": {
            "type": "boolean",
            "default": true
          },
          "isPickAndDrive": {
            "type": "boolean",
            "default": true
          },
          "isOnlineShipment": {
            "type": "boolean",
            "default": true
          },
          "productBrand": {
            "$ref": "#/components/schemas/ProductBrandEntity"
          },
          "productBrandCode": {
            "type": "string"
          },
          "subcategory": {
            "$ref": "#/components/schemas/ProductSubcategoryEntity"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ProductCategoryEntity"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "weight": {
            "type": "number",
            "description": "Product weight in grams"
          },
          "productUnit": {
            "$ref": "#/components/schemas/ProductUnitEntity"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseUnit": {
            "$ref": "#/components/schemas/ProductUnitEntity"
          },
          "productMeasurement": {
            "type": "number",
            "description": "Total product measurement in units"
          },
          "baseMeasurement": {
            "type": "number",
            "description": "Base measurement in units"
          },
          "defaultPrice": {
            "type": "number",
            "description": "Default product price",
            "example": 4.25
          },
          "costPrice": {
            "type": "number",
            "description": "Cost product price",
            "example": 4.25
          },
          "chargeTax": {
            "type": "boolean",
            "description": "Charge tax on this product"
          },
          "productLink": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLinkEntity"
            }
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositEntity"
          },
          "depositId": {
            "type": "string"
          },
          "vat": {
            "$ref": "#/components/schemas/VatEntity"
          },
          "vatCode": {
            "type": "string"
          },
          "productVatPercent": {
            "type": "number"
          },
          "productValueGross": {
            "type": "number",
            "example": 3.55
          },
          "productValueNet": {
            "type": "number",
            "example": 3.55
          },
          "productVatValue": {
            "type": "number",
            "example": 3.55
          },
          "basePriceCoefficient": {
            "type": "number",
            "example": 3.55
          },
          "tags_i18n": {
            "type": "string"
          },
          "noImage": {
            "type": "boolean",
            "description": "Image not found"
          },
          "manufacturer_i18n": {
            "type": "string"
          },
          "special_notes_i18n": {
            "type": "string"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "$ref": "#/components/schemas/ProductAttributesEntity"
          },
          "productAttributesId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "productUnitCode",
          "baseUnitCode",
          "productLegalCode"
        ]
      },
      "PriceTypeEnum": {
        "type": "string",
        "enum": [
          "REGULAR",
          "SALE"
        ]
      },
      "ProductPriceEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "example": 4.25
          },
          "vat": {
            "$ref": "#/components/schemas/VatEntity"
          },
          "vatCode": {
            "type": "string"
          },
          "productVatPercent": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "productValueGross": {
            "type": "number",
            "example": 3.55
          },
          "productValueNet": {
            "type": "number",
            "example": 3.55
          },
          "productVatValue": {
            "type": "number",
            "example": 3.55
          },
          "type": {
            "$ref": "#/components/schemas/PriceTypeEnum"
          }
        },
        "required": [
          "id",
          "isActive",
          "productValueGross",
          "productValueNet",
          "productVatValue"
        ]
      },
      "UserRoleEnum": {
        "type": "string",
        "enum": [
          "manager",
          "staff",
          "customer"
        ]
      },
      "OutOfStockEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "creatorRole": {
            "$ref": "#/components/schemas/UserRoleEnum"
          },
          "creatorId": {
            "type": "string"
          },
          "finderId": {
            "type": "string",
            "description": "Id of picker who found product"
          }
        },
        "required": [
          "id",
          "isActive",
          "startDateTime",
          "endDateTime"
        ]
      },
      "ProductLinkEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ProductEntity"
          },
          "productId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPriceEntity"
            }
          },
          "outStocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutOfStockEntity"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ReplaceTypeEnum": {
        "type": "string",
        "enum": [
          "REPLACE_OTHER_BRAND",
          "REPLACE_CHEAPER",
          "CONTACT_ME",
          "REMOVE"
        ]
      },
      "CartItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "category_name_i18n": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategory_name_i18n": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productVatPercent": {
            "type": "number",
            "description": "One Item VAT %",
            "example": 17
          },
          "productVatValue": {
            "type": "number",
            "description": "One Item Vat Value",
            "example": 4.25
          },
          "weight": {
            "type": "number",
            "description": "One Item weight in gramms",
            "example": 500
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "replaceTypeCode": {
            "nullable": true,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "quantity": {
            "type": "number"
          },
          "sku": {
            "type": "string",
            "maxLength": 64
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "productCode": {
            "type": "string"
          },
          "store_name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "regularPrice": {
            "type": "number",
            "description": "Regular item price",
            "example": 2.25
          },
          "salePrice": {
            "type": "number",
            "description": "Sale item price",
            "example": 2.25
          },
          "price": {
            "type": "number",
            "description": "Saved item price",
            "example": 4.25
          },
          "productId": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "customerId": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerNote": {
            "type": "string"
          },
          "cart": {
            "$ref": "#/components/schemas/CartEntity"
          },
          "cartId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "productVatPercent",
          "productVatValue",
          "weight",
          "replaceTypeCode",
          "store_name_i18n"
        ]
      },
      "CartStatusEnum": {
        "type": "string",
        "enum": [
          "DELETED",
          "OPEN",
          "PAYMENT_PENDING",
          "PAID"
        ]
      },
      "CartEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "address": {
            "$ref": "#/components/schemas/CartAddressEntity"
          },
          "storeId": {
            "type": "string"
          },
          "cartCode": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemEntity"
            }
          },
          "replaceTypeCode": {
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "weight": {
            "type": "number"
          },
          "maxWeight": {
            "type": "number"
          },
          "cartStatus": {
            "$ref": "#/components/schemas/CartStatusEnum"
          },
          "cartItemQuantity": {
            "type": "number"
          },
          "cartProductQuantity": {
            "type": "number"
          },
          "totalAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Order price without delivery fee"
          },
          "deliveryFee": {
            "type": "number",
            "example": 4.25,
            "description": "Delivery fee"
          }
        },
        "required": [
          "id",
          "isActive",
          "replaceTypeCode"
        ]
      },
      "CustomerSettingsEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "customerLanguage": {
            "$ref": "#/components/schemas/LanguageEntity"
          },
          "customerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityEntity"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "placeOfBirth": {
            "type": "string",
            "maxLength": 400
          },
          "customerNumber": {
            "type": "string",
            "maxLength": 200
          },
          "inviteCode": {
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "CustomerNotificationSettingsEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "newProductArrivals": {
            "type": "boolean"
          },
          "sales": {
            "type": "boolean"
          },
          "deliveryStatusChange": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ManagerRoleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ManagerSettingsEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "managerLanguage": {
            "$ref": "#/components/schemas/LanguageEntity"
          },
          "managerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityEntity"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "placeOfBirth": {
            "type": "string"
          },
          "managerNumber": {
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "id",
          "isActive",
          "managerLanguageCode"
        ]
      },
      "ManagerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "tempPassword": {
            "type": "string"
          },
          "forgotDateTime": {
            "type": "string"
          },
          "rightToBeForgotten": {
            "type": "boolean"
          },
          "forgotUrl": {
            "type": "string"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isTermsAndConditionsAgreed": {
            "type": "boolean"
          },
          "lastLoginDate": {
            "type": "string"
          },
          "isOnline": {
            "type": "boolean"
          },
          "note": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "settingsId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "managerRole": {
            "$ref": "#/components/schemas/ManagerRoleEntity"
          },
          "settings": {
            "$ref": "#/components/schemas/ManagerSettingsEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "email",
          "password",
          "tempPassword",
          "forgotDateTime",
          "rightToBeForgotten",
          "forgotUrl",
          "isEmailVerified",
          "isTermsAndConditionsAgreed",
          "lastLoginDate",
          "isOnline",
          "note",
          "appVersion",
          "role"
        ]
      },
      "CustomerBanEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "managerId": {
            "type": "string"
          },
          "managerComment": {
            "type": "string",
            "maxLength": 300
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "customerId",
          "managerId",
          "startDateTime"
        ]
      },
      "CustomerEmailCodeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "expires": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          }
        },
        "required": [
          "code",
          "token",
          "expires",
          "customerId"
        ]
      },
      "CustomerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "tempPassword": {
            "type": "string"
          },
          "forgotDateTime": {
            "type": "string"
          },
          "rightToBeForgotten": {
            "type": "boolean"
          },
          "forgotUrl": {
            "type": "string"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isTermsAndConditionsAgreed": {
            "type": "boolean"
          },
          "lastLoginDate": {
            "type": "string"
          },
          "isOnline": {
            "type": "boolean"
          },
          "note": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "settingsId": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/CustomerRoleEnum"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressEntity"
            }
          },
          "carts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartEntity"
            }
          },
          "settings": {
            "$ref": "#/components/schemas/CustomerSettingsEntity"
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/CustomerNotificationSettingsEntity"
          },
          "bans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerBanEntity"
            }
          },
          "customerTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isPhoneNumberVerified": {
            "type": "boolean"
          },
          "emailCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEmailCodeEntity"
            }
          }
        },
        "required": [
          "id",
          "email",
          "password",
          "tempPassword",
          "forgotDateTime",
          "rightToBeForgotten",
          "forgotUrl",
          "isEmailVerified",
          "isTermsAndConditionsAgreed",
          "lastLoginDate",
          "isOnline",
          "note",
          "appVersion",
          "role",
          "isPhoneNumberVerified"
        ]
      },
      "OrderHistoryEventTypeEnum": {
        "type": "string",
        "enum": [
          "ORDER_CREATED",
          "ORDER_CANCELED_BY_CUSTOMER",
          "ORDER_CANCELED_BY_MANAGER",
          "ORDER_REFUND_BY_MANAGER",
          "ORDER_CANCELED_NO_PRODUCTS",
          "ORDER_PAID",
          "PICK_JOB_ACCEPTED",
          "DELIVERY_JOB_ACCEPTED",
          "PICK_JOB_STARTED",
          "END_OF_PICKING",
          "IN_SHOP_PAYMENT",
          "DELIVERY_JOB_STARTED",
          "CONFIRM_AGE_VERBALLY",
          "CONFIRM_AGE_VERBALLY_ISSUE",
          "CONFIRM_ID_PHOTO",
          "CONFIRM_ID_PHOTO_ISSUE",
          "VERIFY_AGE",
          "TERMINATE_ORDER_WITH_REFUND",
          "TERMINATE_ORDER_WITHOUT_REFUND",
          "DELIVERY_JOB_COMPLETE",
          "SET_PICKER_BY_MANAGER",
          "SET_DRIVER_BY_MANAGER",
          "CHANGE_DELIVERY_COMMENT",
          "CHANGE_MESSAGE_FOR_SHOPPER",
          "CHANGE_DELIVERY_ADDRESS",
          "CHANGE_BILLING_ADDRESS",
          "REPLACEMENT_CREATED",
          "REPLACEMENT_EXTENDED",
          "REPLACEMENT_EXPIRED",
          "REPLACEMENT_TERMINATED",
          "REPLACEMENT_MESSAGE_READ",
          "REPLACEMENT_COMPLETED",
          "ADD_ORDER_RECEIPT_IMAGES_BY_MANAGER",
          "ADD_ORDER_VAT_RECEIPT_IMAGES_BY_MANAGER",
          "REPLACEMENT_CREATED_CUSTOMER_VOICE_CALL",
          "UPDATE_ORDER_RECEIPT_IMAGES_BY_MANAGER",
          "UPDATE_ORDER_VAT_RECEIPT_IMAGES_BY_MANAGER",
          "SEND_SMS_PAYMENT_LINK",
          "SEND_SMS_VOICE_CALL_ORDER_REPLACEMENT_CREATED",
          "ACCOUNTING_ORDER_INVOICE_SUBMITTED"
        ]
      },
      "OrderEventEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "orderId": {
            "type": "string"
          },
          "eventType": {
            "$ref": "#/components/schemas/OrderHistoryEventTypeEnum"
          }
        },
        "required": [
          "id"
        ]
      },
      "OrderDeliveryFeeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "orderTransaction": {
            "$ref": "#/components/schemas/OrderTransactionEntity"
          },
          "orderTransactionId": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "orderId": {
            "type": "string",
            "description": "ID of bringoo order"
          },
          "isRefunded": {
            "type": "boolean",
            "readOnly": true
          },
          "price": {
            "type": "number",
            "description": "Delivery fee",
            "example": 4.25
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "customerId": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "isRefunded"
        ]
      },
      "OrderReplacementItemStatusEnum": {
        "type": "string",
        "enum": [
          "REVIEW",
          "DONE",
          "REMOVED",
          "REPLACEMENT",
          "NEW"
        ]
      },
      "OrderReplacementItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "category_name_i18n": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategory_name_i18n": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productVatPercent": {
            "type": "number",
            "description": "One Item VAT %",
            "example": 17
          },
          "productVatValue": {
            "type": "number",
            "description": "One Item Vat Value",
            "example": 4.25
          },
          "weight": {
            "type": "number",
            "description": "One Item weight in gramms",
            "example": 500
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "replaceTypeCode": {
            "nullable": true,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "quantity": {
            "type": "number"
          },
          "sku": {
            "type": "string",
            "maxLength": 64
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "productCode": {
            "type": "string"
          },
          "store_name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "regularPrice": {
            "type": "number",
            "description": "Regular item price",
            "example": 2.25
          },
          "salePrice": {
            "type": "number",
            "description": "Sale item price",
            "example": 2.25
          },
          "price": {
            "type": "number",
            "description": "Saved item price",
            "example": 4.25
          },
          "productId": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "customerId": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerNote": {
            "type": "string"
          },
          "orderReplacement": {
            "$ref": "#/components/schemas/OrderReplacementEntity"
          },
          "orderReplacementId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "orderReplacementItemStatus": {
            "$ref": "#/components/schemas/OrderReplacementItemStatusEnum"
          },
          "replacementQuantityRequested": {
            "type": "number"
          },
          "replacementQuantityFound": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "productVatPercent",
          "productVatValue",
          "weight",
          "replaceTypeCode",
          "store_name_i18n"
        ]
      },
      "OrderReplacementStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING",
          "PICKING",
          "COMPLETE",
          "TERMINATED_BY_CUSTOMER",
          "TERMINATED_BY_STAFF",
          "TERMINATED_BY_MANAGER",
          "EXPIRED"
        ]
      },
      "OrderReplacementEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "staff": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "staffId": {
            "type": "string",
            "description": "ID of staff who created this replacement"
          },
          "orderTransaction": {
            "$ref": "#/components/schemas/OrderTransactionEntity"
          },
          "orderTransactionId": {
            "type": "string"
          },
          "nextOrderTransaction": {
            "$ref": "#/components/schemas/OrderTransactionEntity"
          },
          "nextOrderTransactionId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "replacementItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReplacementItemEntity"
            }
          },
          "totalAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Sum of the prices of the products selected for replacement"
          },
          "expires": {
            "type": "string"
          },
          "payDate": {
            "type": "string"
          },
          "messageReadDate": {
            "type": "string"
          },
          "messageReadCounter": {
            "type": "number"
          },
          "attemptsLeft": {
            "type": "string"
          },
          "amountOfTimeExtensions": {
            "type": "string"
          },
          "orderReplacementNumber": {
            "type": "string"
          },
          "orderReplacementStatus": {
            "$ref": "#/components/schemas/OrderReplacementStatusEnum"
          },
          "weight": {
            "type": "number",
            "description": "Total weight(grams) of all products selected by customer"
          },
          "maxWeight": {
            "type": "number",
            "description": "Maximum allowed weight(grams) of all products selected by customer"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "VoucherTypeEnum": {
        "type": "string",
        "enum": [
          "FREE_SHIPPING",
          "DISCOUNT_FIXED",
          "DISCOUNT_PERCENTAGE",
          "BUY_X_GET_Y"
        ]
      },
      "VoucherCustomerEligibilityEnum": {
        "type": "string",
        "enum": [
          "ALL",
          "TAGS",
          "SELECTED"
        ]
      },
      "VoucherStoreEligibilityEnum": {
        "type": "string",
        "enum": [
          "ALL",
          "SELECTED"
        ]
      },
      "VoucherCountryEligibilityEnum": {
        "type": "string",
        "enum": [
          "ALL",
          "SELECTED"
        ]
      },
      "VoucherFreeShippingEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "voucherId": {
            "type": "string"
          },
          "voucher": {
            "$ref": "#/components/schemas/VoucherEntity"
          },
          "countryEligibility": {
            "$ref": "#/components/schemas/VoucherCountryEligibilityEnum"
          },
          "countryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isMaxShippingRate": {
            "type": "boolean",
            "description": "Is Max shipping rate for a voucher apply"
          },
          "maxShippingRate": {
            "type": "number",
            "description": "Max shipping rate for a voucher apply"
          }
        },
        "required": [
          "id",
          "isActive",
          "voucherId",
          "countryEligibility",
          "isMaxShippingRate"
        ]
      },
      "VoucherRequirementsEnum": {
        "type": "string",
        "enum": [
          "NONE",
          "MIN_COST_AMOUNT",
          "MIN_ITEMS_AMOUNT"
        ]
      },
      "VoucherDiscountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "voucherId": {
            "type": "string"
          },
          "voucher": {
            "$ref": "#/components/schemas/VoucherEntity"
          },
          "value": {
            "type": "number"
          },
          "productEligibility": {
            "$ref": "#/components/schemas/VoucherCustomerEligibilityEnum"
          },
          "productTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requirements": {
            "$ref": "#/components/schemas/VoucherRequirementsEnum"
          },
          "minCostAmount": {
            "type": "number",
            "description": "Min cost amount for a voucher apply"
          },
          "minItemAmount": {
            "type": "number",
            "description": "Min item amount for a voucher apply"
          }
        },
        "required": [
          "id",
          "isActive",
          "voucherId",
          "value",
          "productEligibility",
          "requirements"
        ]
      },
      "VoucherEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "voucherType": {
            "$ref": "#/components/schemas/VoucherTypeEnum"
          },
          "usageTotal": {
            "type": "number",
            "description": "Amount of voucher total usage"
          },
          "isLimitUsageTotal": {
            "type": "boolean"
          },
          "limitUsageTotal": {
            "type": "number",
            "description": "Limit Usage Total"
          },
          "isLimitUsagePerCustomer": {
            "type": "boolean"
          },
          "customerEligibility": {
            "$ref": "#/components/schemas/VoucherCustomerEligibilityEnum"
          },
          "customerTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "storeEligibility": {
            "$ref": "#/components/schemas/VoucherStoreEligibilityEnum"
          },
          "storeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "managerId": {
            "type": "string"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          },
          "freeShipping": {
            "$ref": "#/components/schemas/VoucherFreeShippingEntity"
          },
          "discount": {
            "$ref": "#/components/schemas/VoucherDiscountEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "code",
          "voucherType",
          "usageTotal",
          "isLimitUsageTotal",
          "isLimitUsagePerCustomer",
          "customerEligibility",
          "startDateTime",
          "storeEligibility",
          "managerId"
        ]
      },
      "OrderTransactionVoucherEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "deliveryFeeDiscount": {
            "type": "number",
            "description": "Delivery fee discount",
            "example": 4.25
          },
          "orderItemsDiscount": {
            "type": "number",
            "example": 4.25,
            "description": "Order items discount"
          },
          "orderTransactionId": {
            "type": "string"
          },
          "orderTransaction": {
            "$ref": "#/components/schemas/OrderTransactionEntity"
          },
          "voucherId": {
            "type": "string"
          },
          "voucher": {
            "$ref": "#/components/schemas/VoucherEntity"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "OrderItemStatusEnum": {
        "type": "string",
        "enum": [
          "NEW",
          "FOUND_ALL",
          "FOUND_PARTIALLY",
          "NOT_FOUND",
          "REPLACED_ALL",
          "CANCELED"
        ]
      },
      "OrderItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "category_name_i18n": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategory_name_i18n": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productVatPercent": {
            "type": "number",
            "description": "One Item VAT %",
            "example": 17
          },
          "productVatValue": {
            "type": "number",
            "description": "One Item Vat Value",
            "example": 4.25
          },
          "weight": {
            "type": "number",
            "description": "One Item weight in gramms",
            "example": 500
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "replaceTypeCode": {
            "nullable": true,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "quantity": {
            "type": "number"
          },
          "sku": {
            "type": "string",
            "maxLength": 64
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "productCode": {
            "type": "string"
          },
          "store_name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "regularPrice": {
            "type": "number",
            "description": "Regular item price",
            "example": 2.25
          },
          "salePrice": {
            "type": "number",
            "description": "Sale item price",
            "example": 2.25
          },
          "price": {
            "type": "number",
            "description": "Saved item price",
            "example": 4.25
          },
          "productId": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "customerId": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerNote": {
            "type": "string"
          },
          "orderTransaction": {
            "$ref": "#/components/schemas/OrderTransactionEntity"
          },
          "orderTransactionId": {
            "type": "string"
          },
          "orderItemStatus": {
            "$ref": "#/components/schemas/OrderItemStatusEnum"
          },
          "isDeposit": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "quantityFound": {
            "type": "number"
          },
          "quantityRefund": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "productVatPercent",
          "productVatValue",
          "weight",
          "replaceTypeCode",
          "store_name_i18n"
        ]
      },
      "OrderTransStatusEnum": {
        "type": "string",
        "enum": [
          "NEW",
          "PAID",
          "PICKING",
          "REPLACEMENT",
          "COMPLETE"
        ]
      },
      "OrderTransactionTypeEnum": {
        "type": "string",
        "enum": [
          "REGULAR",
          "REPLACEMENT"
        ]
      },
      "OrderTransactionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "deliveryFee": {
            "$ref": "#/components/schemas/OrderDeliveryFeeEntity"
          },
          "orderReplacement": {
            "$ref": "#/components/schemas/OrderReplacementEntity"
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "orderId": {
            "type": "string",
            "description": "ID of bringoo order"
          },
          "orderTransactionVoucher": {
            "$ref": "#/components/schemas/OrderTransactionVoucherEntity"
          },
          "orderTransactionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemEntity"
            }
          },
          "totalAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Order transaction price without delivery fee"
          },
          "totalRefund": {
            "type": "number",
            "example": 4.25,
            "description": "Total refund"
          },
          "paymentMethod": {
            "type": "string"
          },
          "checkoutUrl": {
            "type": "string"
          },
          "orderQuantityRequested": {
            "type": "number"
          },
          "orderQuantityFound": {
            "type": "number"
          },
          "payDate": {
            "type": "string"
          },
          "paidAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Amount paid by the customer"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEntity"
          },
          "currencyCode": {
            "type": "string"
          },
          "orderTransactionNumber": {
            "type": "string"
          },
          "orderTransactionStatus": {
            "$ref": "#/components/schemas/OrderTransStatusEnum"
          },
          "orderTransactionType": {
            "$ref": "#/components/schemas/OrderTransactionTypeEnum"
          },
          "initialOrderTransactionWeight": {
            "type": "number",
            "description": "Initial order transaction weight in grams",
            "example": 500
          },
          "actualOrderTransactionWeight": {
            "type": "number",
            "description": "Actual order transaction weight in grams",
            "example": 500
          },
          "isShoppingExperienceGood": {
            "type": "boolean",
            "description": "Is customer shopping experience good"
          }
        },
        "required": [
          "id",
          "isActive",
          "initialOrderTransactionWeight",
          "actualOrderTransactionWeight"
        ]
      },
      "OrderManagerMessageEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "orderId": {
            "type": "string",
            "description": "ID of bringoo order"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          },
          "managerId": {
            "type": "string",
            "description": "ID of bringoo manager who create this comment"
          },
          "message": {
            "type": "string"
          },
          "isHideForStaff": {
            "type": "boolean"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "JobTypeEnum": {
        "type": "string",
        "enum": [
          "PICK",
          "DRIVE"
        ]
      },
      "OrderJobStatusEnum": {
        "type": "string",
        "enum": [
          "NEW",
          "ACCEPTED",
          "PROCESSING",
          "PAYMENT_PENDING",
          "PAUSED",
          "COMPLETE",
          "CANCELED"
        ]
      },
      "JobCancelReasonEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "OrderJobEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobTypeEnum"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/OrderJobStatusEnum"
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "orderId": {
            "type": "string"
          },
          "staff": {
            "$ref": "#/components/schemas/StaffEntity"
          },
          "staffId": {
            "type": "string"
          },
          "acceptDateTime": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "completeDateTime": {
            "type": "string"
          },
          "cancelDateTime": {
            "type": "string"
          },
          "cancelReason": {
            "$ref": "#/components/schemas/JobCancelReasonEntity"
          },
          "cancelReasonCode": {
            "type": "string"
          },
          "cancelDescription": {
            "type": "string"
          },
          "jobNumber": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "OrderAgeVerificationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "ageConfirmVerbally": {
            "type": "boolean"
          },
          "ageConfirmVerballyDateTime": {
            "type": "string"
          },
          "ageConfirmVerballyIssue": {
            "type": "string"
          },
          "ageConfirmVerballyIssueDateTime": {
            "type": "string"
          },
          "idPhotoConfirm": {
            "type": "boolean"
          },
          "idPhotoConfirmDateTime": {
            "type": "string"
          },
          "idPhotoConfirmIssue": {
            "type": "string"
          },
          "idPhotoConfirmIssueDateTime": {
            "type": "string"
          },
          "ageVerified": {
            "type": "boolean"
          },
          "ageVerifiedDateTime": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "OrderAddressEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "orderAddressType": {
            "$ref": "#/components/schemas/AddressTypeEnum"
          },
          "salutation": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "OrderStatusEnum": {
        "type": "string",
        "enum": [
          "NEW",
          "PAYMENT_PENDING",
          "PAYMENT_ERROR",
          "PAYMENT_EXPIRED",
          "PAID",
          "PENDING",
          "READY",
          "PICKING",
          "DELIVERY_STARTED",
          "DELIVERY",
          "SHIPMENT",
          "REJECTED",
          "COMPLETE",
          "COMPLETE_TERMINATION_REFUND",
          "COMPLETE_TERMINATION_NO_REFUND",
          "CANCELED",
          "CANCELED_NO_PRODUCT",
          "CANCELED_BY_MANAGER"
        ]
      },
      "OrderTypeEnum": {
        "type": "string",
        "enum": [
          "DELIVERY",
          "PICKUP",
          "SHIPPING"
        ]
      },
      "OrderPriorityEnum": {
        "type": "string",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH",
          "PREMIUM"
        ]
      },
      "OrderCancelReasonEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "PaymentSystemEnum": {
        "type": "string",
        "enum": [
          "MOLLIE",
          "STRIPE"
        ]
      },
      "RouteEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "keyPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyPointEntity"
            }
          },
          "driverAssigned": {
            "$ref": "#/components/schemas/StaffEntity"
          },
          "driverAssignedId": {
            "type": "string",
            "description": "ID of staff who created this replacement"
          },
          "dateTimeStart": {
            "type": "string"
          },
          "dateTimeEnd": {
            "type": "string"
          },
          "provideComment": {
            "type": "string",
            "maxLength": 500
          },
          "queue": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "isActive",
          "keyPoints",
          "dateTimeStart",
          "dateTimeEnd"
        ]
      },
      "KeyPointTypeEnum": {
        "type": "string",
        "enum": [
          "PICK_UP",
          "DROP_OFF",
          "BREAK_POINT",
          "MOBILITY_REFUEL"
        ]
      },
      "RefuelTypeEnum": {
        "type": "string",
        "enum": [
          "CAR_REFILL",
          "BIKE_REFILL"
        ]
      },
      "KeyPointEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "routeId": {
            "type": "string"
          },
          "route": {
            "$ref": "#/components/schemas/RouteEntity"
          },
          "pointType": {
            "$ref": "#/components/schemas/KeyPointTypeEnum"
          },
          "refuelType": {
            "$ref": "#/components/schemas/RefuelTypeEnum"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "queue": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "routeId",
          "route",
          "pointType",
          "location",
          "queue"
        ]
      },
      "OrderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerId": {
            "type": "string",
            "description": "ID of customer who created this order"
          },
          "customerLanguageCode": {
            "description": "Customer language code",
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "cartId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "orderEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderEventEntity"
            }
          },
          "orderTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderTransactionEntity"
            }
          },
          "managerComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderManagerMessageEntity"
            }
          },
          "initialOrderWeight": {
            "type": "number",
            "description": "Initial order weight in grams",
            "example": 500
          },
          "actualOrderWeight": {
            "type": "number",
            "description": "Actual order weight in grams",
            "example": 500
          },
          "maxWeight": {
            "type": "number",
            "description": "Max order weight in grams",
            "example": 500
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderJobEntity"
            }
          },
          "ageVerification": {
            "$ref": "#/components/schemas/OrderAgeVerificationEntity"
          },
          "ageVerificationId": {
            "type": "string"
          },
          "orderDeliveryAddress": {
            "$ref": "#/components/schemas/OrderAddressEntity"
          },
          "orderDeliveryAddressId": {
            "type": "string"
          },
          "orderBillingAddress": {
            "$ref": "#/components/schemas/OrderAddressEntity"
          },
          "orderBillingAddressId": {
            "type": "string"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderTypeEnum"
          },
          "orderCategory": {
            "$ref": "#/components/schemas/OrderTypeEnum"
          },
          "orderNumber": {
            "type": "string"
          },
          "deliveryDate": {
            "type": "string"
          },
          "deliveryDateTimeFrom": {
            "type": "string"
          },
          "deliveryDateTimeTo": {
            "type": "string"
          },
          "deliveryDuration": {
            "type": "number"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "deliveryComment": {
            "type": "string"
          },
          "messageForShopper": {
            "type": "string"
          },
          "deliveryDestination": {
            "$ref": "#/components/schemas/DeliveryDestinationEnum"
          },
          "isAlcohol": {
            "type": "boolean",
            "description": "Is order contains alcoholic drinks"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isTobacco": {
            "type": "boolean",
            "description": "Is order contains tobacco"
          },
          "isAgeVerified": {
            "type": "boolean",
            "description": "Driver verified age"
          },
          "totalAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Order price without delivery fee"
          },
          "payDate": {
            "type": "string"
          },
          "paidAmount": {
            "type": "number",
            "example": 4.25,
            "description": "Amount paid by the customer"
          },
          "actualDeliveryTime": {
            "type": "string"
          },
          "completeTime": {
            "type": "string"
          },
          "grandTotal": {
            "type": "number",
            "example": 4.25,
            "description": "Order price with delivery fee"
          },
          "totalRefund": {
            "type": "number",
            "example": 4.25,
            "description": "Total refund"
          },
          "receiptNumber": {
            "type": "number"
          },
          "receiptDate": {
            "type": "string"
          },
          "receiptUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "receiptVatUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "type": "string"
          },
          "invoiceDate": {
            "type": "string"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "deliveryPrice": {
            "type": "number",
            "example": 4.25
          },
          "deliveryVatRate": {
            "type": "number",
            "example": 4.25
          },
          "deliveryVatAmount": {
            "type": "number",
            "example": 4.25
          },
          "totalShopAmount": {
            "type": "number",
            "example": 4.25,
            "description": "The sum of the cost of all the products in the shop"
          },
          "ignoredBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "takenBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderPriority": {
            "$ref": "#/components/schemas/OrderPriorityEnum"
          },
          "deliveryDontRing": {
            "type": "boolean"
          },
          "deliveryCallMe": {
            "type": "boolean"
          },
          "deliveryLeaveAtTheDoor": {
            "type": "boolean"
          },
          "orderQuantityRequested": {
            "type": "number"
          },
          "orderQuantityFound": {
            "type": "number"
          },
          "invoiceUrl": {
            "type": "string"
          },
          "cancelDateTime": {
            "type": "string"
          },
          "cancelReason": {
            "$ref": "#/components/schemas/OrderCancelReasonEntity"
          },
          "cancelReasonCode": {
            "type": "string"
          },
          "cancelDescription": {
            "type": "string"
          },
          "cancelByManagerId": {
            "type": "string"
          },
          "deliveryDistance": {
            "type": "number"
          },
          "paymentSystem": {
            "description": "Payment system for this order",
            "$ref": "#/components/schemas/PaymentSystemEnum"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hasReplacement": {
            "type": "boolean",
            "description": "Order has any product replacements"
          },
          "replacementCounter": {
            "type": "number"
          },
          "keyPoint": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyPointEntity"
              }
            ]
          }
        },
        "required": [
          "id",
          "isActive",
          "initialOrderWeight",
          "actualOrderWeight",
          "maxWeight",
          "deliveryDestination",
          "isAlcohol",
          "isTobacco",
          "isAgeVerified",
          "deliveryPrice",
          "deliveryVatRate",
          "deliveryVatAmount",
          "totalShopAmount",
          "orderPriority",
          "hasReplacement"
        ]
      },
      "CommissionFeeScaleEnum": {
        "type": "string",
        "enum": [
          "GLOBAL",
          "STORE",
          "CATEGORY",
          "SUBCATEGORY",
          "PRODUCT"
        ]
      },
      "CommissionFeeOrderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "valueTotal": {
            "type": "number",
            "description": "Commission Fee value for the whole order",
            "example": 10
          },
          "order": {
            "$ref": "#/components/schemas/OrderEntity"
          },
          "commissionFeeOrderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommissionFeeOrderItemEntity"
            }
          }
        },
        "required": [
          "id",
          "isActive",
          "orderId",
          "valueTotal"
        ]
      },
      "CommissionFeeOrderItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "commissionFeeOrderId": {
            "type": "string"
          },
          "commissionFeeScale": {
            "$ref": "#/components/schemas/CommissionFeeScaleEnum"
          },
          "percent": {
            "type": "number",
            "description": "Commission Fee percent for one unit of the order item",
            "example": 10
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of units of the order item for commissiom"
          },
          "valuePerUnit": {
            "type": "number",
            "description": "Commission Fee value for one unit of the order item",
            "example": 10
          },
          "value": {
            "type": "number",
            "description": "Commission Fee value for all units of the order item",
            "example": 10
          },
          "orderItem": {
            "$ref": "#/components/schemas/OrderItemEntity"
          },
          "commissionFeeOrder": {
            "$ref": "#/components/schemas/CommissionFeeOrderEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "orderItemId",
          "commissionFeeOrderId",
          "commissionFeeScale",
          "percent",
          "quantity",
          "valuePerUnit",
          "value"
        ]
      },
      "CommissionFeeorderCalculateInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "orderId"
        ]
      },
      "SendResetPasswordEmailInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ManagerTaskMessageEnum": {
        "type": "string",
        "enum": [
          "UNUSUAL_ORDER_TOTAL",
          "UNUSUAL_ALCHOHOL_RATE"
        ]
      },
      "OrderSuspicionDto": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean"
          },
          "taskMessage": {
            "$ref": "#/components/schemas/ManagerTaskMessageEnum"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "result"
        ]
      },
      "ProductSizeDetailedDto": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "Size value",
            "example": 1
          },
          "unitCode": {
            "type": "string",
            "description": "Unit code",
            "example": "LITER"
          },
          "unitName": {
            "type": "string",
            "description": "Translatable unit name",
            "example": "L"
          },
          "label": {
            "type": "string",
            "description": "Compiled size and unit name"
          }
        },
        "required": [
          "size",
          "unitCode",
          "unitName",
          "label"
        ]
      },
      "OrderReplacementItemDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "linkId": {
            "type": "string"
          },
          "ean": {
            "type": "number"
          },
          "imageUrl": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "subcategoryName": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "isDeposit": {
            "type": "boolean"
          },
          "categoryName": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity requested in current order replacement"
          },
          "replacementQuantityRequested": {
            "type": "number",
            "description": "Quantity requested in previous order transaction"
          },
          "replacementQuantityFound": {
            "type": "number",
            "description": "Quantity found in previous order transaction"
          },
          "basePrice": {
            "type": "string"
          },
          "baseSize": {
            "type": "string"
          },
          "baseSizeDetailed": {
            "$ref": "#/components/schemas/ProductSizeDetailedDto"
          },
          "productSizeDetailed": {
            "$ref": "#/components/schemas/ProductSizeDetailedDto"
          },
          "productSize": {
            "type": "string"
          },
          "vatPercent": {
            "type": "number"
          },
          "totalAmount": {
            "type": "string"
          },
          "totalRefund": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "orderReplacementItemStatus": {
            "$ref": "#/components/schemas/OrderReplacementItemStatusEnum"
          },
          "parentId": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "id",
          "linkId",
          "ean",
          "imageUrl",
          "name_i18n",
          "price",
          "subcategoryName",
          "subcategoryCode",
          "categoryName",
          "categoryCode",
          "quantity",
          "replacementQuantityRequested",
          "replacementQuantityFound",
          "basePrice",
          "baseSize",
          "baseSizeDetailed",
          "productSizeDetailed",
          "productSize",
          "vatPercent",
          "totalAmount",
          "totalRefund",
          "weight",
          "orderReplacementItemStatus"
        ]
      },
      "TotalVatDto": {
        "type": "object",
        "properties": {
          "vat": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "vat",
          "value"
        ]
      },
      "OrderReplacementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "create_date": {
            "type": "number",
            "description": "Replacement create date (unix timestamp)"
          },
          "payDate": {
            "type": "number",
            "description": "Date time then order transaction was paid (unix timestamp)"
          },
          "paymentPendingTime": {
            "type": "number",
            "description": "Duration between create date and pay date (in minutes)"
          },
          "expires": {
            "type": "number",
            "description": "Replacement expires (unix timestamp)"
          },
          "attemptsLeft": {
            "type": "number"
          },
          "messageReadDate": {
            "type": "string"
          },
          "messageReadCounter": {
            "type": "number"
          },
          "price": {
            "type": "string"
          },
          "weight": {
            "type": "string",
            "description": "Current weight for this replacement"
          },
          "maxWeight": {
            "type": "string",
            "description": "Max allowed weight for this replacement"
          },
          "isOverload": {
            "type": "boolean"
          },
          "replacementItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReplacementItemDto"
            }
          },
          "totalPlannedRefund": {
            "type": "string",
            "description": "Total refund for the last transaction to be refunded when the order is completed"
          },
          "itemsCount": {
            "type": "number"
          },
          "productsCount": {
            "type": "number"
          },
          "orderReplacementStatus": {
            "$ref": "#/components/schemas/OrderReplacementStatusEnum"
          },
          "orderReplacementNumber": {
            "type": "string"
          },
          "isAlcohol": {
            "type": "boolean"
          },
          "isTobacco": {
            "type": "boolean"
          },
          "isNotForUnderage": {
            "type": "boolean"
          },
          "vatTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalVatDto"
            }
          },
          "totalDeposit": {
            "type": "string"
          },
          "subtotal": {
            "type": "string"
          },
          "totalPrice": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "storeId",
          "create_date",
          "expires",
          "attemptsLeft",
          "messageReadCounter",
          "price",
          "weight",
          "maxWeight",
          "isOverload",
          "replacementItems",
          "totalPlannedRefund",
          "itemsCount",
          "productsCount",
          "orderReplacementStatus",
          "orderReplacementNumber",
          "isAlcohol",
          "isTobacco",
          "isNotForUnderage",
          "vatTotal",
          "totalDeposit",
          "subtotal",
          "totalPrice"
        ]
      },
      "UpdateOrderTagsInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "orderId",
          "tags"
        ]
      },
      "ApplyOrderVoucherInput": {
        "type": "object",
        "properties": {
          "orderTransactionId": {
            "type": "string"
          },
          "voucherCode": {
            "type": "string"
          }
        },
        "required": [
          "orderTransactionId",
          "voucherCode"
        ]
      },
      "VoucherApplyTryDto": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isApplied": {
            "type": "boolean"
          }
        },
        "required": [
          "messages"
        ]
      },
      "ProductRequestDepositEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "itemDepositValueGross": {
            "type": "number",
            "example": 3.55
          },
          "boxDepositValueGross": {
            "type": "number",
            "example": 3.55
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductRequestStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING",
          "APPROVED",
          "REJECTED",
          "CANCELED"
        ]
      },
      "ProductRequestEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "requestCode": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "metaData": {
            "type": "string"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "slug": {
            "type": "string",
            "description": "Unique identifying part of a web address"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age Restriction"
          },
          "isAlcohol": {
            "type": "boolean",
            "description": "Is alcoholic drink"
          },
          "alcoholValue": {
            "type": "number",
            "description": "Alcohol value",
            "example": 4.25
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isBio": {
            "type": "boolean"
          },
          "isFrozen": {
            "type": "boolean"
          },
          "isTobacco": {
            "type": "boolean"
          },
          "isVegan": {
            "type": "boolean"
          },
          "isVegetarian": {
            "type": "boolean"
          },
          "isLactoseFree": {
            "type": "boolean"
          },
          "isGlutenFree": {
            "type": "boolean"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "isPickup": {
            "type": "boolean",
            "default": true
          },
          "isPickAndDrive": {
            "type": "boolean",
            "default": true
          },
          "isOnlineShipment": {
            "type": "boolean",
            "default": true
          },
          "productBrand": {
            "$ref": "#/components/schemas/ProductBrandEntity"
          },
          "productBrandCode": {
            "type": "string"
          },
          "subcategory": {
            "$ref": "#/components/schemas/ProductSubcategoryEntity"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/ProductCategoryEntity"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "type": "number"
          },
          "productUnit": {
            "$ref": "#/components/schemas/ProductUnitEntity"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "nutriScore": {
            "default": "UNKNOWN",
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseUnit": {
            "$ref": "#/components/schemas/ProductUnitEntity"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number",
            "description": "Default product price",
            "example": 4.25
          },
          "costPrice": {
            "type": "number",
            "description": "Cost product price",
            "example": 4.25
          },
          "chargeTax": {
            "type": "boolean",
            "description": "Charge tax on this product"
          },
          "depositId": {
            "type": "string"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductRequestDepositEntity"
          },
          "vat": {
            "$ref": "#/components/schemas/VatEntity"
          },
          "vatCode": {
            "type": "string"
          },
          "basePriceCoefficient": {
            "type": "number",
            "example": 3.55
          },
          "tags_i18n": {
            "type": "string"
          },
          "manufacturer_i18n": {
            "type": "string"
          },
          "nutritional_data": {
            "$ref": "#/components/schemas/NutritionalDataDto"
          },
          "ingredients_i18n": {
            "type": "string"
          },
          "special_notes_i18n": {
            "type": "string"
          },
          "allergenic_information_i18n": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          },
          "staff": {
            "$ref": "#/components/schemas/StaffEntity"
          },
          "staffNote": {
            "type": "string"
          },
          "managerId": {
            "type": "string"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          },
          "managerNote": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ProductRequestStatusEnum"
          },
          "requestDecisionTime": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "baseUnitCode",
          "staffId",
          "status"
        ]
      },
      "NutritionalDataUpdateInput": {
        "type": "object",
        "properties": {
          "energyTotal": {
            "type": "number",
            "description": "total calories"
          },
          "calories": {
            "type": "number",
            "description": "Calories per 100 g"
          },
          "fatTotal": {
            "type": "number",
            "description": "Total fat"
          },
          "fatSaturates": {
            "type": "number",
            "description": "Fat saturates"
          },
          "carbohydrateTotal": {
            "type": "number",
            "description": "Carbohydrate Total"
          },
          "carbohydrateSugars": {
            "type": "number",
            "description": "Carbohydrate sugars"
          },
          "fibres": {
            "type": "number",
            "description": "Fibres"
          },
          "protein": {
            "type": "number",
            "description": "Protein"
          },
          "salt": {
            "type": "number",
            "description": "Salt"
          }
        },
        "required": [
          "energyTotal",
          "calories",
          "fatTotal",
          "fatSaturates",
          "carbohydrateTotal",
          "carbohydrateSugars",
          "fibres",
          "protein",
          "salt"
        ]
      },
      "I18nInput": {
        "type": "object",
        "properties": {
          "EN": {
            "type": "string",
            "example": ""
          },
          "DE": {
            "type": "string",
            "example": ""
          },
          "FR": {
            "type": "string",
            "example": ""
          }
        },
        "required": [
          "EN"
        ]
      },
      "ProductAttributesGroceryUpdateInput": {
        "type": "object",
        "properties": {
          "isAlcohol": {
            "type": "boolean",
            "description": "Is alcoholic drink"
          },
          "alcoholValue": {
            "type": "number",
            "description": "Alcohol value",
            "example": 4.25
          },
          "isBio": {
            "type": "boolean",
            "description": "is bio product"
          },
          "isFrozen": {
            "type": "boolean",
            "description": "frozen product"
          },
          "isTobacco": {
            "type": "boolean",
            "description": "is tobacco product"
          },
          "isVegan": {
            "type": "boolean",
            "description": "is vegan product"
          },
          "isVegetarian": {
            "type": "boolean",
            "description": "is vegetarian product"
          },
          "isLactoseFree": {
            "type": "boolean",
            "description": "is Lactose Free product"
          },
          "isGlutenFree": {
            "type": "boolean",
            "description": "is Gluten Free product"
          },
          "nutriScore": {
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "nutritional_data": {
            "description": "Nutritional data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NutritionalDataUpdateInput"
              }
            ]
          },
          "ingredients_i18n": {
            "description": "Multi language ingredients",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "allergenic_information_i18n": {
            "description": "Multi language allergenic information",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          }
        },
        "required": [
          "isAlcohol",
          "isBio",
          "isTobacco",
          "isVegan",
          "isVegetarian",
          "isLactoseFree",
          "isGlutenFree",
          "nutriScore",
          "ingredients_i18n"
        ]
      },
      "ProductAttributesHardwareUpdateInput": {
        "type": "object",
        "properties": {
          "width": {
            "type": "number",
            "description": "Product width in cm",
            "example": 20
          },
          "height": {
            "type": "number",
            "description": "Product height in cm",
            "example": 20
          },
          "length": {
            "type": "number",
            "description": "Product length in cm",
            "example": 20
          }
        }
      },
      "ProductDepositUpdateInput": {
        "type": "object",
        "properties": {
          "itemVatCode": {
            "type": "string"
          },
          "itemDepositValueGross": {
            "type": "number",
            "example": 3.55
          },
          "boxVatCode": {
            "type": "string"
          },
          "boxDepositValueGross": {
            "type": "number",
            "example": 3.55
          }
        }
      },
      "ProductRequestApproveInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age restriction"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "type": "number"
          },
          "productType": {
            "example": "GROCERY",
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "nutriScore": {
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number"
          },
          "costPrice": {
            "type": "number"
          },
          "chargeTax": {
            "type": "boolean"
          },
          "vatCode": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isPickAndDrive": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositUpdateInput"
          },
          "tags_i18n": {
            "description": "Multi language tags",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "manufacturer_i18n": {
            "description": "Multi language manufacturer info",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "special_notes_i18n": {
            "description": "Multi language special notes",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "metaData": {
            "type": "object",
            "description": "Meta Data"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "oneOf": [
              {
                "title": "ProductAttributesGroceryUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesGroceryUpdateInput"
              },
              {
                "title": "ProductAttributesHardwareUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesHardwareUpdateInput"
              }
            ],
            "description": "Product attributes"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "code": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "staffNote": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "managerNote": {
            "type": "string"
          }
        }
      },
      "ProductRequestRejectInput": {
        "type": "object",
        "properties": {
          "managerNote": {
            "type": "string"
          }
        }
      },
      "UserGroupEnum": {
        "type": "string",
        "enum": [
          "manager",
          "staff",
          "customer"
        ]
      },
      "PushNotificationCustomCreateInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "title"
          },
          "body": {
            "type": "string",
            "example": "body"
          },
          "userGroup": {
            "example": "customer",
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sendDate": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMin": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMax": {
            "type": "string",
            "example": "2023-05-25"
          }
        },
        "required": [
          "title",
          "body",
          "userGroup"
        ]
      },
      "PushNotificationHistoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "description": "Payload",
            "example": {}
          },
          "markedAsReaded": {
            "type": "boolean"
          },
          "markedAsDeleted": {
            "type": "boolean"
          },
          "createDateTime": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "deviceId",
          "userId",
          "userGroup",
          "title",
          "body",
          "data",
          "markedAsReaded",
          "markedAsDeleted"
        ]
      },
      "PushNotificationHistoryMarkInput": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids"
        ]
      },
      "PushNotificationSubscriptionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "token": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "activeDate": {
            "type": "string"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "token",
          "userId",
          "userGroup",
          "activeDate"
        ]
      },
      "PushNotificationSubscriptionRefreshInput": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "example": "jhdi-dssd-fdcv"
          }
        }
      },
      "CreateCartFromOrderForCustomerInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "customerId"
        ]
      },
      "CreateCartFromShoppingListForCustomerInput": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          }
        },
        "required": [
          "listId",
          "customerId"
        ]
      },
      "SmsMessageInput": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "isVoice": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "userId",
          "message",
          "isVoice"
        ]
      },
      "SmsMessageCodeEnum": {
        "type": "string",
        "enum": [
          "PAYMENT_LINK",
          "PPODUCT_REPLACEMENT_CREATED"
        ]
      },
      "SmsTemplateDto": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "isVoice": {
            "type": "boolean"
          },
          "code": {
            "$ref": "#/components/schemas/SmsMessageCodeEnum"
          }
        },
        "required": [
          "body",
          "isVoice",
          "code"
        ]
      },
      "PageableSmsTemplateDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmsTemplateDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "DeviceLocationDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          },
          "updateTime": {
            "format": "date-time",
            "type": "string"
          },
          "deviceId": {
            "type": "string",
            "example": "jhdi-dssd-fdcv"
          }
        },
        "required": [
          "lat",
          "lng",
          "updateTime",
          "deviceId"
        ]
      },
      "StaffLocationLiveMapDto": {
        "type": "object",
        "properties": {
          "staffId": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceLocationDto"
            }
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "staffNumber": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/StaffRoleEnum"
          }
        },
        "required": [
          "staffId",
          "locations",
          "firstName",
          "lastName",
          "staffNumber",
          "role"
        ]
      },
      "TimeSlotDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of orders that can be created in this slot"
          },
          "available": {
            "type": "number",
            "description": "Number of orders that can be created in this slot"
          },
          "booked": {
            "type": "number",
            "description": "Number of orders that already created in this slot"
          },
          "bookedPercent": {
            "type": "number"
          },
          "isCustom": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "tz": {
            "type": "string"
          },
          "dateTimeStart": {
            "type": "number"
          },
          "dateTimeEnd": {
            "type": "number"
          },
          "time": {
            "type": "string"
          },
          "dateString": {
            "type": "string"
          },
          "duration": {
            "type": "number",
            "description": "Duration in minutes"
          },
          "deliveryFee": {
            "type": "string"
          }
        },
        "required": [
          "total",
          "available",
          "booked",
          "bookedPercent",
          "isCustom",
          "isActive",
          "tz",
          "dateTimeStart",
          "dateTimeEnd",
          "time",
          "dateString",
          "duration",
          "deliveryFee"
        ]
      },
      "StoreSchedulerDayDto": {
        "type": "object",
        "properties": {
          "weekDay": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSlotDto"
            }
          },
          "totalOrders": {
            "type": "number",
            "description": "Total number of orders that can be created in this day"
          },
          "bookedOrders": {
            "type": "number",
            "description": "Total number of orders that is booked for this day"
          },
          "storeIsClosed": {
            "type": "boolean"
          }
        },
        "required": [
          "weekDay",
          "date",
          "slots",
          "totalOrders",
          "bookedOrders",
          "storeIsClosed"
        ]
      },
      "CreateReservationInput": {
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "number"
          },
          "customerId": {
            "type": "string"
          }
        },
        "required": [
          "deliveryDate",
          "customerId"
        ]
      },
      "ManagerTaskTypeEnum": {
        "type": "string",
        "enum": [
          "SUSPICIOUS_ORDER",
          "OTHER"
        ]
      },
      "ManagerTaskDataDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "orderTransactionId": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderTransactionNumber": {
            "type": "string"
          },
          "alcoholRate": {
            "type": "number"
          },
          "totalCost": {
            "type": "number"
          },
          "deliveryDateTimeFrom": {
            "type": "string"
          }
        }
      },
      "ManagerTaskEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "managerId": {
            "type": "string"
          },
          "taskType": {
            "example": "OTHER",
            "$ref": "#/components/schemas/ManagerTaskTypeEnum"
          },
          "isDone": {
            "type": "boolean"
          },
          "body_i18n": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ManagerTaskDataDto"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          }
        },
        "required": [
          "id",
          "taskType",
          "isDone"
        ]
      },
      "ManagerTaskCreateInput": {
        "type": "object",
        "properties": {
          "taskType": {
            "$ref": "#/components/schemas/ManagerTaskTypeEnum"
          },
          "body_i18n": {
            "description": "Multi language body",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "data": {
            "type": "object",
            "example": {}
          }
        },
        "required": [
          "taskType",
          "body_i18n",
          "data"
        ]
      },
      "ManagerTaskFromTemplateCreateInput": {
        "type": "object",
        "properties": {
          "taskType": {
            "$ref": "#/components/schemas/ManagerTaskTypeEnum"
          },
          "taskMessage": {
            "$ref": "#/components/schemas/ManagerTaskMessageEnum"
          },
          "data": {
            "type": "object",
            "example": {}
          }
        },
        "required": [
          "taskType",
          "taskMessage",
          "data"
        ]
      },
      "ManagerTaskMarkDoneInput": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids"
        ]
      },
      "VoucherCodeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "DashboardDto": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "number"
          },
          "averageSales": {
            "type": "number"
          },
          "ordersCount": {
            "type": "number"
          },
          "transactionsCount": {
            "type": "number"
          },
          "ordersValue": {
            "type": "number"
          },
          "ordersCanceled": {
            "type": "number"
          },
          "abandonedCartsCount": {
            "type": "number"
          },
          "abandonedCartsValue": {
            "type": "number"
          },
          "newCustomers": {
            "type": "number"
          },
          "newGuest": {
            "type": "number"
          }
        },
        "required": [
          "sales",
          "averageSales",
          "ordersCount",
          "transactionsCount",
          "ordersValue",
          "ordersCanceled",
          "abandonedCartsCount",
          "abandonedCartsValue",
          "newCustomers",
          "newGuest"
        ]
      },
      "DashboardStackedChartItemDto": {
        "type": "object",
        "properties": {
          "orderStatus": {
            "description": "Order status",
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "value": {
            "type": "number",
            "description": "Count"
          }
        },
        "required": [
          "orderStatus",
          "value"
        ]
      },
      "OrderCountersDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardStackedChartItemDto"
            }
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "items",
          "label"
        ]
      },
      "OrderForecastDto": {
        "type": "object",
        "properties": {
          "currentWeekCounters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCountersDto"
            }
          },
          "previousWeekCounters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCountersDto"
            }
          }
        },
        "required": [
          "currentWeekCounters",
          "previousWeekCounters"
        ]
      },
      "OrdersByHoursDto": {
        "type": "object",
        "properties": {
          "ordersByHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCountersDto"
            }
          }
        },
        "required": [
          "ordersByHours"
        ]
      },
      "ManagerProfileDto": {
        "type": "object",
        "properties": {
          "managerLanguageCode": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "managerNumber": {
            "type": "string"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "placeOfBirth": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "isTempPasswordExist": {
            "type": "boolean"
          }
        },
        "required": [
          "managerLanguageCode",
          "role",
          "email",
          "firstName",
          "managerNumber",
          "isEmailVerified",
          "lastName",
          "isTempPasswordExist"
        ]
      },
      "ManagerProfileUpdateInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "Depp@brooksfleet.com"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1980-01-25"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "nationalityCode": {
            "type": "string"
          },
          "managerLanguageCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          }
        },
        "required": [
          "phoneCountryCode",
          "phoneNumber"
        ]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "streets": {
            "deprecated": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryEntity"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          }
        },
        "required": [
          "id",
          "isActive",
          "streets",
          "zipCode",
          "city",
          "countryCode"
        ]
      },
      "StoreLoyaltyProgramDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "description"
        ]
      },
      "StoreDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "deliveryTimeInMinutes": {
            "type": "number"
          },
          "deliveryFee": {
            "type": "string"
          },
          "deliveryPrice": {
            "type": "number"
          },
          "distance": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isDelivery": {
            "type": "boolean"
          },
          "isInstantDelivery": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "logoUrl": {
            "type": "string"
          },
          "rectLogoUrl": {
            "type": "string"
          },
          "heroImgUrl": {
            "type": "string"
          },
          "promoImgUrl": {
            "type": "string"
          },
          "landingImgUrl": {
            "type": "string"
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "navbarColor": {
            "type": "string"
          },
          "name_public_long_i18n": {
            "type": "string"
          },
          "name_public_short_i18n": {
            "type": "string"
          },
          "openingTime": {
            "type": "string"
          },
          "vendorType": {
            "$ref": "#/components/schemas/VendorTypeEntity"
          },
          "isOpen": {
            "type": "boolean"
          },
          "deliveryDate": {
            "type": "number"
          },
          "timeZone": {
            "type": "string"
          },
          "loyaltyPrograms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreLoyaltyProgramDto"
            }
          },
          "replacementAllowed": {
            "type": "boolean",
            "description": "The store have product replacement or not",
            "example": true
          },
          "isStartPickJobWithoutDriverAllowed": {
            "type": "boolean",
            "description": "Piker can start work without driver",
            "example": true
          }
        },
        "required": [
          "address",
          "addresses",
          "streetName",
          "streetNumber",
          "id",
          "code",
          "isPickup",
          "isDelivery",
          "isInstantDelivery",
          "isOnlineShipment",
          "logoUrl",
          "name_public_long_i18n",
          "name_public_short_i18n",
          "openingTime",
          "vendorType",
          "isOpen",
          "timeZone"
        ]
      },
      "ShoppingListTypeEnum": {
        "type": "string",
        "enum": [
          "PURCHASED_PRODUCTS",
          "CUSTOM"
        ]
      },
      "ShoppingListBaseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "listType": {
            "$ref": "#/components/schemas/ShoppingListTypeEnum"
          }
        },
        "required": [
          "id",
          "storeId",
          "customerId",
          "listType"
        ]
      },
      "CartItemChangeTypeEnum": {
        "type": "string",
        "enum": [
          "PRICE",
          "COUNT",
          "DELETED"
        ]
      },
      "CartItemDto": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "subcategoryName": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "baseSize": {
            "type": "string",
            "deprecated": true
          },
          "baseSizeDetailed": {
            "$ref": "#/components/schemas/ProductSizeDetailedDto"
          },
          "productSize": {
            "type": "string",
            "deprecated": true
          },
          "productSizeDetailed": {
            "$ref": "#/components/schemas/ProductSizeDetailedDto"
          },
          "vatPercent": {
            "type": "number"
          },
          "vat": {
            "type": "string"
          },
          "isCustomAgeRestriction": {
            "type": "boolean"
          },
          "ageRestriction": {
            "type": "number"
          },
          "isAlcohol": {
            "type": "boolean",
            "deprecated": true
          },
          "isBio": {
            "type": "boolean",
            "description": "is bio product",
            "deprecated": true
          },
          "isFrozen": {
            "type": "boolean",
            "description": "frozen product",
            "deprecated": true
          },
          "isTobacco": {
            "type": "boolean",
            "description": "is tobacco product",
            "deprecated": true
          },
          "isVegan": {
            "type": "boolean",
            "description": "is vegan product",
            "deprecated": true
          },
          "isVegetarian": {
            "type": "boolean",
            "description": "is vegetarian product",
            "deprecated": true
          },
          "isLactoseFree": {
            "type": "boolean",
            "description": "is Lactose Free product",
            "deprecated": true
          },
          "isGlutenFree": {
            "type": "boolean",
            "description": "is Gluten Free product",
            "deprecated": true
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "productId": {
            "type": "string"
          },
          "linkId": {
            "type": "string"
          },
          "discount": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "salePrice": {
            "type": "string"
          },
          "regularPrice": {
            "type": "string"
          },
          "inCart": {
            "type": "number",
            "description": "The number of products in the user's cart"
          },
          "inShoppingList": {
            "type": "boolean",
            "description": "The product is in one of the customer shopping lists"
          },
          "shoppingLists": {
            "description": "Shopping lists containing this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingListBaseDto"
            }
          },
          "basePrice": {
            "type": "string"
          },
          "outOfStock": {
            "type": "boolean"
          },
          "cartItemId": {
            "type": "string"
          },
          "cartId": {
            "type": "string"
          },
          "hasDeposit": {
            "type": "boolean"
          },
          "replaceTypeCode": {
            "nullable": true,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "totalAmount": {
            "type": "string",
            "description": "price * inCart"
          },
          "changeType": {
            "$ref": "#/components/schemas/CartItemChangeTypeEnum"
          },
          "changeText": {
            "type": "string",
            "example": "The price of the product has increased"
          },
          "customerNote": {
            "type": "string",
            "maxLength": 300
          },
          "weight": {
            "type": "number",
            "description": "Weight in grams"
          }
        },
        "required": [
          "imageUrl",
          "name_i18n",
          "subcategoryName",
          "subcategoryCode",
          "categoryCode",
          "baseSize",
          "baseSizeDetailed",
          "productSize",
          "productSizeDetailed",
          "vatPercent",
          "vat",
          "isCustomAgeRestriction",
          "isAlcohol",
          "productType",
          "productId",
          "linkId",
          "price",
          "regularPrice",
          "inCart",
          "inShoppingList",
          "shoppingLists",
          "basePrice",
          "outOfStock",
          "cartItemId",
          "cartId",
          "hasDeposit",
          "replaceTypeCode",
          "totalAmount",
          "customerNote",
          "weight"
        ]
      },
      "CartDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "itemsCount": {
            "type": "number"
          },
          "weight": {
            "type": "string"
          },
          "maxWeight": {
            "type": "string"
          },
          "isOverload": {
            "type": "boolean"
          },
          "productsCount": {
            "type": "number"
          },
          "store": {
            "$ref": "#/components/schemas/StoreDto"
          },
          "cartCode": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemDto"
            }
          },
          "changedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemDto"
            }
          },
          "replaceTypeCode": {
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "isAlcohol": {
            "type": "boolean"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Product need age verification"
          },
          "isTobacco": {
            "type": "boolean"
          },
          "isNotForUnderage": {
            "type": "boolean"
          },
          "vatTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalVatDto"
            }
          },
          "totalDeposit": {
            "type": "string"
          },
          "subtotal": {
            "type": "string"
          },
          "totalPrice": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          }
        },
        "required": [
          "id",
          "price",
          "itemsCount",
          "weight",
          "maxWeight",
          "isOverload",
          "productsCount",
          "store",
          "cartCode",
          "items",
          "changedItems",
          "replaceTypeCode",
          "isAlcohol",
          "isCustomAgeRestriction",
          "ageRestriction",
          "isTobacco",
          "isNotForUnderage",
          "vatTotal",
          "totalDeposit",
          "subtotal",
          "totalPrice"
        ]
      },
      "LanguageCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "default": "EN",
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "locale": {
            "default": "en_US",
            "$ref": "#/components/schemas/Iso15897Enum"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "locale"
        ]
      },
      "LanguageUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "default": "EN",
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "locale": {
            "default": "en_US",
            "$ref": "#/components/schemas/Iso15897Enum"
          }
        },
        "required": [
          "code",
          "locale"
        ]
      },
      "InputError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "property": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "property"
        ]
      },
      "ImportErrorDto": {
        "type": "object",
        "properties": {
          "target": {
            "type": "object",
            "description": "Input value"
          },
          "errors": {
            "description": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputError"
            }
          }
        },
        "required": [
          "target",
          "errors"
        ]
      },
      "ImportDto": {
        "type": "object",
        "properties": {
          "keys": {
            "description": "Input object keys",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "description": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportErrorDto"
            }
          },
          "isValid": {
            "type": "boolean",
            "description": "Number of rows with errors"
          },
          "errorCount": {
            "type": "number",
            "description": "Number of rows with errors"
          },
          "successCount": {
            "type": "number",
            "description": "Total imported rows count"
          },
          "totalCount": {
            "type": "number",
            "description": "Total rows count"
          }
        },
        "required": [
          "keys",
          "errors",
          "isValid",
          "errorCount",
          "successCount",
          "totalCount"
        ]
      },
      "ChangePrimaryInput": {
        "type": "object",
        "properties": {
          "lang": {
            "$ref": "#/components/schemas/LangCodeEnum"
          }
        },
        "required": [
          "lang"
        ]
      },
      "StoreCategorySortDto": {
        "type": "object",
        "properties": {
          "storeCategorySortId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string",
            "description": "Multi language category name"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code"
          },
          "vendorCategoryCode": {
            "type": "string",
            "description": "Category code"
          },
          "order": {
            "type": "number",
            "description": "Sorting order"
          }
        },
        "required": [
          "storeCategorySortId",
          "name_i18n",
          "categoryCode",
          "vendorCategoryCode",
          "order"
        ]
      },
      "ChangeOrderInput": {
        "type": "object",
        "properties": {
          "sourceId": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          }
        },
        "required": [
          "sourceId",
          "targetId"
        ]
      },
      "ProductPriceViewEntity": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "product_category_name_i18n": {
            "type": "string"
          },
          "product_subcategory_name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "imageUrl": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "linkId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "defaultPrice": {
            "type": "number"
          },
          "isCustomAgeRestriction": {
            "type": "boolean"
          },
          "ageRestriction": {
            "type": "number"
          },
          "isFairTrade": {
            "type": "boolean"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "ean": {
            "type": "number"
          },
          "sku": {
            "type": "number"
          },
          "regularPrice": {
            "type": "number"
          },
          "salePrice": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "depositId": {
            "type": "string"
          },
          "productAttributesId": {
            "type": "string"
          },
          "productVatPercent": {
            "type": "number"
          },
          "productValueGross": {
            "type": "number"
          },
          "productValueNet": {
            "type": "number"
          },
          "productVatValue": {
            "type": "number"
          },
          "basePrice": {
            "type": "number"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "productMeasurement": {
            "type": "number"
          },
          "fts_german": {
            "type": "string"
          },
          "fts_english": {
            "type": "string"
          },
          "outOfStock": {
            "type": "boolean"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          }
        }
      },
      "StoreSubcategorySortDto": {
        "type": "object",
        "properties": {
          "storeSubcategorySortId": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string",
            "description": "Multi language subcategory name"
          },
          "subcategoryCode": {
            "type": "string",
            "description": "Subcategory code"
          },
          "order": {
            "type": "number",
            "description": "Sorting order"
          }
        },
        "required": [
          "storeSubcategorySortId",
          "name_i18n",
          "subcategoryCode",
          "order"
        ]
      },
      "FindUnusedLoyaltyProgramsInput": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "limit",
          "page"
        ]
      },
      "CorporateCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "CorporateUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        }
      },
      "OutOfStockCreateInput": {
        "type": "object",
        "properties": {
          "productLinkId": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-12-25"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "productLinkId",
          "startDateTime",
          "endDateTime"
        ]
      },
      "OutOfStockUpdateInput": {
        "type": "object",
        "properties": {
          "isOutOfStock": {
            "type": "boolean"
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-12-25"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "isOutOfStock",
          "startDateTime",
          "endDateTime"
        ]
      },
      "ProductBrandCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "imageUrl": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "ProductBrandUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "ProductCategoryCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "imageUrl": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "imageUrl",
          "slug",
          "vendorCategoryCode"
        ]
      },
      "ProductCategoryUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "imageUrl": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        }
      },
      "ProductLinkCreateInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "productId",
          "storeId"
        ]
      },
      "ProductLinkMultipleCreateInput": {
        "type": "object",
        "properties": {
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "productIds",
          "storeId"
        ]
      },
      "ProductLinkUpdateInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "productId",
          "storeId"
        ]
      },
      "ProductPriceRequestEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "newPrice": {
            "type": "number",
            "description": "New price",
            "example": 4.25
          },
          "type": {
            "$ref": "#/components/schemas/PriceTypeEnum"
          },
          "imageUrl": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          },
          "staff": {
            "$ref": "#/components/schemas/StaffEntity"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "staffId"
        ]
      },
      "ProductPriceCreateInput": {
        "type": "object",
        "properties": {
          "type": {
            "example": "REGULAR",
            "$ref": "#/components/schemas/PriceTypeEnum"
          },
          "productLinkId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "price": {
            "type": "number"
          },
          "vatCode": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "productLinkId",
          "dateStart",
          "dateEnd",
          "price",
          "vatCode"
        ]
      },
      "ProductPriceUpdateInput": {
        "type": "object",
        "properties": {
          "type": {
            "example": "REGULAR",
            "$ref": "#/components/schemas/PriceTypeEnum"
          },
          "productLinkId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "price": {
            "type": "number"
          },
          "vatCode": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        }
      },
      "ProductRequestInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age restriction"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "type": "number"
          },
          "productType": {
            "example": "GROCERY",
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "nutriScore": {
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number"
          },
          "costPrice": {
            "type": "number"
          },
          "chargeTax": {
            "type": "boolean"
          },
          "vatCode": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isPickAndDrive": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositUpdateInput"
          },
          "tags_i18n": {
            "description": "Multi language tags",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "manufacturer_i18n": {
            "description": "Multi language manufacturer info",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "special_notes_i18n": {
            "description": "Multi language special notes",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "metaData": {
            "type": "object",
            "description": "Meta Data"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "oneOf": [
              {
                "title": "ProductAttributesGroceryUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesGroceryUpdateInput"
              },
              {
                "title": "ProductAttributesHardwareUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesHardwareUpdateInput"
              }
            ],
            "description": "Product attributes"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "code": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "staffNote": {
            "type": "string"
          }
        }
      },
      "ProductSubcategoryCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "categoryCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "categoryCode",
          "slug"
        ]
      },
      "ProductSubcategoryUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "categoryCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          }
        }
      },
      "ProductUnitCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "minLength": 2,
            "maxLength": 50,
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "ProductUnitUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "minLength": 2,
            "maxLength": 50,
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          }
        }
      },
      "FindUnlinkedProductsInput": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productTags": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "limit",
          "page"
        ]
      },
      "NutritionalDataCreateInput": {
        "type": "object",
        "properties": {
          "energyTotal": {
            "type": "number",
            "description": "total calories"
          },
          "calories": {
            "type": "number",
            "description": "Calories per 100 g"
          },
          "fatTotal": {
            "type": "number",
            "description": "Total fat"
          },
          "fatSaturates": {
            "type": "number",
            "description": "Fat saturates"
          },
          "carbohydrateTotal": {
            "type": "number",
            "description": "Carbohydrate Total"
          },
          "carbohydrateSugars": {
            "type": "number",
            "description": "Carbohydrate sugars"
          },
          "fibres": {
            "type": "number",
            "description": "Fibres"
          },
          "protein": {
            "type": "number",
            "description": "Protein"
          },
          "salt": {
            "type": "number",
            "description": "Salt"
          }
        },
        "required": [
          "energyTotal",
          "calories",
          "fatTotal",
          "fatSaturates",
          "carbohydrateTotal",
          "carbohydrateSugars",
          "fibres",
          "protein",
          "salt"
        ]
      },
      "ProductAttributesGroceryCreateInput": {
        "type": "object",
        "properties": {
          "isAlcohol": {
            "type": "boolean",
            "description": "Is alcoholic drink"
          },
          "alcoholValue": {
            "type": "number",
            "description": "Alcohol value",
            "example": 4.25
          },
          "isBio": {
            "type": "boolean",
            "description": "is bio product"
          },
          "isFrozen": {
            "type": "boolean",
            "description": "frozen product"
          },
          "isTobacco": {
            "type": "boolean",
            "description": "is tobacco product"
          },
          "isVegan": {
            "type": "boolean",
            "description": "is vegan product"
          },
          "isVegetarian": {
            "type": "boolean",
            "description": "is vegetarian product"
          },
          "isLactoseFree": {
            "type": "boolean",
            "description": "is Lactose Free product"
          },
          "isGlutenFree": {
            "type": "boolean",
            "description": "is Gluten Free product"
          },
          "nutriScore": {
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "nutritional_data": {
            "description": "Nutritional data",
            "allOf": [
              {
                "$ref": "#/components/schemas/NutritionalDataCreateInput"
              }
            ]
          },
          "ingredients_i18n": {
            "description": "Multi language ingredients",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "allergenic_information_i18n": {
            "description": "Multi language allergenic information",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          }
        },
        "required": [
          "isAlcohol",
          "isBio",
          "isFrozen",
          "isTobacco",
          "isVegan",
          "isVegetarian",
          "isLactoseFree",
          "isGlutenFree",
          "nutriScore",
          "ingredients_i18n"
        ]
      },
      "ProductAttributesHardwareCreateInput": {
        "type": "object",
        "properties": {
          "width": {
            "type": "number",
            "description": "Product width in cm",
            "example": 20
          },
          "height": {
            "type": "number",
            "description": "Product height in cm",
            "example": 20
          },
          "length": {
            "type": "number",
            "description": "Product length in cm",
            "example": 20
          }
        }
      },
      "ProductDepositCreateInput": {
        "type": "object",
        "properties": {
          "itemVatCode": {
            "type": "string"
          },
          "itemDepositValueGross": {
            "type": "number",
            "example": 3.55
          },
          "boxVatCode": {
            "type": "string"
          },
          "boxDepositValueGross": {
            "type": "number",
            "example": 3.55
          }
        },
        "required": [
          "itemVatCode",
          "boxVatCode"
        ]
      },
      "ProductCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Product need age verification"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "type": "number",
            "description": "Product weight in grams"
          },
          "productType": {
            "example": "GROCERY",
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number"
          },
          "costPrice": {
            "type": "number"
          },
          "chargeTax": {
            "type": "boolean"
          },
          "vatCode": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isPickAndDrive": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositCreateInput"
          },
          "tags_i18n": {
            "description": "Multi language tags",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "manufacturer_i18n": {
            "description": "Multi language manufacturer info",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "special_notes_i18n": {
            "description": "Multi language special notes",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "metaData": {
            "type": "object",
            "description": "Meta Data"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "oneOf": [
              {
                "title": "ProductAttributesGroceryCreateInput",
                "$ref": "#/components/schemas/ProductAttributesGroceryCreateInput"
              },
              {
                "title": "ProductAttributesHardwareCreateInput",
                "$ref": "#/components/schemas/ProductAttributesHardwareCreateInput"
              }
            ],
            "description": "Product attributes"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "gtin",
          "sku",
          "ean",
          "slug",
          "isCustomAgeRestriction",
          "ageRestriction",
          "isApproved",
          "isPublic",
          "productSubcategoryCode",
          "productCategoryCode",
          "imageUrls",
          "weight",
          "productType",
          "productUnitCode",
          "baseUnitCode",
          "productMeasurement",
          "baseMeasurement",
          "defaultPrice",
          "chargeTax",
          "vatCode",
          "isPickup",
          "isPickAndDrive",
          "isOnlineShipment",
          "manufacturer_i18n",
          "special_notes_i18n",
          "isConsultationRecommended"
        ]
      },
      "ProductUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "note_internal": {
            "type": "string"
          },
          "note_external": {
            "type": "string"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Age restriction"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Approved to be published"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "isPublicDateTime": {
            "type": "string",
            "description": "visible from"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "type": "number"
          },
          "productType": {
            "example": "GROCERY",
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "nutriScore": {
            "$ref": "#/components/schemas/NutriScoreEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number"
          },
          "costPrice": {
            "type": "number"
          },
          "chargeTax": {
            "type": "boolean"
          },
          "vatCode": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isPickAndDrive": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositUpdateInput"
          },
          "tags_i18n": {
            "description": "Multi language tags",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "manufacturer_i18n": {
            "description": "Multi language manufacturer info",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "special_notes_i18n": {
            "description": "Multi language special notes",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "metaData": {
            "type": "object",
            "description": "Meta Data"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "oneOf": [
              {
                "title": "ProductAttributesGroceryUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesGroceryUpdateInput"
              },
              {
                "title": "ProductAttributesHardwareUpdateInput",
                "$ref": "#/components/schemas/ProductAttributesHardwareUpdateInput"
              }
            ],
            "description": "Product attributes"
          },
          "ean": {
            "type": "number",
            "description": "European Article Number"
          },
          "code": {
            "type": "string"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          }
        }
      },
      "ProductUpdateManyInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "isAlcohol": {
            "type": "boolean",
            "description": "Is alcoholic drink"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Product need age verification"
          },
          "isPublic": {
            "type": "boolean",
            "description": "visible on backend"
          },
          "isBio": {
            "type": "boolean",
            "description": "is bio product"
          },
          "isTobacco": {
            "type": "boolean",
            "description": "is tobacco product"
          },
          "isFrozen": {
            "type": "boolean",
            "description": "frozen product"
          },
          "isVegan": {
            "type": "boolean",
            "description": "is vegan product"
          },
          "isVegetarian": {
            "type": "boolean",
            "description": "is vegetarian product"
          },
          "isLactoseFree": {
            "type": "boolean",
            "description": "is Lactose Free product"
          },
          "isGlutenFree": {
            "type": "boolean",
            "description": "is Gluten Free product"
          },
          "isFairTrade": {
            "type": "boolean",
            "description": "is Fair Trade product"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "productUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "baseUnitCode": {
            "$ref": "#/components/schemas/ProductUnitCodeEnum"
          },
          "productMeasurement": {
            "type": "number"
          },
          "baseMeasurement": {
            "type": "number"
          },
          "defaultPrice": {
            "type": "number"
          },
          "costPrice": {
            "type": "number"
          },
          "chargeTax": {
            "type": "boolean"
          },
          "vatCode": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isPickAndDrive": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "deposit": {
            "$ref": "#/components/schemas/ProductDepositUpdateInput"
          },
          "tags_i18n": {
            "description": "Multi language tags",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "tags_i18n_add": {
            "description": "Multi language tags - add only",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "productType": {
            "example": "GROCERY",
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "isConsultationRecommended": {
            "type": "boolean",
            "description": "Product details must show consultant details"
          },
          "productLegalCode": {
            "type": "string"
          },
          "productAttributes": {
            "oneOf": [
              {
                "title": "ProductAttributesGroceryCreateInput",
                "$ref": "#/components/schemas/ProductAttributesGroceryCreateInput"
              },
              {
                "title": "ProductAttributesHardwareCreateInput",
                "$ref": "#/components/schemas/ProductAttributesHardwareCreateInput"
              }
            ],
            "description": "Product attributes"
          }
        },
        "required": [
          "isCustomAgeRestriction",
          "ageRestriction",
          "productType"
        ]
      },
      "StoreAddressTypeEnum": {
        "type": "string",
        "enum": [
          "MAIN",
          "SECONDARY",
          "WAREHOUSE",
          "OTHER"
        ]
      },
      "StoreAddressCreateInput": {
        "type": "object",
        "properties": {
          "addressType": {
            "$ref": "#/components/schemas/StoreAddressTypeEnum"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "gln": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string",
            "example": "1"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          }
        },
        "required": [
          "addressType",
          "countryCode",
          "city",
          "zipCode",
          "storeId"
        ]
      },
      "StoreAddressUpdateInput": {
        "type": "object",
        "properties": {
          "addressType": {
            "$ref": "#/components/schemas/StoreAddressTypeEnum"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "gln": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string",
            "example": "1"
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          }
        }
      },
      "StoreBrandCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "corporateCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "StoreBrandUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "corporateCode": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "CategoriesAndGroupsTemplateEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "subcategory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSubcategoryEntity"
            }
          },
          "subcategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "CategoriesAndGroupsTemplateCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "subcategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "subcategoryCodes"
        ]
      },
      "StoreConsultantEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "description": {
            "type": "string"
          },
          "productTypes": {
            "type": "array",
            "description": "The consultant can give advice on products of this type",
            "items": {
              "$ref": "#/components/schemas/ProductTypeEnum"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreConsultantCreateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Snow"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@metro.de"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 300
          },
          "productTypes": {
            "type": "array",
            "example": [
              "GROCERY"
            ],
            "description": "The consultant can give advice on products of this type",
            "items": {
              "$ref": "#/components/schemas/ProductTypeEnum"
            }
          },
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "storeId",
          "productTypes",
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd"
        ]
      },
      "StoreConsultantUpdateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Snow"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@metro.de"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 300
          },
          "productTypes": {
            "type": "array",
            "example": [
              "GROCERY"
            ],
            "description": "The consultant can give advice on products of this type",
            "items": {
              "$ref": "#/components/schemas/ProductTypeEnum"
            }
          },
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        }
      },
      "StoreContactCreateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Snow"
          },
          "contactType": {
            "example": "MANAGER",
            "$ref": "#/components/schemas/StoreContactTypeEnum"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@metro.de"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "description": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "firstName",
          "lastName",
          "contactType",
          "email",
          "storeId",
          "countryCode",
          "city",
          "zipCode"
        ]
      },
      "StoreContactUpdateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Snow"
          },
          "contactType": {
            "example": "MANAGER",
            "$ref": "#/components/schemas/StoreContactTypeEnum"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@metro.de"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "streetName": {
            "type": "string",
            "example": "Klausingring"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "description": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "contactType"
        ]
      },
      "LoyaltyProgramEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreLoyaltyProgramEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "loyaltyProgramId": {
            "type": "string"
          },
          "loyaltyProgram": {
            "$ref": "#/components/schemas/LoyaltyProgramEntity"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "storeId",
          "loyaltyProgramId"
        ]
      },
      "StoreLoyaltyProgramCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "loyaltyProgramId": {
            "type": "string"
          }
        },
        "required": [
          "storeId",
          "loyaltyProgramId"
        ]
      },
      "StoreLoyaltyProgramManyCreateInput": {
        "type": "object",
        "properties": {
          "loyaltyProgramIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "loyaltyProgramIds",
          "storeId"
        ]
      },
      "StoreLoyaltyProgramUpdateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "LoyaltyProgramId": {
            "type": "string"
          }
        },
        "required": [
          "storeId",
          "LoyaltyProgramId"
        ]
      },
      "StoreRegionCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "countryCode": {
            "$ref": "#/components/schemas/Iso2Enum"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "countryCode"
        ]
      },
      "StoreRegionUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "countryCode": {
            "$ref": "#/components/schemas/Iso2Enum"
          }
        },
        "required": [
          "countryCode"
        ]
      },
      "StoreStaffBoundCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          }
        },
        "required": [
          "storeId",
          "staffId"
        ]
      },
      "StoreStaffBoundUpdateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          }
        },
        "required": [
          "storeId",
          "staffId"
        ]
      },
      "StaffStoreManyCreateInput": {
        "type": "object",
        "properties": {
          "storeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "staffId": {
            "type": "string"
          }
        },
        "required": [
          "storeIds",
          "staffId"
        ]
      },
      "StoreStaffManyCreateInput": {
        "type": "object",
        "properties": {
          "staffIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "staffIds",
          "storeId"
        ]
      },
      "StoreWeightOptionCreateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "weightValue": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "weightValue",
          "storeId"
        ]
      },
      "StoreWeightOptionUpdateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "weightValue": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "weightValue",
          "storeId"
        ]
      },
      "StoreCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_public_short_i18n": {
            "description": "Multi language short name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "name_public_long_i18n": {
            "description": "Multi language long name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "deliveryFeeVatCode": {
            "type": "string"
          },
          "vendorTypeCode": {
            "type": "string"
          },
          "storeRegionCode": {
            "type": "string"
          },
          "vendorCategoryCode": {
            "type": "string"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "corporateCode": {
            "type": "string"
          },
          "storeBrandCode": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "rectLogoUrl": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isDelivery": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "productOutOfStockTime": {
            "type": "number"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "isStartPickJobWithoutDriverAllowed": {
            "type": "boolean"
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Berlin"
          },
          "externalCode": {
            "type": "string",
            "description": "This code is meant to be used to share data between bringoo and partner.",
            "example": "ExternalCode"
          },
          "replacementAllowed": {
            "type": "boolean",
            "description": "The store have product replacement or not.",
            "example": false
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "name_public_short_i18n",
          "name_public_long_i18n",
          "code",
          "deliveryFeeVatCode",
          "vendorTypeCode",
          "storeRegionCode",
          "vendorCategoryCode",
          "currencyCode",
          "isPickup",
          "isDelivery",
          "isOnlineShipment",
          "productOutOfStockTime",
          "slug",
          "replacementAllowed"
        ]
      },
      "StoreUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_public_short_i18n": {
            "description": "Multi language short name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "name_public_long_i18n": {
            "description": "Multi language long name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "deliveryFeeVatCode": {
            "type": "string"
          },
          "vendorTypeCode": {
            "type": "string"
          },
          "vendorCategoryCode": {
            "type": "string"
          },
          "storeRegionCode": {
            "type": "string"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "corporateCode": {
            "type": "string"
          },
          "storeBrandCode": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "rectLogoUrl": {
            "type": "string"
          },
          "heroImgUrl": {
            "type": "string"
          },
          "promoImgUrl": {
            "type": "string"
          },
          "landingImgUrl": {
            "type": "string"
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "navbarColor": {
            "type": "string"
          },
          "isPickup": {
            "type": "boolean"
          },
          "isDelivery": {
            "type": "boolean"
          },
          "isOnlineShipment": {
            "type": "boolean"
          },
          "productOutOfStockTime": {
            "type": "number"
          },
          "slug": {
            "type": "string",
            "description": "The unique identifying part of the web address"
          },
          "pickerRestriction": {
            "$ref": "#/components/schemas/StoreStaffRestrictionEnum"
          },
          "driverRestriction": {
            "$ref": "#/components/schemas/StoreStaffRestrictionEnum"
          },
          "replacementMaxTime": {
            "type": "number",
            "description": "Maximum waiting time for a customer`s response (in seconds) on product replacement"
          },
          "replacementMaxAttempts": {
            "type": "number",
            "description": "Maximum attempts to extend time on product replacement"
          },
          "isStartPickJobWithoutDriverAllowed": {
            "type": "boolean"
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Berlin"
          },
          "externalCode": {
            "type": "string",
            "description": "This code is meant to be used to share data between bringoo and partner.",
            "example": "ExternalCode"
          },
          "replacementAllowed": {
            "type": "boolean",
            "description": "The store have product replacement or not.",
            "example": false
          }
        },
        "required": [
          "name_public_short_i18n",
          "name_public_long_i18n",
          "currencyCode",
          "productOutOfStockTime"
        ]
      },
      "StoreCategoriesInput": {
        "type": "object",
        "properties": {
          "subcategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FindUnboundStoresInput": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "limit",
          "page"
        ]
      },
      "VendorCategoryCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": [
          "name_i18n",
          "isActive"
        ]
      },
      "VendorCategoryUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        }
      },
      "VendorTypeCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": [
          "name_i18n",
          "isActive"
        ]
      },
      "VendorTypeUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        }
      },
      "CurrencyCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "symbol"
        ]
      },
      "CurrencyUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "$ref": "#/components/schemas/CurrencyCodeEnum"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "DepositTypeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "DepositTypeCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "DepositTypeUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        }
      },
      "JobCancelReasonCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "JobCancelReasonUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "OrderManagerMessageCreateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "orderId": {
            "type": "string",
            "description": "Order UUID"
          },
          "managerId": {
            "type": "string",
            "description": "Manager UUID who create this message."
          },
          "message": {
            "type": "string"
          },
          "isHideForStaff": {
            "type": "boolean"
          }
        },
        "required": [
          "isActive"
        ]
      },
      "OrderManagerMessageUpdateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "isHideForStaff": {
            "type": "boolean"
          }
        }
      },
      "OrderCancelReasonCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "description_i18n",
          "isActive",
          "code"
        ]
      },
      "OrderCancelReasonUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "description_i18n",
          "code"
        ]
      },
      "OrderCategoryEnum": {
        "type": "string",
        "enum": [
          "INSTANT_DELIVERY",
          "PRE_ORDERED_DELIVERY",
          "ONLINE_SHIPMENT"
        ]
      },
      "OrderJobTypeEnum": {
        "type": "string",
        "enum": [
          "PICK",
          "DRIVE"
        ]
      },
      "OrderJobDto": {
        "type": "object",
        "properties": {
          "jobType": {
            "$ref": "#/components/schemas/OrderJobTypeEnum"
          },
          "jobStatus": {
            "$ref": "#/components/schemas/OrderJobStatusEnum"
          },
          "jobNumber": {
            "type": "string"
          },
          "staffFirstName": {
            "type": "string"
          },
          "staffLastName": {
            "type": "string"
          },
          "staffNumber": {
            "type": "string",
            "description": "The number of the Staff who accepted this job"
          }
        },
        "required": [
          "jobType",
          "jobStatus",
          "jobNumber"
        ]
      },
      "DeliveryAddressDto": {
        "type": "object",
        "properties": {
          "countryCode": {
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_name_i18n": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "state": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string"
          },
          "apartmentNumber": {
            "type": "string"
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "zipCode",
          "city",
          "country_name_i18n",
          "location"
        ]
      },
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "orderItemId": {
            "type": "string"
          },
          "linkId": {
            "type": "string"
          },
          "ean": {
            "type": "number"
          },
          "sku": {
            "type": "string"
          },
          "replaceTypeCode": {
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          },
          "discount": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "subcategoryName": {
            "type": "string"
          },
          "isDeposit": {
            "type": "boolean"
          },
          "categoryName": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "quantityFound": {
            "type": "number"
          },
          "quantityRefund": {
            "type": "number"
          },
          "totalRefund": {
            "type": "string"
          },
          "basePrice": {
            "type": "string"
          },
          "baseSize": {
            "type": "string"
          },
          "productSize": {
            "type": "string"
          },
          "vatPercent": {
            "type": "number"
          },
          "totalAmount": {
            "type": "string"
          },
          "orderItemStatus": {
            "$ref": "#/components/schemas/OrderItemStatusEnum"
          },
          "weight": {
            "type": "number"
          },
          "orderTransactionNumber": {
            "type": "string"
          },
          "customerNote": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "orderItemId",
          "linkId",
          "ean",
          "sku",
          "replaceTypeCode",
          "name_i18n",
          "price",
          "isDeposit",
          "quantity",
          "quantityFound",
          "quantityRefund",
          "totalRefund",
          "vatPercent",
          "totalAmount",
          "orderItemStatus",
          "weight",
          "orderTransactionNumber"
        ]
      },
      "OrderTransactionStatusEnum": {
        "type": "string",
        "enum": [
          "NEW",
          "PAID",
          "PICKING",
          "REPLACEMENT",
          "COMPLETE"
        ]
      },
      "DeliveryFeeDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "isRefunded": {
            "type": "boolean"
          }
        },
        "required": [
          "value",
          "isRefunded"
        ]
      },
      "OrderTransactionVoucherDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "voucherId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "orderItemsDiscount": {
            "type": "number"
          },
          "deliveryFeeDiscount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "voucherId",
          "code",
          "orderItemsDiscount",
          "deliveryFeeDiscount"
        ]
      },
      "OrderTransactionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orderTransactionStatus": {
            "$ref": "#/components/schemas/OrderTransactionStatusEnum"
          },
          "orderTransactionStatusLabel": {
            "type": "string"
          },
          "orderTransactionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "orderTransactionNumber": {
            "type": "string"
          },
          "totalAmount": {
            "type": "string"
          },
          "totalRefund": {
            "type": "string"
          },
          "isShoppingExperienceGood": {
            "type": "boolean"
          },
          "payDate": {
            "type": "number",
            "description": "Date time then order transaction was paid (unix timestamp)"
          },
          "paymentPendingTime": {
            "type": "number",
            "description": "Duration between create date and pay date (in minutes)"
          },
          "paidAmount": {
            "type": "string",
            "description": "Amount paid by the customer"
          },
          "create_date": {
            "type": "number",
            "description": "unix timestamp"
          },
          "orderTransactionVatTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalVatDto"
            }
          },
          "deliveryFee": {
            "$ref": "#/components/schemas/DeliveryFeeDto"
          },
          "totalDeposit": {
            "type": "string"
          },
          "orderTransactionWeight": {
            "type": "number",
            "description": "Total transaction weight in grams"
          },
          "initialOrderTransactionWeight": {
            "type": "number",
            "description": "Initial transaction weight in grams"
          },
          "actualOrderTransactionWeight": {
            "type": "number",
            "description": "Actual transaction weight in grams"
          },
          "checkoutUrl": {
            "type": "string",
            "description": "Checkout url"
          },
          "orderTransactionType": {
            "$ref": "#/components/schemas/OrderTransactionTypeEnum"
          },
          "orderReplacementId": {
            "type": "string"
          },
          "orderReplacementMessageReadCounter": {
            "type": "number"
          },
          "orderTransactionVoucher": {
            "$ref": "#/components/schemas/OrderTransactionVoucherDto"
          }
        },
        "required": [
          "id",
          "orderTransactionStatus",
          "orderTransactionStatusLabel",
          "orderTransactionItems",
          "orderTransactionNumber",
          "totalAmount",
          "totalRefund",
          "isShoppingExperienceGood",
          "paidAmount",
          "create_date",
          "orderTransactionVatTotal",
          "orderTransactionWeight",
          "initialOrderTransactionWeight",
          "actualOrderTransactionWeight"
        ]
      },
      "OrderDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreDto"
          },
          "deliveryDate": {
            "type": "number",
            "description": "Delivery date"
          },
          "deliveryTimeFrom": {
            "type": "string",
            "description": "Delivery time from",
            "example": "10:00"
          },
          "deliveryTimeTo": {
            "type": "string",
            "description": "Expected delivery time before order is completed.\n    And actual delivery time when the order is completed",
            "example": "11:00"
          },
          "orderNumber": {
            "type": "string"
          },
          "allowCancel": {
            "type": "boolean"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "totalRefund": {
            "type": "string"
          },
          "orderCategory": {
            "$ref": "#/components/schemas/OrderCategoryEnum"
          },
          "orderStatus_i18n": {
            "type": "string"
          },
          "deliveryPrice": {
            "type": "string"
          },
          "subTotal": {
            "type": "string"
          },
          "grandTotal": {
            "type": "string"
          },
          "orderDateTime": {
            "type": "number",
            "description": "unix timestamp"
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderJobDto"
            }
          },
          "hasReplacement": {
            "type": "boolean",
            "description": "True if order has product replacement"
          },
          "hasActiveReplacement": {
            "type": "boolean",
            "description": "True if order has active product replacement"
          },
          "replacementExpires": {
            "type": "number",
            "description": "Replacement expires (unix timestamp)"
          },
          "hasUpdate": {
            "type": "boolean",
            "description": "True if order has active product replacement",
            "deprecated": true
          },
          "paidAmount": {
            "type": "string",
            "description": "Amount paid by the customer"
          },
          "canBeReordered": {
            "type": "boolean"
          },
          "customerName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "invoiceDate": {
            "type": "number"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "totalShopAmount": {
            "type": "string"
          },
          "receiptUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "receiptNumber": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddressDto"
          },
          "deliveryAddressShort": {
            "type": "string"
          },
          "orderItems": {
            "deprecated": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "orderWeight": {
            "type": "number",
            "description": "Total weight in grams"
          },
          "initialOrderWeight": {
            "type": "number",
            "description": "Initial order weight in grams"
          },
          "actualOrderWeight": {
            "type": "number",
            "description": "Actual order weight in grams"
          },
          "totalDeposit": {
            "type": "string"
          },
          "vatTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalVatDto"
            }
          },
          "isAlcohol": {
            "type": "boolean"
          },
          "isCustomAgeRestriction": {
            "type": "boolean",
            "description": "Product need age verification"
          },
          "ageRestriction": {
            "type": "number",
            "description": "Product need age verification"
          },
          "isTobacco": {
            "type": "boolean"
          },
          "isNotForUnderage": {
            "type": "boolean"
          },
          "isAgeVerified": {
            "type": "boolean"
          },
          "orderQuantityRequested": {
            "type": "number",
            "description": "Products quantity in customer cart"
          },
          "orderQuantityFound": {
            "type": "number",
            "description": "Products quantity found by picker"
          },
          "messageForShopper": {
            "type": "string"
          },
          "deliveryComment": {
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "deliveryDistance": {
            "type": "number"
          },
          "deliveryDontRing": {
            "type": "boolean"
          },
          "deliveryCallMe": {
            "type": "boolean"
          },
          "deliveryLeaveAtTheDoor": {
            "type": "boolean"
          },
          "invoiceUrl": {
            "type": "string"
          },
          "isReplacementAllowed": {
            "type": "boolean"
          },
          "orderTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderTransactionDto"
            }
          }
        },
        "required": [
          "id",
          "store",
          "deliveryDate",
          "deliveryTimeFrom",
          "deliveryTimeTo",
          "orderNumber",
          "allowCancel",
          "orderStatus",
          "totalRefund",
          "orderCategory",
          "orderStatus_i18n",
          "deliveryPrice",
          "subTotal",
          "grandTotal",
          "orderDateTime",
          "hasReplacement",
          "hasActiveReplacement",
          "replacementExpires",
          "hasUpdate",
          "paidAmount",
          "canBeReordered",
          "customerName",
          "customerNumber",
          "deliveryAddress",
          "deliveryAddressShort",
          "orderItems",
          "orderType",
          "orderWeight",
          "initialOrderWeight",
          "actualOrderWeight",
          "vatTotal",
          "isAlcohol",
          "isCustomAgeRestriction",
          "ageRestriction",
          "isTobacco",
          "isNotForUnderage",
          "isAgeVerified",
          "orderQuantityRequested",
          "orderQuantityFound",
          "deliveryDontRing",
          "deliveryCallMe",
          "deliveryLeaveAtTheDoor",
          "isReplacementAllowed",
          "orderTransactions"
        ]
      },
      "CancelByManagerInput": {
        "type": "object",
        "properties": {
          "refundOrder": {
            "type": "boolean"
          },
          "cancelDescription": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "refundOrder"
        ]
      },
      "OrderCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "customerId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "orderPriority": {
            "example": "LOW",
            "$ref": "#/components/schemas/OrderPriorityEnum"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "deliveryDestination": {
            "default": "HOME",
            "$ref": "#/components/schemas/DeliveryDestinationEnum"
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderTypeEnum"
          },
          "deliveryDate": {
            "type": "string",
            "example": "2021-05-25"
          },
          "pickerId": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "deliveryTimeFrom": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "deliveryTimeTo": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "11:00"
          },
          "messageForShopper": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "customerId",
          "storeId",
          "orderPriority",
          "deliveryAddress",
          "billingAddress",
          "deliveryDestination",
          "orderType",
          "deliveryDate"
        ]
      },
      "OrderUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "customerId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "orderPriority": {
            "example": "LOW",
            "$ref": "#/components/schemas/OrderPriorityEnum"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/CheckoutAddressInput"
          },
          "deliveryDestination": {
            "default": "HOME",
            "$ref": "#/components/schemas/DeliveryDestinationEnum"
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderTypeEnum"
          },
          "deliveryDate": {
            "type": "string",
            "example": "2021-05-25"
          },
          "pickerId": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "deliveryTimeFrom": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "deliveryTimeTo": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "11:00"
          },
          "messageForShopper": {
            "type": "string",
            "maxLength": 300
          },
          "deliveryComment": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "customerId",
          "storeId",
          "orderPriority",
          "deliveryAddress",
          "billingAddress",
          "deliveryDestination",
          "orderType",
          "deliveryDate"
        ]
      },
      "OrderSetStaffInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "staffId": {
            "type": "string"
          },
          "jobType": {
            "type": "string",
            "enum": [
              "PICK",
              "DRIVE"
            ]
          }
        },
        "required": [
          "orderId",
          "staffId",
          "jobType"
        ]
      },
      "RemoveStaffFromIgnoreListInput": {
        "type": "object",
        "properties": {
          "staffIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "staffIds",
          "orderId"
        ]
      },
      "ReplaceTypeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          }
        },
        "required": [
          "id",
          "isActive",
          "code"
        ]
      },
      "ReplaceTypeCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "minLength": 2,
            "maxLength": 50,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "ReplaceTypeUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "minLength": 2,
            "maxLength": 50,
            "$ref": "#/components/schemas/ReplaceTypeEnum"
          }
        }
      },
      "VatCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "value"
        ]
      },
      "VatUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "DeliveryCommentUpdateInput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "New message"
          }
        },
        "required": [
          "message"
        ]
      },
      "OrderAddressChangeInput": {
        "type": "object",
        "properties": {
          "addressId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          }
        },
        "required": [
          "addressId",
          "customerId"
        ]
      },
      "OrderLineInput": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "orderItemId",
          "quantity"
        ]
      },
      "OrderRefundItemsInput": {
        "type": "object",
        "properties": {
          "refundItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderLineInput"
            }
          }
        },
        "required": [
          "refundItems"
        ]
      },
      "OrderReceiptImageInput": {
        "type": "object",
        "properties": {
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "imageUrls"
        ]
      },
      "CustomerAddressCreateInput": {
        "type": "object",
        "properties": {
          "addressName": {
            "type": "string",
            "example": "Home"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "DELIVERY",
              "BILLING"
            ]
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "customerId": {
            "type": "string"
          },
          "floorNumber": {
            "type": "string",
            "example": "1"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          },
          "isDefault": {
            "type": "boolean"
          },
          "deliveryComment": {
            "type": "string",
            "maxLength": 300
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "addressName",
          "addressType",
          "countryCode",
          "city",
          "customerId",
          "zipCode",
          "location"
        ]
      },
      "CustomerAddressUpdateInput": {
        "type": "object",
        "properties": {
          "addressName": {
            "type": "string",
            "example": "Home"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "DELIVERY",
              "BILLING"
            ]
          },
          "countryCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "example": "Hamburg"
          },
          "floorNumber": {
            "type": "string",
            "example": "1"
          },
          "apartmentNumber": {
            "type": "string",
            "example": "16a"
          },
          "streetName": {
            "type": "string",
            "example": "16a"
          },
          "streetNumber": {
            "type": "string",
            "example": "16a"
          },
          "zipCode": {
            "type": "string",
            "example": "NW1 6XE"
          },
          "state": {
            "type": "string",
            "example": "Marylebone"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          },
          "isDefault": {
            "type": "boolean"
          },
          "deliveryComment": {
            "type": "string",
            "maxLength": 300
          },
          "organizationName": {
            "type": "string"
          },
          "organizationTaxId": {
            "type": "string"
          }
        },
        "required": [
          "city",
          "location"
        ]
      },
      "CustomerSessionHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceBrand": {
            "type": "string"
          },
          "deviceOs": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "allowedNotifications": {
            "type": "boolean"
          },
          "allowedLocationTracking": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "deviceId",
          "customerId"
        ]
      },
      "CustomerSettingsCreateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Jeffrey"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Lebowski"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1949-12-04"
          },
          "placeOfBirth": {
            "type": "string",
            "example": "Los Angeles"
          },
          "customerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "customerLanguageCode"
        ]
      },
      "CustomerCreateInput": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/CustomerRoleEnum"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "lebowski@bringoo.de"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "DUDE"
          },
          "settings": {
            "$ref": "#/components/schemas/CustomerSettingsCreateInput"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          },
          "customerTags": {
            "description": "Customer tags",
            "example": [
              "Hamburg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "role",
          "email",
          "password",
          "settings"
        ]
      },
      "CustomerSettingsUpdateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Jeffrey"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Lebowski"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1949-12-04"
          },
          "placeOfBirth": {
            "type": "string",
            "example": "Los Angeles"
          },
          "customerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          }
        }
      },
      "CustomerNotificationSettingsInput": {
        "type": "object",
        "properties": {
          "newProductArrivals": {
            "type": "boolean"
          },
          "sales": {
            "type": "boolean"
          },
          "deliveryStatusChange": {
            "type": "boolean"
          }
        },
        "required": [
          "newProductArrivals",
          "sales",
          "deliveryStatusChange"
        ]
      },
      "CustomerUpdateInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "the-dude@bringoo.de"
          },
          "isPhoneNumberVerified": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "maxLength": 100
          },
          "settings": {
            "$ref": "#/components/schemas/CustomerSettingsUpdateInput"
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/CustomerNotificationSettingsInput"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          },
          "customerTags": {
            "description": "Customer tags",
            "example": [
              "Hamburg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowNotifications": {
            "type": "boolean"
          }
        }
      },
      "CustomerTagDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "tag",
          "count"
        ]
      },
      "CustomerBanCreateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-12-25"
          },
          "managerComment": {
            "type": "string"
          }
        },
        "required": [
          "isActive",
          "customerId",
          "startDateTime"
        ]
      },
      "CustomerBannedDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "managerComment": {
            "type": "string"
          }
        },
        "required": [
          "isActive",
          "startDateTime",
          "endDateTime",
          "managerComment"
        ]
      },
      "PushNotificationCodeEnum": {
        "type": "string",
        "enum": [
          "STAFF_ORDER_CANCEL_CUSTOMER",
          "STAFF_ORDER_CANCEL_ADMIN",
          "STAFF_ORDER_CANCEL_NO_PRODUCTS",
          "STAFF_ORDER_JOB_PICKER_CREATED",
          "STAFF_ORDER_JOB_PICKER_ACCEPTED",
          "STAFF_ORDER_JOB_PICKER_END",
          "STAFF_ORDER_JOB_RIDER_CREATED",
          "STAFF_ORDER_JOB_RIDER_ACCEPTED",
          "STAFF_ORDER_JOB_RIDER_END",
          "STAFF_ORDER_JOB_PICKER_STILL_NOT_ACCEPTED",
          "STAFF_ORDER_JOB_RIDER_STILL_NOT_ACCEPTED",
          "STAFF_ORDER_JOB_PICKER_DELAYED_TO_START",
          "STAFF_ORDER_JOB_RIDER_DELAYED_TO_START",
          "STAFF_ORDER_REPLACEMENT_EXPIRED",
          "STAFF_ORDER_REPLACEMENT_PAID",
          "CUSTOMER_ORDER_PAID_SUCCESSFUL",
          "CUSTOMER_ORDER_CANCEL",
          "CUSTOMER_ORDER_CANCEL_NO_PRODUCTS",
          "CUSTOMER_ORDER_CANCEL_BY_SUPPORT",
          "CUSTOMER_ORDER_JOB_PICKER_START",
          "CUSTOMER_ORDER_UPDATE_PRODUCT",
          "CUSTOMER_ORDER_PICK_COMPLETE",
          "CUSTOMER_ORDER_JOB_RIDER_START",
          "CUSTOMER_ORDER_JOB_RIDER_END",
          "CUSTOMER_ORDER_TERMINATE_WITH_REFUND",
          "CUSTOMER_ORDER_TERMINATE_NO_REFUND",
          "CUSTOMER_ORDER_ADDRESS_CHANGED",
          "CUSTOMER_ORDER_JOB_RIDER_DELAYED_TO_END",
          "CUSTOMER_ORDER_PAYMENT_PENDING_DELAYED",
          "CUSTOMER_ORDER_REPLACEMENT_CREATED",
          "CUSTOMER_ORDER_REPLACEMENT_EXPIRED"
        ]
      },
      "PushNotificationHistoryDataDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "orderJobId": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/PushNotificationCodeEnum"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "orderJobId",
          "code",
          "firstName",
          "lastName",
          "orderNumber"
        ]
      },
      "PushNotificationHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PushNotificationHistoryDataDto"
          },
          "markedAsReaded": {
            "type": "boolean"
          },
          "markedAsDeleted": {
            "type": "boolean"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "userGroup",
          "title",
          "body",
          "markedAsReaded",
          "markedAsDeleted"
        ]
      },
      "PushNotificationGroupEnum": {
        "type": "string",
        "enum": [
          "newProductArrivals",
          "sales",
          "deliveryStatusChange"
        ]
      },
      "PushNotificationTemplateEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/PushNotificationGroupEnum"
          },
          "notificationCode": {
            "$ref": "#/components/schemas/PushNotificationCodeEnum"
          },
          "title_i18n": {
            "type": "string"
          },
          "body_i18n": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userGroup",
          "notificationGroup",
          "notificationCode"
        ]
      },
      "PushNotificationTemplateCreateInput": {
        "type": "object",
        "properties": {
          "title_i18n": {
            "description": "Multi language title",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "body_i18n": {
            "description": "Multi language body",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/PushNotificationGroupEnum"
          },
          "notificationCode": {
            "$ref": "#/components/schemas/PushNotificationCodeEnum"
          }
        },
        "required": [
          "title_i18n",
          "body_i18n",
          "userGroup",
          "notificationGroup",
          "notificationCode"
        ]
      },
      "PushNotificationTemplateUpdateInput": {
        "type": "object",
        "properties": {
          "title_i18n": {
            "description": "Multi language title",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "body_i18n": {
            "description": "Multi language body",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/PushNotificationGroupEnum"
          },
          "notificationCode": {
            "$ref": "#/components/schemas/PushNotificationCodeEnum"
          }
        }
      },
      "PushNotificationDataDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "orderJobId": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/PushNotificationCodeEnum"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "orderJobId",
          "code",
          "firstName",
          "lastName",
          "orderNumber"
        ]
      },
      "PushNotificationStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING",
          "INPROCESS",
          "SENT",
          "FAILED"
        ]
      },
      "PushNotificationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PushNotificationDataDto"
          },
          "isActiveOnly": {
            "type": "boolean"
          },
          "isCustom": {
            "type": "boolean"
          },
          "errorsAmount": {
            "type": "number"
          },
          "errorLog": {
            "type": "string"
          },
          "status": {
            "example": "PENDING",
            "$ref": "#/components/schemas/PushNotificationStatusEnum"
          },
          "sendDate": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userIds",
          "userGroup",
          "title",
          "body",
          "isActiveOnly",
          "isCustom",
          "errorsAmount",
          "status",
          "sendDate"
        ]
      },
      "ProductLegalEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductLegalCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "startDateTime"
        ]
      },
      "ProductLegalUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          }
        }
      },
      "SettingsCountryAllowedEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          }
        },
        "required": [
          "id",
          "isActive",
          "phoneCountryCode"
        ]
      },
      "SettingsCountryAllowedCreateInput": {
        "type": "object",
        "properties": {
          "phoneCountryCode": {
            "type": "string"
          }
        },
        "required": [
          "phoneCountryCode"
        ]
      },
      "SettingsCountryAllowedUpdateInput": {
        "type": "object",
        "properties": {
          "phoneCountryCode": {
            "type": "string"
          }
        },
        "required": [
          "phoneCountryCode"
        ]
      },
      "SettingsEmailBlockedEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "emailDomain": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "emailDomain"
        ]
      },
      "SettingsEmailBlockedCreateInput": {
        "type": "object",
        "properties": {
          "emailDomain": {
            "type": "string"
          }
        },
        "required": [
          "emailDomain"
        ]
      },
      "SettingsEmailBlockedUpdateInput": {
        "type": "object",
        "properties": {
          "emailDomain": {
            "type": "string"
          }
        },
        "required": [
          "emailDomain"
        ]
      },
      "SmsTypeEnum": {
        "type": "string",
        "enum": [
          "CUSTOM",
          "VERIFICATION"
        ]
      },
      "SmsHistoryDataDto": {
        "type": "object",
        "properties": {
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "verificationCode": {
            "type": "string"
          },
          "paymentLink": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderReplacementNumber": {
            "type": "string"
          }
        },
        "required": [
          "phoneCountryCode",
          "phoneNumber",
          "verificationCode",
          "paymentLink",
          "orderNumber",
          "orderReplacementNumber"
        ]
      },
      "SmsHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "managerId": {
            "type": "string"
          },
          "smsType": {
            "$ref": "#/components/schemas/SmsTypeEnum"
          },
          "phoneCountryCode": {
            "type": "string",
            "maxLength": 6
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 15
          },
          "message": {
            "type": "string"
          },
          "errorLog": {
            "type": "string"
          },
          "isSent": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/SmsHistoryDataDto"
          },
          "manager": {
            "$ref": "#/components/schemas/ManagerEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "userId",
          "smsType",
          "phoneCountryCode",
          "phoneNumber",
          "message",
          "isSent"
        ]
      },
      "ManagerSessionHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceBrand": {
            "type": "string"
          },
          "deviceOs": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "managerId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "deviceId",
          "managerId"
        ]
      },
      "ManagerSettingsCreateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Jeffrey"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Lebowski"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1949-12-04"
          },
          "placeOfBirth": {
            "type": "string",
            "example": "Los Angeles"
          },
          "managerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "managerLanguageCode"
        ]
      },
      "ManagerCreateInput": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@bringoo.de"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "DUDE"
          },
          "settings": {
            "$ref": "#/components/schemas/ManagerSettingsCreateInput"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "role",
          "email",
          "password",
          "settings"
        ]
      },
      "ManagerSettingsUpdateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Jeffrey"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Lebowski"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1949-12-04"
          },
          "placeOfBirth": {
            "type": "string",
            "example": "Los Angeles"
          },
          "managerLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          }
        }
      },
      "ManagerUpdateInput": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "manager@bringoo.de"
          },
          "password": {
            "type": "string",
            "maxLength": 100
          },
          "settings": {
            "$ref": "#/components/schemas/ManagerSettingsUpdateInput"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "StaffSessionHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceBrand": {
            "type": "string"
          },
          "deviceOs": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "staffId": {
            "type": "string"
          },
          "allowedNotifications": {
            "type": "boolean"
          },
          "allowedLocationTracking": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "deviceId",
          "staffId"
        ]
      },
      "StaffSettingsCreateInput": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Jeffrey"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Lebowski"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1949-12-04"
          },
          "placeOfBirth": {
            "type": "string",
            "example": "Los Angeles"
          },
          "staffLanguageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "nationalityCode": {
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/SalutationEnum"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "staffNumber": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "staffLanguageCode"
        ]
      },
      "StaffCreateInput": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/StaffRoleEnum"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "lebowski@bringoo.de"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "DUDE"
          },
          "settings": {
            "$ref": "#/components/schemas/StaffSettingsCreateInput"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "role",
          "email",
          "password",
          "settings"
        ]
      },
      "StaffUpdateInput": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/StaffRoleEnum"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "the-dude@bringoo.de"
          },
          "isPhoneNumberVerified": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "maxLength": 100
          },
          "settings": {
            "$ref": "#/components/schemas/StaffSettingsEntity"
          },
          "note": {
            "type": "string",
            "maxLength": 200
          },
          "allowNotifications": {
            "type": "boolean"
          }
        }
      },
      "FindUnboundStaffInput": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "limit",
          "page"
        ]
      },
      "StoreSchedulerDto": {
        "type": "object",
        "properties": {
          "slotNumber": {
            "type": "number"
          },
          "orderNumber": {
            "type": "number"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreSchedulerDayDto"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "slotNumber",
          "orderNumber",
          "days",
          "labels"
        ]
      },
      "SlotReservationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "customerId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "deliveryDate": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "TimeSlotDetailsDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of orders that can be created in this slot"
          },
          "available": {
            "type": "number",
            "description": "Number of orders that can be created in this slot"
          },
          "booked": {
            "type": "number",
            "description": "Number of orders that already created in this slot"
          },
          "bookedPercent": {
            "type": "number"
          },
          "isCustom": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "tz": {
            "type": "string"
          },
          "dateTimeStart": {
            "type": "number"
          },
          "dateTimeEnd": {
            "type": "number"
          },
          "time": {
            "type": "string"
          },
          "dateString": {
            "type": "string"
          },
          "duration": {
            "type": "number",
            "description": "Duration in minutes"
          },
          "deliveryFee": {
            "type": "string"
          },
          "orders": {
            "description": "Orders list for this slot",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderEntity"
            }
          },
          "reservations": {
            "description": "Reservation list for this slot",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlotReservationEntity"
            }
          }
        },
        "required": [
          "total",
          "available",
          "booked",
          "bookedPercent",
          "isCustom",
          "isActive",
          "tz",
          "dateTimeStart",
          "dateTimeEnd",
          "time",
          "dateString",
          "duration",
          "deliveryFee",
          "orders",
          "reservations"
        ]
      },
      "StoreDeliverySlotEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          },
          "slotDuration": {
            "type": "string",
            "description": "Slot duration in minutes"
          },
          "slotCapacity": {
            "type": "string",
            "description": "Number of orders available in this slot"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreDeliverySlotCreateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "storeId": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "slotDuration": {
            "type": "number",
            "description": "Slot duration in minutes"
          },
          "slotCapacity": {
            "type": "number",
            "description": "Number of orders available in this slot"
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "storeId",
          "slotDuration",
          "slotCapacity"
        ]
      },
      "StoreCustomDeliverySlotInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "slotCapacity": {
            "type": "number",
            "description": "Number of orders available in this slot"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "dateTimeStart": {
            "type": "number"
          }
        },
        "required": [
          "storeId",
          "slotCapacity",
          "isActive",
          "dateTimeStart"
        ]
      },
      "StoreDeliverySlotUpdateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "storeId": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "slotDuration": {
            "type": "number",
            "description": "Slot duration in minutes"
          },
          "slotCapacity": {
            "type": "number",
            "description": "Number of orders available in this slot"
          }
        },
        "required": [
          "slotDuration",
          "slotCapacity"
        ]
      },
      "StoreClosingDayCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "note": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "storeId",
          "dateStart",
          "dateEnd"
        ]
      },
      "StoreClosingDayUpdateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "maxLength": 300
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          }
        },
        "required": [
          "dateStart",
          "dateEnd"
        ]
      },
      "StoreDeliveryZoneCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deliveryTime": {
            "type": "number",
            "description": "Delivery time in minutes",
            "example": 45
          },
          "defaultFee": {
            "type": "number",
            "format": "float"
          },
          "isInstantDelivery": {
            "type": "boolean"
          }
        },
        "required": [
          "storeId",
          "dateStart",
          "dateEnd",
          "zipCodes",
          "deliveryTime",
          "defaultFee",
          "isInstantDelivery"
        ]
      },
      "StoreDeliveryZoneUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deliveryTime": {
            "type": "number",
            "description": "Delivery time in minutes",
            "example": 45
          },
          "defaultFee": {
            "type": "number",
            "format": "float"
          },
          "isInstantDelivery": {
            "type": "boolean"
          }
        },
        "required": [
          "dateStart",
          "dateEnd"
        ]
      },
      "StoreInstantDeliveryFeeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "fee": {
            "type": "number"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreInstantDeliveryFeeCreateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "storeId": {
            "type": "string"
          },
          "fee": {
            "type": "number",
            "format": "float"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "storeId",
          "zipCodes"
        ]
      },
      "StoreInstantDeliveryFeeUpdateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "storeId": {
            "type": "string"
          },
          "fee": {
            "type": "number",
            "format": "float"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StoreOpeningHourCreateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "storeId": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "storeId"
        ]
      },
      "StoreOpeningHourUpdateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "storeId": {
            "type": "string"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          }
        }
      },
      "StoreScheduledDeliveryFeeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeEnd": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "fee": {
            "type": "number"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "storeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "StoreScheduledDeliveryFeeCreateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "storeId": {
            "type": "string"
          },
          "fee": {
            "type": "number",
            "format": "float"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "timeStart",
          "timeEnd",
          "dateStart",
          "dateEnd",
          "storeId",
          "zipCodes"
        ]
      },
      "StoreScheduledDeliveryFeeUpdateInput": {
        "type": "object",
        "properties": {
          "timeStart": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "10:00"
          },
          "timeEnd": {
            "type": "string",
            "description": "Time HH:mm",
            "example": "12:00"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "storeId": {
            "type": "string"
          },
          "fee": {
            "type": "number",
            "format": "float"
          },
          "zipCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CountryCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "iso2": {
            "description": "Country Code ISO2",
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "iso3": {
            "description": "Country Code ISO3",
            "example": "DEU",
            "$ref": "#/components/schemas/Iso3Enum"
          },
          "code": {
            "description": "Country Code",
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "iso2",
          "iso3",
          "code"
        ]
      },
      "CountryUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "iso2": {
            "description": "Country Code ISO2",
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "iso3": {
            "description": "Country Code ISO3",
            "example": "DEU",
            "$ref": "#/components/schemas/Iso3Enum"
          },
          "code": {
            "description": "Country Code",
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          }
        },
        "required": [
          "iso2",
          "iso3",
          "code"
        ]
      },
      "NationalityCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "countryCode": {
            "type": "string",
            "example": "DE"
          },
          "code": {
            "type": "string"
          },
          "adjectiveNationality_i18n": {
            "description": "Multi language name adjective nationality.",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "nounNationality_i18n": {
            "description": "Multi language noun nationality.",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "code",
          "adjectiveNationality_i18n",
          "nounNationality_i18n",
          "isActive"
        ]
      },
      "NationalityUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "countryCode": {
            "type": "string",
            "example": "DE"
          },
          "code": {
            "type": "string"
          },
          "adjectiveNationality_i18n": {
            "description": "Multi language adjective nationality.",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "nounNationality_i18n": {
            "description": "Multi language adjective nationality.",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          }
        }
      },
      "ZipInfoEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "osmId": {
            "type": "string"
          },
          "multipolygon": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "isActive",
          "zipCode",
          "countryCode",
          "multipolygon"
        ]
      },
      "LoyaltyProgramCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "logoUrl"
        ]
      },
      "LoyaltyProgramUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          }
        }
      },
      "ShoppingListProductEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "listId": {
            "type": "string"
          },
          "productLinkId": {
            "type": "string"
          },
          "counter": {
            "type": "number",
            "example": 1
          },
          "list": {
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "listId",
          "productLinkId",
          "counter"
        ]
      },
      "ShoppingListEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "listType": {
            "$ref": "#/components/schemas/ShoppingListTypeEnum"
          },
          "storeId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingListProductEntity"
            }
          }
        },
        "required": [
          "id",
          "isActive",
          "listType",
          "storeId",
          "customerId"
        ]
      },
      "VoucherFreeShippingCreateInput": {
        "type": "object",
        "properties": {
          "countryEligibility": {
            "$ref": "#/components/schemas/VoucherCountryEligibilityEnum"
          },
          "countryIds": {
            "description": "Customers ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isMaxShippingRate": {
            "type": "boolean",
            "description": "Is Max shipping rate for a voucher apply"
          },
          "maxShippingRate": {
            "type": "number",
            "description": "Max shipping rate for a voucher apply"
          }
        },
        "required": [
          "countryEligibility",
          "isMaxShippingRate",
          "maxShippingRate"
        ]
      },
      "VoucherProductEligibilityEnum": {
        "type": "string",
        "enum": [
          "ALL",
          "TAGS",
          "SELECTED"
        ]
      },
      "VoucherDiscountCreateInput": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Limit Usage Per Customer"
          },
          "productEligibility": {
            "$ref": "#/components/schemas/VoucherProductEligibilityEnum"
          },
          "productIds": {
            "description": "Customers ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productTags": {
            "description": "Customers tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requirements": {
            "$ref": "#/components/schemas/VoucherRequirementsEnum"
          },
          "minCostAmount": {
            "type": "number",
            "description": "Min cost amount for a voucher apply"
          },
          "minItemsAmount": {
            "type": "number",
            "description": "Min item amount for a voucher apply"
          }
        },
        "required": [
          "value",
          "productEligibility",
          "requirements",
          "minCostAmount",
          "minItemsAmount"
        ]
      },
      "VoucherCreateInput": {
        "type": "object",
        "properties": {
          "managerId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "voucherType": {
            "$ref": "#/components/schemas/VoucherTypeEnum"
          },
          "isLimitUsageTotal": {
            "type": "boolean",
            "description": "Is Limit Usage Total"
          },
          "limitUsageTotal": {
            "type": "number",
            "description": "Limit Usage Total"
          },
          "isLimitUsagePerCustomer": {
            "type": "boolean",
            "description": "Is Limit Usage Per Customer"
          },
          "customerEligibility": {
            "$ref": "#/components/schemas/VoucherCustomerEligibilityEnum"
          },
          "customerIds": {
            "description": "Customers ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerTags": {
            "description": "Customers tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storeEligibility": {
            "$ref": "#/components/schemas/VoucherStoreEligibilityEnum"
          },
          "storeIds": {
            "description": "Stores ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-01"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-01-12"
          },
          "freeShipping": {
            "$ref": "#/components/schemas/VoucherFreeShippingCreateInput"
          },
          "discount": {
            "$ref": "#/components/schemas/VoucherDiscountCreateInput"
          }
        },
        "required": [
          "voucherType",
          "isLimitUsageTotal",
          "limitUsageTotal",
          "isLimitUsagePerCustomer",
          "customerEligibility",
          "storeEligibility",
          "startDateTime",
          "endDateTime"
        ]
      },
      "VoucherUpdateInput": {
        "type": "object",
        "properties": {
          "voucherType": {
            "$ref": "#/components/schemas/VoucherTypeEnum"
          },
          "isLimitUsageTotal": {
            "type": "boolean",
            "description": "Is Limit Usage Total"
          },
          "limitUsageTotal": {
            "type": "number",
            "description": "Limit Usage Total"
          },
          "isLimitUsagePerCustomer": {
            "type": "boolean",
            "description": "Is Limit Usage Per Customer"
          },
          "customerEligibility": {
            "$ref": "#/components/schemas/VoucherCustomerEligibilityEnum"
          },
          "customerIds": {
            "description": "Customers ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerTags": {
            "description": "Customers tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storeEligibility": {
            "$ref": "#/components/schemas/VoucherStoreEligibilityEnum"
          },
          "storeIds": {
            "description": "Stores ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-01"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-01-12"
          },
          "freeShipping": {
            "$ref": "#/components/schemas/VoucherFreeShippingCreateInput"
          },
          "discount": {
            "$ref": "#/components/schemas/VoucherDiscountCreateInput"
          }
        },
        "required": [
          "voucherType",
          "isLimitUsageTotal",
          "limitUsageTotal",
          "isLimitUsagePerCustomer",
          "customerEligibility",
          "storeEligibility",
          "startDateTime",
          "endDateTime"
        ]
      },
      "CommissionFeeStoreEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "commissionFeeScale": {
            "$ref": "#/components/schemas/CommissionFeeScaleEnum"
          },
          "percent": {
            "type": "number",
            "description": "Commission Fee percent for one unit of the product",
            "example": 10
          },
          "min": {
            "type": "number",
            "description": "Commission Fee min value for one unit of the product",
            "example": 1
          },
          "max": {
            "type": "number",
            "description": "Commission Fee max value for one unit of the product",
            "example": 50
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "productCategory": {
            "$ref": "#/components/schemas/ProductCategoryEntity"
          },
          "productSubcategory": {
            "$ref": "#/components/schemas/ProductSubcategoryEntity"
          },
          "product": {
            "$ref": "#/components/schemas/ProductEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "storeId",
          "commissionFeeScale",
          "percent",
          "min",
          "max",
          "dateStart",
          "dateEnd"
        ]
      },
      "CommissionFeeStoreCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "commissionFeeScale": {
            "example": "STORE",
            "$ref": "#/components/schemas/CommissionFeeScaleEnum"
          },
          "percent": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2022-01-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2023-03-16"
          }
        },
        "required": [
          "storeId",
          "commissionFeeScale",
          "percent",
          "min",
          "max",
          "dateStart",
          "dateEnd"
        ]
      },
      "CommissionFeeStoreProductMultipleCreateInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commissionFeeScale": {
            "example": "STORE",
            "$ref": "#/components/schemas/CommissionFeeScaleEnum"
          },
          "percent": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2022-01-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2023-03-16"
          }
        },
        "required": [
          "storeId",
          "productIds",
          "commissionFeeScale",
          "percent",
          "min",
          "max",
          "dateStart",
          "dateEnd"
        ]
      },
      "CommissionFeeStoreUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "commissionFeeScale": {
            "example": "STORE",
            "$ref": "#/components/schemas/CommissionFeeScaleEnum"
          },
          "percent": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "dateStart": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date YYYY-mm-dd",
            "example": "2021-03-15"
          }
        },
        "required": [
          "storeId",
          "commissionFeeScale",
          "percent",
          "min",
          "max"
        ]
      },
      "ManagerSignInInput": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "example": "jhdi-dssd-fdcv"
          },
          "pushNotificationToken": {
            "type": "string"
          },
          "deviceType": {
            "type": "string",
            "example": "desktop"
          },
          "deviceName": {
            "type": "string",
            "example": "some-device"
          },
          "deviceBrand": {
            "type": "string",
            "example": "some-brand"
          },
          "deviceOs": {
            "type": "string",
            "example": "windows"
          },
          "appVersion": {
            "type": "string",
            "example": "0.1"
          },
          "allowedNotifications": {
            "type": "boolean"
          },
          "allowedLocationTracking": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "maxLength": 200,
            "example": "admin@bringoo.de"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "Admin2021*"
          }
        },
        "required": [
          "deviceId",
          "email",
          "password"
        ]
      },
      "TokensDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RefreshTokenInput": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken",
          "deviceId"
        ]
      },
      "EmailVerifyInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "0012454"
          }
        },
        "required": [
          "code"
        ]
      },
      "ResetPasswordInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "deviceId"
        ]
      },
      "SetPasswordInput": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "4:Sp8$z6>@LHq#Pr"
          },
          "confirmPassword": {
            "type": "string",
            "maxLength": 100,
            "example": "4:Sp8$z6>@LHq#Pr"
          }
        },
        "required": [
          "password",
          "confirmPassword"
        ]
      },
      "ChangePasswordInput": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "maxLength": 100,
            "example": "d:Sdsh734dg39hs(*"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "example": "4:Sp8$z6>@LHq#Pr"
          },
          "confirmPassword": {
            "type": "string",
            "maxLength": 100,
            "example": "4:Sp8$z6>@LHq#Pr"
          }
        },
        "required": [
          "oldPassword",
          "password",
          "confirmPassword"
        ]
      },
      "SessionOutInput": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        },
        "required": [
          "sessionId"
        ]
      },
      "ManagerRoleCreateInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Manager role, must be in UpperCase"
          },
          "description": {
            "type": "string",
            "description": "Manager role description"
          }
        },
        "required": [
          "code"
        ]
      },
      "ManagerRoleUpdateInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Manager role, must be in UpperCase"
          },
          "description": {
            "type": "string",
            "description": "Manager role description"
          }
        },
        "required": [
          "code"
        ]
      },
      "AclActionDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "allowed": {
            "type": "boolean"
          }
        },
        "required": [
          "description",
          "code",
          "allowed"
        ]
      },
      "AclResourceDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclActionDto"
            }
          }
        },
        "required": [
          "description",
          "code",
          "actions"
        ]
      },
      "AclDto": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclResourceDto"
            }
          }
        },
        "required": [
          "resources"
        ]
      },
      "AclActionInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "allowed": {
            "type": "boolean"
          }
        },
        "required": [
          "code",
          "allowed"
        ]
      },
      "AclResourceInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclActionInput"
            }
          }
        },
        "required": [
          "code",
          "actions"
        ]
      },
      "AclInput": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclResourceInput"
            }
          }
        },
        "required": [
          "resources"
        ]
      },
      "ManagerSessionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceBrand": {
            "type": "string"
          },
          "deviceOs": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          }
        }
      },
      "PushNotificationCustomStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING",
          "SENT"
        ]
      },
      "PushNotificationCustomEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "managerCreatorId": {
            "type": "string",
            "description": "The ID of manager who created the notification"
          },
          "managerCreator": {
            "$ref": "#/components/schemas/ManagerEntity"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "status": {
            "example": "PENDING",
            "$ref": "#/components/schemas/PushNotificationCustomStatusEnum"
          },
          "sendDate": {
            "type": "string"
          },
          "recepientsAmount": {
            "type": "number",
            "description": "Recepients amount",
            "example": 3
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "signDateMin": {
            "type": "string"
          },
          "signDateMax": {
            "type": "string"
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userGroup",
          "title",
          "body",
          "status",
          "sendDate",
          "recepientsAmount"
        ]
      },
      "CrudPushNotificationCustomCreateInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "title"
          },
          "body": {
            "type": "string",
            "example": "body"
          },
          "userGroup": {
            "example": "customer",
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "status": {
            "example": "PENDING",
            "$ref": "#/components/schemas/PushNotificationCustomStatusEnum"
          },
          "sendDate": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMin": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMax": {
            "type": "string",
            "example": "2023-05-25"
          }
        },
        "required": [
          "title",
          "body",
          "userGroup",
          "status",
          "sendDate"
        ]
      },
      "CrudPushNotificationCustomUpdateInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "title"
          },
          "body": {
            "type": "string",
            "example": "body"
          },
          "userGroup": {
            "example": "customer",
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "status": {
            "example": "PENDING",
            "$ref": "#/components/schemas/PushNotificationStatusEnum"
          },
          "sendDate": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMin": {
            "type": "string",
            "example": "2020-05-25"
          },
          "signDateMax": {
            "type": "string",
            "example": "2023-05-25"
          }
        }
      },
      "OsEnum": {
        "type": "string",
        "enum": [
          "IOS",
          "ANDROID"
        ]
      },
      "RatingAppHistoryEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "rating": {
            "type": "number"
          },
          "customerId": {
            "type": "string"
          },
          "deviceOs": {
            "$ref": "#/components/schemas/OsEnum"
          },
          "appVersion": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "rating",
          "customerId",
          "deviceOs"
        ]
      },
      "RatingAppHistoryCreateInput": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "deviceOs": {
            "example": "IOS",
            "$ref": "#/components/schemas/OsEnum"
          },
          "rating": {
            "type": "number",
            "example": 1
          },
          "appVersion": {
            "type": "string",
            "example": "0.1"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "customerId",
          "rating"
        ]
      },
      "RatingAppHistoryUpdateInput": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "deviceOs": {
            "example": "IOS",
            "$ref": "#/components/schemas/OsEnum"
          },
          "rating": {
            "type": "number",
            "example": 5
          },
          "appVersion": {
            "type": "string",
            "example": "0.1"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "customerId",
          "rating"
        ]
      },
      "OrderEventDto": {
        "type": "object",
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/OrderHistoryEventTypeEnum"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "dateTime": {
            "type": "number"
          },
          "isCurrent": {
            "type": "boolean"
          },
          "metadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "eventType",
          "name_i18n",
          "dateTime",
          "isCurrent"
        ]
      },
      "OrderHistoryDto": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderEventDto"
            }
          },
          "orderNumber": {
            "type": "string"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          }
        },
        "required": [
          "events",
          "orderNumber",
          "orderStatus"
        ]
      },
      "GroupByDateEnum": {
        "type": "string",
        "enum": [
          "DAY",
          "WEEK",
          "MONTH",
          "YEAR"
        ]
      },
      "AnalyticsCustomersOveTimeInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/CustomerRoleEnum"
          },
          "groupBy": {
            "example": "DAY",
            "$ref": "#/components/schemas/GroupByDateEnum"
          },
          "tags": {
            "description": "Customer tags",
            "example": [
              "Hamburg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languageCode": {
            "$ref": "#/components/schemas/LangCodeEnum"
          }
        },
        "required": [
          "dateStart",
          "dateEnd",
          "groupBy"
        ]
      },
      "BarChartValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 10
          },
          "label": {
            "type": "string",
            "example": "2022-01-21"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "OrderedEnum": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "LoyalCustomerOrderedFieldsEnum": {
        "type": "string",
        "enum": [
          "customerName",
          "customerNumber",
          "grandTotal",
          "totalStores",
          "totalOrders",
          "lastOrderDate"
        ]
      },
      "LoyalCustomerInput": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          },
          "order": {
            "example": "ASC",
            "$ref": "#/components/schemas/OrderedEnum"
          },
          "orderedField": {
            "example": "customerNumber",
            "$ref": "#/components/schemas/LoyalCustomerOrderedFieldsEnum"
          }
        },
        "required": [
          "order",
          "orderedField"
        ]
      },
      "LoyalCustomerDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "grandTotal": {
            "type": "number"
          },
          "totalStores": {
            "type": "number"
          },
          "totalOrders": {
            "type": "number"
          },
          "lastOrderDate": {
            "type": "string"
          }
        },
        "required": [
          "customerId",
          "customerName",
          "customerNumber",
          "grandTotal",
          "totalStores",
          "totalOrders",
          "lastOrderDate"
        ]
      },
      "PageableLoyalCustomerDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyalCustomerDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "OneTimeCustomerOrderedFieldsEnum": {
        "type": "string",
        "enum": [
          "customerName",
          "customerNumber",
          "storeName",
          "itemsPurchased",
          "purchaseDate",
          "totalRevenue"
        ]
      },
      "OneTimeCustomerInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "search": {
            "type": "string",
            "example": "Matthew"
          },
          "storeId": {
            "type": "string"
          },
          "totalRevenue": {
            "type": "string",
            "example": ">= 0.15"
          },
          "itemsPurchased": {
            "type": "string",
            "example": "!= 0.15"
          },
          "order": {
            "example": "ASC",
            "$ref": "#/components/schemas/OrderedEnum"
          },
          "orderedField": {
            "example": "customerName",
            "$ref": "#/components/schemas/OneTimeCustomerOrderedFieldsEnum"
          }
        },
        "required": [
          "dateStart",
          "dateEnd",
          "order",
          "orderedField"
        ]
      },
      "OneTimeCustomerDto": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "storeName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "itemsPurchased": {
            "type": "number"
          },
          "totalRevenue": {
            "type": "number"
          },
          "purchaseDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "storeId",
          "storeName",
          "customerId",
          "customerName",
          "customerNumber",
          "itemsPurchased",
          "totalRevenue",
          "purchaseDate"
        ]
      },
      "PageableOneTimeCustomersDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneTimeCustomerDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "CustomerRevenueTypesEnum": {
        "type": "string",
        "enum": [
          "STORE",
          "REGION"
        ]
      },
      "CustomerRevenueInput": {
        "type": "object",
        "properties": {
          "revenueType": {
            "$ref": "#/components/schemas/CustomerRevenueTypesEnum"
          }
        },
        "required": [
          "revenueType"
        ]
      },
      "StackedBarChartValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "name"
        ]
      },
      "DateRangeRequiredInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          }
        },
        "required": [
          "dateStart",
          "dateEnd"
        ]
      },
      "HeatMapChartValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 10
          },
          "label": {
            "type": "string",
            "example": "2022-01-21"
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "value",
          "label",
          "count"
        ]
      },
      "CustomerOrdersHeatMapDto": {
        "type": "object",
        "properties": {
          "chartValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeatMapChartValueDto"
            }
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "chartValue",
          "count"
        ]
      },
      "CustomersOrderCountDto": {
        "type": "object",
        "properties": {
          "totalOrders": {
            "type": "number",
            "description": "Orders count"
          },
          "sumGrandTotal": {
            "type": "number",
            "description": "Many value"
          },
          "userSignUpDate": {
            "type": "string",
            "example": "YYYY-mm"
          },
          "orderCreateDate": {
            "type": "string",
            "example": "YYYY-mm"
          }
        },
        "required": [
          "totalOrders",
          "sumGrandTotal",
          "userSignUpDate",
          "orderCreateDate"
        ]
      },
      "OutOfStockReportInput": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lang": {
            "$ref": "#/components/schemas/LangCodeEnum"
          },
          "storeBrandCode": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "example": "2021-05-25"
          }
        },
        "required": [
          "lang",
          "storeBrandCode",
          "date"
        ]
      },
      "AnonymousOrderPerStoreFiltersInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        }
      },
      "OrderPerStoreAnonymousDto": {
        "type": "object",
        "properties": {
          "rowIdentifier": {
            "type": "string"
          },
          "storeName": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "deliveryDate": {
            "type": "string"
          },
          "orderCount": {
            "type": "number"
          },
          "totalAmount": {
            "type": "number"
          },
          "deliveryPrice": {
            "type": "number"
          },
          "orderQuantityRequested": {
            "type": "number"
          },
          "orderQuantityFound": {
            "type": "number"
          },
          "quantityRefund": {
            "type": "number"
          },
          "grandTotal": {
            "type": "number"
          }
        },
        "required": [
          "rowIdentifier",
          "storeName",
          "storeId",
          "deliveryDate",
          "orderCount",
          "totalAmount",
          "deliveryPrice",
          "orderQuantityRequested",
          "orderQuantityFound",
          "quantityRefund",
          "grandTotal"
        ]
      },
      "PageableOrderPerStoreAnonymousDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPerStoreAnonymousDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "AnonymousOrderPerStoreExportInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "fileExt": {
            "$ref": "#/components/schemas/TransferFileTypeEnum"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductSearchTermInput": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "countryCode": {
            "example": "DE",
            "$ref": "#/components/schemas/Iso2Enum"
          },
          "term": {
            "type": "string",
            "description": "Term"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          }
        }
      },
      "ProductSearchTermDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "term": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "term"
        ]
      },
      "ProductSearchTermsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSearchTermDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "ProductSearchTermProductInput": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Term"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "isAlcohol": {
            "type": "boolean",
            "deprecated": true
          },
          "isBio": {
            "type": "boolean",
            "deprecated": true
          },
          "isFrozen": {
            "type": "boolean",
            "deprecated": true
          },
          "isTobacco": {
            "type": "boolean",
            "deprecated": true
          }
        },
        "required": [
          "term"
        ]
      },
      "ProductSearchTermProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "productName": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "subcategoryName": {
            "type": "string"
          },
          "isAlcohol": {
            "type": "number",
            "deprecated": true
          },
          "isBio": {
            "type": "number",
            "deprecated": true
          },
          "isFrozen": {
            "type": "number",
            "deprecated": true
          },
          "isTobacco": {
            "type": "number",
            "deprecated": true
          }
        },
        "required": [
          "productId",
          "count",
          "productName",
          "categoryName",
          "subcategoryName",
          "isAlcohol",
          "isBio",
          "isFrozen",
          "isTobacco"
        ]
      },
      "ProductSearchTermProductsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSearchTermProductDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "ProductSearchPopularTermsInput": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          }
        }
      },
      "ProductSearchPopularTermsDto": {
        "type": "object",
        "properties": {
          "terms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "terms"
        ]
      },
      "SalesProductsOrderedFieldsEnum": {
        "type": "string",
        "enum": [
          "name_i18n",
          "store_name_i18n",
          "category_name_i18n",
          "subcategory_name_i18n",
          "salesCount",
          "totalPrice",
          "lastSales"
        ]
      },
      "SalesProductsInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "orderedField": {
            "example": "name_i18n",
            "$ref": "#/components/schemas/SalesProductsOrderedFieldsEnum"
          },
          "order": {
            "example": "ASC",
            "$ref": "#/components/schemas/OrderedEnum"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "dateStart",
          "dateEnd",
          "orderedField",
          "order"
        ]
      },
      "SalesProductsDto": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "type": "string"
          },
          "store_name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "category_name_i18n": {
            "type": "string"
          },
          "subcategory_name_i18n": {
            "type": "string"
          },
          "salesCount": {
            "type": "number"
          },
          "totalPrice": {
            "type": "number"
          },
          "lastSales": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "store_name_i18n",
          "storeId",
          "category_name_i18n",
          "subcategory_name_i18n",
          "salesCount",
          "totalPrice",
          "lastSales"
        ]
      },
      "PageableAnalyticsSalesProducts": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesProductsDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "SalesOverTimeInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          },
          "storeRegionCode": {
            "type": "string"
          },
          "vendorTypeCode": {
            "type": "string"
          },
          "vendorCategoryCode": {
            "type": "string"
          },
          "storeCorporateCode": {
            "type": "string"
          },
          "storeBrandCode": {
            "type": "string"
          },
          "groupBy": {
            "example": "DAY",
            "$ref": "#/components/schemas/GroupByDateEnum"
          }
        },
        "required": [
          "dateStart",
          "dateEnd",
          "groupBy"
        ]
      },
      "SalesOverTimeDto": {
        "type": "object",
        "properties": {
          "grandTotal": {
            "type": "number"
          },
          "costSales": {
            "type": "number"
          },
          "averageCheck": {
            "type": "number"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BarChartValueDto"
            }
          }
        },
        "required": [
          "grandTotal",
          "costSales",
          "averageCheck",
          "items"
        ]
      },
      "SalesProductRefundOrderedFieldsEnum": {
        "type": "string",
        "enum": [
          "name_i18n",
          "store_name_i18n",
          "category_name_i18n",
          "subcategory_name_i18n",
          "salesCount",
          "refundCount",
          "outOfStock"
        ]
      },
      "SalesProductRefundInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "categoryCode": {
            "type": "string"
          },
          "subcategoryCode": {
            "type": "string"
          },
          "order": {
            "example": "ASC",
            "$ref": "#/components/schemas/OrderedEnum"
          },
          "orderedField": {
            "example": "name_i18n",
            "$ref": "#/components/schemas/SalesProductRefundOrderedFieldsEnum"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "dateStart",
          "dateEnd",
          "order",
          "orderedField"
        ]
      },
      "ProductRefundDto": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "type": "string"
          },
          "store_name_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "category_name_i18n": {
            "type": "string"
          },
          "subcategory_name_i18n": {
            "type": "string"
          },
          "salesCount": {
            "type": "number"
          },
          "refundCount": {
            "type": "number"
          },
          "outOfStock": {
            "type": "boolean"
          },
          "productCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "store_name_i18n",
          "storeId",
          "category_name_i18n",
          "subcategory_name_i18n",
          "salesCount",
          "refundCount",
          "outOfStock"
        ]
      },
      "PageableProductRefund": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRefundDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "ProductsOutOfStockInput": {
        "type": "object",
        "properties": {
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "storeId": {
            "type": "string"
          },
          "search": {
            "type": "string",
            "example": "Bottle"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "dateStart",
          "dateEnd"
        ]
      },
      "ProductOutOfStockDto": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "deliveryDate": {
            "type": "string"
          },
          "deliveryTime": {
            "type": "string"
          },
          "pickJobStarted": {
            "type": "string"
          },
          "productUpdateStamp": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "storeName": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "subCategoryName": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "regularPrice": {
            "type": "number"
          },
          "currencyCode": {
            "type": "string"
          },
          "orderItemStatus": {
            "$ref": "#/components/schemas/OrderItemStatusEnum"
          },
          "quantityOrdered": {
            "type": "number"
          },
          "quantityFound": {
            "type": "number"
          },
          "quantityRefund": {
            "type": "number"
          },
          "revenueLost": {
            "type": "number"
          },
          "vendorCategoryCode": {
            "type": "string"
          }
        },
        "required": [
          "orderNumber",
          "orderId",
          "deliveryDate",
          "deliveryTime",
          "pickJobStarted",
          "productUpdateStamp",
          "productName",
          "storeName",
          "categoryName",
          "subCategoryName",
          "price",
          "regularPrice",
          "currencyCode",
          "orderItemStatus",
          "quantityOrdered",
          "quantityFound",
          "quantityRefund",
          "revenueLost"
        ]
      },
      "PageableProductsOutOfStockDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOutOfStockDto"
            }
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount",
          "items"
        ]
      },
      "StorePerformanceTotalsDto": {
        "type": "object",
        "properties": {
          "totalOrders": {
            "type": "number",
            "example": 5
          },
          "totalRevenue": {
            "type": "number",
            "example": 5
          },
          "averageOrderValue": {
            "type": "number",
            "example": 5
          },
          "averageOrderTime": {
            "type": "string",
            "example": "14:05"
          }
        },
        "required": [
          "totalOrders",
          "totalRevenue",
          "averageOrderValue",
          "averageOrderTime"
        ]
      },
      "FaqItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "topic": {
            "$ref": "#/components/schemas/FaqTopicEntity"
          },
          "topicCode": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          },
          "order": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "isActive",
          "dateStart",
          "dateEnd",
          "userGroup"
        ]
      },
      "FaqTopicEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaqItemEntity"
            }
          },
          "order": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "isActive",
          "dateStart",
          "dateEnd"
        ]
      },
      "FaqItemCreateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "topicCode": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          }
        },
        "required": [
          "name_i18n",
          "dateStart",
          "dateEnd",
          "code",
          "topicCode",
          "userGroup"
        ]
      },
      "FaqItemUpdateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "topicCode": {
            "type": "string"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupEnum"
          }
        },
        "required": [
          "name_i18n",
          "userGroup"
        ]
      },
      "FaqTopicCreateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n",
          "dateStart",
          "dateEnd",
          "code"
        ]
      },
      "FaqTopicUpdateInput": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name_i18n"
        ]
      },
      "ProductRecallReasonEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductRecallReasonCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code"
        ]
      },
      "ProductRecallReasonUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          }
        }
      },
      "ProductRecallEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ProductEntity"
          },
          "reasonCode": {
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/ProductRecallReasonEntity"
          },
          "stores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreEntity"
            }
          }
        },
        "required": [
          "id",
          "isActive",
          "startDateTime",
          "productId",
          "reasonCode"
        ]
      },
      "ProductRecallCreateInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "storeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-12-25"
          }
        },
        "required": [
          "productId",
          "reasonCode",
          "startDateTime"
        ]
      },
      "ProductRecallUpdateInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          },
          "storeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateTime": {
            "type": "string",
            "example": "2021-01-11"
          },
          "endDateTime": {
            "type": "string",
            "example": "2023-12-25"
          }
        }
      },
      "ProductRecallReasonDto": {
        "type": "object",
        "properties": {
          "customerName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "storeName": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "orderId": {
            "type": "string"
          },
          "deliveryDate": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "quantityRefund": {
            "type": "number"
          }
        },
        "required": [
          "customerName",
          "customerId",
          "storeName",
          "storeId",
          "orderNumber",
          "orderStatus",
          "orderId",
          "deliveryDate",
          "quantity",
          "quantityRefund"
        ]
      },
      "ProductRecallReportsFiltersInput": {
        "type": "object",
        "properties": {
          "orderField": {
            "type": "string"
          },
          "order": {
            "example": "ASC",
            "$ref": "#/components/schemas/OrderedEnum"
          },
          "storeIds": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatusEnum"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "orderField",
          "order",
          "page",
          "limit"
        ]
      },
      "ProductRecommendationItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "storeProductRecommendationId": {
            "type": "string"
          },
          "storeProductRecommendation": {
            "$ref": "#/components/schemas/ProductRecommendationEntity"
          },
          "productLinkId": {
            "type": "string"
          },
          "productLink": {
            "$ref": "#/components/schemas/ProductLinkEntity"
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "ProductRecommendationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "intro_i18n": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/StoreEntity"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRecommendationItemEntity"
            }
          },
          "mainImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headerImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previewImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "dateStart"
        ]
      },
      "FindNotUsedRecommendationProductsInput": {
        "type": "object",
        "properties": {
          "storeProductRecommendationId": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "productSubcategoryCode": {
            "type": "string"
          },
          "productCategoryCode": {
            "type": "string"
          },
          "productBrandCode": {
            "type": "string"
          },
          "productTags": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "page": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "storeProductRecommendationId",
          "limit",
          "page"
        ]
      },
      "StoreProductRecommendationItemUpdateManyInput": {
        "type": "object",
        "properties": {
          "storeProductRecommendationId": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "storeProductRecommendationId"
        ]
      },
      "StoreProductRecommendationCreateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "intro_i18n": {
            "description": "Multi language intro",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "storeId": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "example": "2021-01-11"
          },
          "dateEnd": {
            "type": "string",
            "example": "2023-12-25"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "storeId"
        ]
      },
      "StoreProductRecommendationUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "intro_i18n": {
            "description": "Multi language intro",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "mainImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headerImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previewImageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateStart": {
            "type": "string",
            "example": "2021-01-11"
          },
          "dateEnd": {
            "type": "string",
            "example": "2023-12-25"
          }
        },
        "required": [
          "mainImageUrls",
          "headerImageUrls",
          "previewImageUrls"
        ]
      },
      "SettingsCustomerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "appIosVersion": {
            "type": "string",
            "description": "App iOS Version",
            "example": "1"
          },
          "appAndroidVersion": {
            "type": "string",
            "description": "App Android Version",
            "example": "1"
          },
          "searchRank": {
            "type": "number",
            "description": "Minimum search rank for products",
            "example": 1
          },
          "cartMaxWeight": {
            "type": "number",
            "description": "Cart Max Weight",
            "example": 20
          },
          "productOutOfStockTime": {
            "type": "number",
            "description": "Product out of stock time, hours",
            "example": 48
          },
          "orderDelayNotificationTime": {
            "type": "number",
            "description": "Order delay notification time, minutes",
            "example": 15
          },
          "subscriptionActiveTime": {
            "type": "number",
            "description": "Push Notification Subscription Active State Hours",
            "example": 72
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "SettingsCustomerUpdateInput": {
        "type": "object",
        "properties": {
          "appIosVersion": {
            "type": "string",
            "description": "App iOs Version",
            "example": "1"
          },
          "appAndroidVersion": {
            "type": "string",
            "description": "App Android Version",
            "example": "1"
          },
          "cartMaxWeight": {
            "type": "number",
            "description": "Cart Max Weight",
            "example": 1
          },
          "productOutOfStockTime": {
            "type": "number",
            "description": "Product out out stock time, hours",
            "example": 1
          },
          "orderDelayNotificationTime": {
            "type": "number",
            "description": "Order delay notification time, minutes",
            "example": 15
          },
          "searchRank": {
            "type": "number",
            "description": "Minimum search rank for products",
            "example": 0.05
          },
          "subscriptionActiveTime": {
            "type": "number",
            "description": "Push Notification Subscription Active State Hours",
            "example": 72
          }
        }
      },
      "SettingsPartnerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "commissionFeePercent": {
            "type": "number",
            "description": "Global default commission fee percent for all products",
            "example": 20
          },
          "commissionFeeMin": {
            "type": "number",
            "description": "Global default commission fee min value for all products",
            "example": 1
          },
          "commissionFeeMax": {
            "type": "number",
            "description": "Global default commission fee max value for all products",
            "example": 50
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "SettingsPartnerUpdateInput": {
        "type": "object",
        "properties": {
          "commissionFeePercent": {
            "type": "number",
            "description": "Global default commission fee percent for all products",
            "example": 20
          },
          "commissionFeeMin": {
            "type": "number",
            "description": "Global default commission fee min for all products",
            "example": 1
          },
          "commissionFeeMax": {
            "type": "number",
            "description": "Global default commission fee max for all products",
            "example": 50
          }
        }
      },
      "SettingsStaffEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "appIosVersion": {
            "type": "string",
            "description": "App iOS Version",
            "example": "1"
          },
          "appAndroidVersion": {
            "type": "string",
            "description": "App Android Version",
            "example": "1"
          },
          "searchRank": {
            "type": "number",
            "description": "Minimum search rank for products",
            "example": 1
          },
          "riderJobDistance": {
            "type": "number",
            "description": "Rider Jon Distance",
            "example": 5
          },
          "pickerJobDistance": {
            "type": "number",
            "description": "Picker Jon Distance",
            "example": 3
          },
          "signUpCode": {
            "type": "number",
            "description": "SignUp Code for staff",
            "example": 1111
          },
          "subscriptionActiveTime": {
            "type": "number",
            "description": "Push Notification Subscription Active State Hours",
            "example": 72
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "SettingsStaffUpdateInput": {
        "type": "object",
        "properties": {
          "appIosVersion": {
            "type": "string",
            "description": "App iOs Version",
            "example": "1"
          },
          "appAndroidVersion": {
            "type": "string",
            "description": "App Android Version",
            "example": "1"
          },
          "riderJobDistance": {
            "type": "number",
            "description": "Rider Jon Distance",
            "example": 1
          },
          "pickerJobDistance": {
            "type": "number",
            "description": "Picker Jon Distance",
            "example": 1
          },
          "searchRank": {
            "type": "number",
            "description": "Minimum search rank for products",
            "example": 0.05
          },
          "signUpCode": {
            "type": "number",
            "description": "SignUp Code",
            "example": 123456
          },
          "subscriptionActiveTime": {
            "type": "number",
            "description": "Push Notification Subscription Active State Hours",
            "example": 72
          }
        }
      },
      "Locale": {
        "type": "string",
        "enum": [
          "en_US",
          "nl_NL",
          "nl_BE",
          "fr_FR",
          "fr_BE",
          "de_DE",
          "de_AT",
          "de_CH",
          "es_ES",
          "ca_ES",
          "pt_PT",
          "it_IT",
          "nb_NO",
          "sv_SE",
          "fi_FI",
          "da_DK",
          "is_IS",
          "hu_HU",
          "pl_PL",
          "lv_LV",
          "lt_LT"
        ]
      },
      "MolliePartnerAddressDto": {
        "type": "object",
        "properties": {
          "streetAndNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "MolliePartnerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "address": {
            "$ref": "#/components/schemas/MolliePartnerAddressDto"
          },
          "registrationNumber": {
            "type": "string"
          },
          "vatNumber": {
            "type": "string"
          },
          "vatRegulation": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "organizationId",
          "name",
          "email",
          "accessToken",
          "refreshToken",
          "locale"
        ]
      },
      "MolliePartnerStoresUpdateInput": {
        "type": "object",
        "properties": {
          "storeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SendInvoiceInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "orderId"
        ]
      },
      "SendInvoiceDto": {
        "type": "object",
        "properties": {
          "invoiceUrl": {
            "type": "string"
          }
        },
        "required": [
          "invoiceUrl"
        ]
      },
      "SendAllInvoicesDto": {
        "type": "object",
        "properties": {
          "invoiceCount": {
            "type": "number"
          }
        },
        "required": [
          "invoiceCount"
        ]
      },
      "PrivacyPolicyEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "md_i18n": {
            "type": "string"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "isActive",
          "name_i18n",
          "md_i18n"
        ]
      },
      "I18nMarkDownInput": {
        "type": "object",
        "properties": {
          "EN": {
            "type": "string",
            "example": ""
          },
          "DE": {
            "type": "string",
            "example": ""
          },
          "FR": {
            "type": "string",
            "example": ""
          }
        },
        "required": [
          "EN"
        ]
      },
      "PrivacyPolicyCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "code": {
            "type": "string"
          },
          "md_i18n": {
            "description": "Multi language mark down",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nMarkDownInput"
              }
            ]
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          }
        },
        "required": [
          "isActive",
          "name_i18n",
          "code",
          "md_i18n",
          "dateStart",
          "dateEnd"
        ]
      },
      "PrivacyPolicyUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "code": {
            "type": "string"
          },
          "md_i18n": {
            "description": "Multi language mark down",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nMarkDownInput"
              }
            ]
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          }
        }
      },
      "TermsConditionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          },
          "description_i18n": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "parentId": {
            "type": "string",
            "description": "UUID"
          },
          "dateStart": {
            "type": "string"
          },
          "dateEnd": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/components/schemas/TermsConditionItemDto"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermsConditionItemDto"
            }
          }
        },
        "required": [
          "id",
          "isActive"
        ]
      },
      "TermsConditionItemDto": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "type": "string",
            "description": "Multi language name"
          },
          "description_i18n": {
            "type": "string",
            "description": "Multi language description"
          },
          "code": {
            "type": "string",
            "description": "Unique code",
            "example": "EN"
          },
          "parentId": {
            "type": "string",
            "description": "UUID"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "parent": {
            "$ref": "#/components/schemas/TermsConditionEntity"
          }
        },
        "required": [
          "name_i18n",
          "dateStart",
          "dateEnd"
        ]
      },
      "TermsConditionChildCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "dateStart",
          "dateEnd"
        ]
      },
      "TermsConditionCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermsConditionChildCreateInput"
            }
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "dateStart",
          "dateEnd"
        ]
      },
      "TermsConditionChildUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-15"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          }
        },
        "required": [
          "name_i18n",
          "isActive",
          "code",
          "dateStart",
          "dateEnd"
        ]
      },
      "TermsConditionUpdateInput": {
        "type": "object",
        "properties": {
          "name_i18n": {
            "description": "Multi language name",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "description_i18n": {
            "description": "Multi language description",
            "example": {
              "EN": "--EN--",
              "DE": "--DE--",
              "FR": "--FR--"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/I18nInput"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "code": {
            "type": "string"
          },
          "dateStart": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "dateEnd": {
            "type": "string",
            "description": "Date yyyy-MM-dd",
            "example": "2021-03-16"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermsConditionChildUpdateInput"
            }
          }
        },
        "required": [
          "code"
        ]
      },
      "CustomerLoyaltyProgramEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "create_date": {
            "format": "date-time",
            "type": "string"
          },
          "update_date": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_date": {
            "format": "date-time",
            "type": "string"
          },
          "loyaltyProgramId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "cardNumber": {
            "type": "string",
            "maxLength": 200
          },
          "loyaltyProgram": {
            "$ref": "#/components/schemas/LoyaltyProgramEntity"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEntity"
          }
        },
        "required": [
          "id",
          "isActive",
          "loyaltyProgramId",
          "customerId"
        ]
      },
      "CustomerLoyaltyProgramCreateInput": {
        "type": "object",
        "properties": {
          "loyaltyProgramId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "cardNumber": {
            "type": "string"
          }
        },
        "required": [
          "loyaltyProgramId",
          "customerId"
        ]
      },
      "CustomerLoyaltyProgramUpdateInput": {
        "type": "object",
        "properties": {
          "loyaltyProgramId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "cardNumber": {
            "type": "string"
          }
        }
      },
      "KeyPointCreateInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "routeId": {
            "type": "string"
          },
          "pointType": {
            "$ref": "#/components/schemas/KeyPointTypeEnum"
          },
          "refuelType": {
            "$ref": "#/components/schemas/RefuelTypeEnum"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          }
        },
        "required": [
          "pointType",
          "location"
        ]
      },
      "KeyPointUpdateInput": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "storeId": {
            "type": "string"
          },
          "routeId": {
            "type": "string"
          },
          "pointType": {
            "$ref": "#/components/schemas/KeyPointTypeEnum"
          },
          "refuelType": {
            "$ref": "#/components/schemas/RefuelTypeEnum"
          },
          "location": {
            "$ref": "#/components/schemas/LocationInput"
          }
        },
        "required": [
          "pointType"
        ]
      },
      "RouteCreateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "keyPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyPointCreateInput"
            }
          },
          "provideComment": {
            "type": "string",
            "maxLength": 500
          },
          "dateTimeStart": {
            "type": "string"
          },
          "dateTimeEnd": {
            "type": "string"
          },
          "driverAssignedId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code",
          "isActive",
          "keyPoints",
          "provideComment",
          "dateTimeStart",
          "dateTimeEnd",
          "driverAssignedId"
        ]
      },
      "RouteUpdateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "dateTimeStart": {
            "type": "string"
          },
          "dateTimeEnd": {
            "type": "string"
          },
          "provideComment": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "KeyPointChangeOrderInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "queue": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "queue"
        ]
      },
      "RouteChangeOrderInput": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyPointChangeOrderInput"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "ChangeRouteForKeyPointsInput": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "routeId": {
            "type": "string"
          }
        },
        "required": [
          "ids",
          "routeId"
        ]
      },
      "LogisticStoreDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name_i18n": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name_i18n"
        ]
      },
      "LogisticOrderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "dateTimeEnd": {
            "type": "string"
          },
          "deliveryDistance": {
            "type": "number"
          },
          "store": {
            "$ref": "#/components/schemas/LogisticStoreDto"
          }
        },
        "required": [
          "id",
          "orderNumber",
          "dateTimeEnd",
          "deliveryDistance"
        ]
      },
      "LogisticStaffDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "staffNumber": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "staffNumber",
          "firstName",
          "lastName"
        ]
      },
      "KeyPointDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "routeId": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/LogisticOrderDto"
          },
          "store": {
            "$ref": "#/components/schemas/LogisticStoreDto"
          },
          "pointType": {
            "example": "DROP_OFF",
            "$ref": "#/components/schemas/KeyPointTypeEnum"
          },
          "refuelType": {
            "example": "BIKE_REFILL",
            "$ref": "#/components/schemas/RefuelTypeEnum"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "queue": {
            "type": "number"
          },
          "picker": {
            "$ref": "#/components/schemas/LogisticStaffDto"
          },
          "driver": {
            "$ref": "#/components/schemas/LogisticStaffDto"
          }
        },
        "required": [
          "id",
          "routeId",
          "pointType",
          "refuelType",
          "location",
          "queue"
        ]
      },
      "RouteDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "totalPoints": {
            "type": "number"
          },
          "totalBreaks": {
            "type": "number"
          },
          "totalPickUp": {
            "type": "number"
          },
          "totalDropOff": {
            "type": "number"
          },
          "totalRefuel": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "totalPoints",
          "totalBreaks",
          "totalPickUp",
          "totalDropOff",
          "totalRefuel"
        ]
      },
      "RoutesSearchInput": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "driverAssignedId": {
            "type": "string"
          }
        }
      },
      "RouteDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "dateTimeStart": {
            "type": "string"
          },
          "dateTimeEnd": {
            "type": "string"
          },
          "provideComment": {
            "type": "string"
          },
          "driverAssigned": {
            "$ref": "#/components/schemas/LogisticStaffDto"
          },
          "totalPoints": {
            "type": "number"
          },
          "queue": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "dateTimeStart",
          "dateTimeEnd",
          "totalPoints",
          "queue"
        ]
      },
      "String": {
        "type": "object",
        "properties": {}
      },
      "PostValidationPipeDto": {
        "type": "object",
        "properties": {
          "optionalNumber": {
            "type": "number",
            "description": "testing number field"
          },
          "definedNumber": {
            "type": "number",
            "description": "testing number field"
          },
          "definedString": {
            "type": "string"
          }
        },
        "required": [
          "optionalNumber",
          "definedNumber",
          "definedString"
        ]
      },
      "FindInput": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>"
          },
          "s": {
            "type": "string",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>"
          },
          "filter": {
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "or": {
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sort": {
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "join": {
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>"
          },
          "page": {
            "type": "number",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "example": 1
          },
          "softDelete": {
            "type": "boolean",
            "description": "Load deleted items",
            "example": false
          }
        }
      },
      "FindOneInput": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>"
          },
          "join": {
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "softDelete": {
            "type": "boolean",
            "description": "Load deleted items",
            "example": false
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of items on the current page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "required": [
          "count",
          "total",
          "page",
          "pageCount"
        ]
      },
      "ExceptionCodeEnum": {
        "type": "string",
        "enum": [
          "SERVER_ERROR",
          "CURRENTLY_NO_INSTANT_DELIVERY",
          "DELIVERY_ZONE_NOT_FOUND"
        ]
      },
      "ExceptionDto": {
        "type": "object",
        "properties": {
          "exceptionCode": {
            "description": "Exception code",
            "example": "SERVER_ERROR",
            "$ref": "#/components/schemas/ExceptionCodeEnum"
          },
          "message": {
            "type": "string",
            "description": "Exception message",
            "example": "Store not found"
          },
          "status": {
            "type": "number",
            "description": "Exception status code",
            "example": 404
          }
        },
        "required": [
          "exceptionCode",
          "message",
          "status"
        ]
      }
    }
  }
}